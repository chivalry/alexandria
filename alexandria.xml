<?xml version="1.0"?>
<FMDynamicTemplate version="2.0.0.0" Source="18.0.3" File="alexandria.fmp12" UUID="27805EE7FF22468E8D182050A3CD995B" locale="English">
	<Structure membercount="2">
		<AddAction membercount="15">
			<BaseDirectoryCatalog membercount="1" generate="True" temporary="True">
				<BaseDirectory name="alexandria/" id="0" relativeTo="True"></BaseDirectory>
			</BaseDirectoryCatalog>
			<FileAccessCatalog required="True">
				<UUID>27805EE7FF22468E8D182050A3CD995B</UUID>
				<ObjectList membercount="2">
					<Authorization id="1" type="Local">
						<Source CreationTimestamp="02/23/2020 08:59:26 AM" CreationAccountName="Admin"></Source>
						<UUID>27805EE7FF22468E8D182050A3CD995B</UUID>
						<Display><![CDATA[alexandria]]></Display>
						<Authentication>F3A48C029E74FBEC823A0C0AB77DB268617FEEFDC9DB304141BB58D8057F272798954BDB5DCE50B05F8E1D048B80E0FFDBC8706121D0943A7C22C528AE0143CD</Authentication>
					</Authorization>
					<Authorization id="2" type="External">
						<Source CreationTimestamp="02/23/2020 08:59:26 AM" CreationAccountName="Admin"></Source>
						<UUID>27805EE7FF22468E8D182050A3CD995B</UUID>
						<Display><![CDATA[alexandria]]></Display>
						<Authentication>192CFA8EACCAFA4F0F22F0E518D435573EA7468F1851922BDFB84B8BA261C0E5</Authentication>
					</Authorization>
				</ObjectList>
			</FileAccessCatalog>
			<BaseTableCatalog membercount="6">
				<BaseTable id="130" name="_TEMPLATE">
					<TagList>#^FMI%TBL1CDFAC9607E5CED6CC1F70F130CD1E0DC210B9980206247B797BBB6CD22EB1398F34818BDF92427BBF73B3988966D9F0 </TagList>
				</BaseTable>
				<BaseTable id="131" name="_____ MAIN TABLES __________________________________________________________________________________">
					<TagList>#^FMI%TBL162588F133347A0ABD0D668FD7DF579E8008742B1AE981386DCEBDB6A2882FE455DCAE42978F46F7AB6F4E734D2CAE01 </TagList>
				</BaseTable>
				<BaseTable id="132" name="_____ JOIN TABLES __________________________________________________________________________________">
					<TagList>#^FMI%TBL65C5D13850F4D52E50079CF81703C028A58E189F768FB88FCB5DD79BECB4C869469D271B37DB47C18402609DDC10BB4B </TagList>
				</BaseTable>
				<BaseTable id="133" name="_____ AUX TABLES ___________________________________________________________________________________">
					<TagList>#^FMI%TBL22AA19FA46D4219B9A6A83D09F9988546D01E8094C51BF602EC67D757811F50AB31AF2618D424FBC8DBE5A85DD6381D8 </TagList>
				</BaseTable>
				<BaseTable id="134" name="_____ UTILITY TABLES _______________________________________________________________________________">
					<TagList>#^FMI%TBLD8760BB5D473FFCF05189B6CDCCCB6303C44636B960D4AE08BF8A3D9A7AA3B6572E44000FB1E4005BE6E27DF60307E88 </TagList>
				</BaseTable>
				<BaseTable id="135" name="_____ MODULE TABLES ________________________________________________________________________________">
					<TagList>#^FMI%TBLE5DE711B5A1425C72BC66F6A8922ADF18373CFB4EFB64CAFED938C006351DBC9E5FFD9E300BF473FB62905C38CA9845E </TagList>
				</BaseTable>
			</BaseTableCatalog>
			<TableOccurrenceCatalog membercount="1">
				<TableOccurrence id="1065090" viewState="Full" height="0" name="-" type="Local">
					<BaseTableReference id="130" name="_TEMPLATE"></BaseTableReference>
					<CoordRect top="20" left="20" bottom="136" right="151"></CoordRect>
					<Color red="120" green="120" blue="120" alpha="1.00"></Color>
				</TableOccurrence>
			</TableOccurrenceCatalog>
			<CustomFunctionsCatalog membercount="456">
				<ObjectList membercount="456">
					<CustomFunction id="1" name="__function_template" access="All">
						<Display>__function_template</Display>
					</CustomFunction>
					<CustomFunction id="2" name="__recursive_template" access="All">
						<Display>__recursive_template</Display>
					</CustomFunction>
					<CustomFunction id="3" name="app _____ Application Functions ____________________________________________________________________" access="All">
						<Display>app _____ Application Functions ____________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="4" name="app.DecryptPassword" access="FullAccessOnly">
						<Display>app.DecryptPassword ( _cypher )</Display>
						<ObjectList membercount="1">
							<Parameter name="_cypher"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="5" name="app.EmailPluginKey" access="All">
						<Display>app.EmailPluginKey</Display>
					</CustomFunction>
					<CustomFunction id="6" name="app.EncryptionKey" access="FullAccessOnly">
						<Display>app.EncryptionKey</Display>
					</CustomFunction>
					<CustomFunction id="7" name="app.EncryptPassword" access="FullAccessOnly">
						<Display>app.EncryptPassword ( _password )</Display>
						<ObjectList membercount="1">
							<Parameter name="_password"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="8" name="app.PayPeriodEnd" access="All">
						<Display>app.PayPeriodEnd ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="9" name="app.SolutionName" access="All">
						<Display>app.SolutionName</Display>
					</CustomFunction>
					<CustomFunction id="10" name="app.Version" access="All">
						<Display>app.Version ( _format )</Display>
						<ObjectList membercount="1">
							<Parameter name="_format"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="11" name="apperr _____ Application Error Functions __________________________________________________________" access="All">
						<Display>apperr _____ Application Error Functions __________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="12" name="apperr.ConfigError" access="All">
						<Display>apperr.ConfigError</Display>
					</CustomFunction>
					<CustomFunction id="13" name="apperr.EvalError" access="All">
						<Display>apperr.EvalError ( _calc )</Display>
						<ObjectList membercount="1">
							<Parameter name="_calc"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="14" name="apperr.InvalidEnvironment" access="All">
						<Display>apperr.InvalidEnvironment</Display>
					</CustomFunction>
					<CustomFunction id="15" name="apperr.InvalidPrivilegeSet" access="All">
						<Display>apperr.InvalidPrivilegeSet</Display>
					</CustomFunction>
					<CustomFunction id="16" name="apperr.InvalidScriptParameters" access="All">
						<Display>apperr.InvalidScriptParameters</Display>
					</CustomFunction>
					<CustomFunction id="17" name="apperr.MissingContactInfo" access="All">
						<Display>apperr.MissingContactInfo</Display>
					</CustomFunction>
					<CustomFunction id="18" name="apperr.MissingLayout" access="All">
						<Display>apperr.MissingLayout</Display>
					</CustomFunction>
					<CustomFunction id="19" name="apperr.MissingPlugin" access="All">
						<Display>apperr.MissingPlugin</Display>
					</CustomFunction>
					<CustomFunction id="20" name="apperr.MissingRecord" access="All">
						<Display>apperr.MissingRecord</Display>
					</CustomFunction>
					<CustomFunction id="21" name="apperr.NoUserRecord" access="All">
						<Display>apperr.NoUserRecord</Display>
					</CustomFunction>
					<CustomFunction id="22" name="apperr.SlackChannelNotFound" access="All">
						<Display>apperr.SlackChannelNotFound</Display>
					</CustomFunction>
					<CustomFunction id="23" name="apperr.SlackInvalidChannel" access="All">
						<Display>apperr.SlackInvalidChannel</Display>
					</CustomFunction>
					<CustomFunction id="24" name="apperr.TestingConfigError" access="All">
						<Display>apperr.TestingConfigError</Display>
					</CustomFunction>
					<CustomFunction id="25" name="apperr.UnsupportedPlatform" access="All">
						<Display>apperr.UnsupportedPlatform</Display>
					</CustomFunction>
					<CustomFunction id="26" name="const_____ Sort Constants __________________________________________________________________________" access="FullAccessOnly">
						<Display>const_____ Sort Constants __________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="27" name="const.DateAsc" access="All">
						<Display>const.DateAsc</Display>
					</CustomFunction>
					<CustomFunction id="28" name="const.DateDesc" access="All">
						<Display>const.DateDesc</Display>
					</CustomFunction>
					<CustomFunction id="29" name="const.NumberAsc" access="All">
						<Display>const.NumberAsc</Display>
					</CustomFunction>
					<CustomFunction id="30" name="const.NumberDesc" access="All">
						<Display>const.NumberDesc</Display>
					</CustomFunction>
					<CustomFunction id="31" name="const.TextAsc" access="All">
						<Display>const.TextAsc</Display>
					</CustomFunction>
					<CustomFunction id="32" name="const.TextDesc" access="All">
						<Display>const.TextDesc</Display>
					</CustomFunction>
					<CustomFunction id="33" name="const.TimeAsc" access="All">
						<Display>const.TimeAsc</Display>
					</CustomFunction>
					<CustomFunction id="34" name="const.TimeDesc" access="All">
						<Display>const.TimeDesc</Display>
					</CustomFunction>
					<CustomFunction id="35" name="const.TimestampAsc" access="All">
						<Display>const.TimestampAsc</Display>
					</CustomFunction>
					<CustomFunction id="36" name="const.TimestampDesc" access="All">
						<Display>const.TimestampDesc</Display>
					</CustomFunction>
					<CustomFunction id="37" name="container_____ Container Fields Functions __________________________________________________________" access="FullAccessOnly">
						<Display>container_____ Container Fields Functions __________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="38" name="container.Decode" access="All">
						<Display>container.Decode ( _base64 )</Display>
						<ObjectList membercount="1">
							<Parameter name="_base64"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="39" name="container.Encode" access="All">
						<Display>container.Encode ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="40" name="container.Filename" access="All">
						<Display>container.Filename ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="41" name="container.Interactivate" access="All">
						<Display>container.Interactivate ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="42" name="container.Rename" access="All">
						<Display>container.Rename ( _container ; _filename )</Display>
						<ObjectList membercount="2">
							<Parameter name="_container"></Parameter>
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="43" name="crypt_____ Crypt Functions _________________________________________________________________________" access="FullAccessOnly">
						<Display>crypt_____ Crypt Functions _________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="44" name="crypt.HexDigest" access="All">
						<Display>crypt.HexDigest ( _token )</Display>
						<ObjectList membercount="1">
							<Parameter name="_token"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="45" name="data_____ Data Structures __________________________________________________________________________" access="All">
						<Display>data_____ Data Structures __________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="46" name="data.Alphabet" access="All">
						<Display>data.Alphabet</Display>
					</CustomFunction>
					<CustomFunction id="47" name="data.Colors" access="All">
						<Display>data.Colors</Display>
					</CustomFunction>
					<CustomFunction id="48" name="data.Digits" access="All">
						<Display>data.Digits</Display>
					</CustomFunction>
					<CustomFunction id="49" name="data.Easters" access="All">
						<Display>data.Easters</Display>
					</CustomFunction>
					<CustomFunction id="50" name="data.Ordinals" access="All">
						<Display>data.Ordinals</Display>
					</CustomFunction>
					<CustomFunction id="51" name="data.Weekdays" access="All">
						<Display>data.Weekdays</Display>
					</CustomFunction>
					<CustomFunction id="52" name="date_____ Date Functions ___________________________________________________________________________" access="FullAccessOnly">
						<Display>date_____ Date Functions ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="53" name="date.AdjustDate" access="All">
						<Display>date.AdjustDate ( _dict ; _name )</Display>
						<ObjectList membercount="2">
							<Parameter name="_dict"></Parameter>
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="54" name="date.BusinessHolidays" access="All">
						<Display>date.BusinessHolidays ( _year )</Display>
						<ObjectList membercount="1">
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="55" name="date.ConvertUnixDate" access="All">
						<Display>date.ConvertUnixDate ( _unix_date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_unix_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="56" name="date.DiffDays" access="All">
						<Display>date.DiffDays ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="57" name="date.DiffMonths" access="All">
						<Display>date.DiffMonths ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="58" name="date.DiffString" access="All">
						<Display>date.DiffString ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="59" name="date.DiffYears" access="All">
						<Display>date.DiffYears ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="60" name="date.EndOfMonth" access="All">
						<Display>date.EndOfMonth ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="61" name="date.FirstDayOfWeek" access="All">
						<Display>date.FirstDayOfWeek ( _date ; _week_start )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date"></Parameter>
							<Parameter name="_week_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="62" name="date.Holidays" access="All">
						<Display>date.Holidays ( _year )</Display>
						<ObjectList membercount="1">
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="63" name="date.MonDDYYYY" access="All">
						<Display>date.MonDDYYYY ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="64" name="date.MonthNumber" access="All">
						<Display>date.MonthNumber ( _month_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_month_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="65" name="date.MoveOffWeekend" access="All">
						<Display>date.MoveOffWeekend ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="66" name="date.OrdinalWeekdayOfMonth" access="All">
						<Display>date.OrdinalWeekdayOfMonth ( _ordinal ; _day ; _month ; _year )</Display>
						<ObjectList membercount="4">
							<Parameter name="_ordinal"></Parameter>
							<Parameter name="_day"></Parameter>
							<Parameter name="_month"></Parameter>
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="67" name="date.PeriodicDays" access="All">
						<Display>date.PeriodicDays ( _start ; _frequency ; _after )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_frequency"></Parameter>
							<Parameter name="_after"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="68" name="date.Seconds" access="All">
						<Display>date.Seconds ( _amount ; _unit )</Display>
						<ObjectList membercount="2">
							<Parameter name="_amount"></Parameter>
							<Parameter name="_unit"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="69" name="date.StartOfMonth" access="All">
						<Display>date.StartOfMonth ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="70" name="date.TextualDate" access="All">
						<Display>date.TextualDate ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="71" name="date.WeekdayCount" access="All">
						<Display>date.WeekdayCount ( _start ; _end ; _ignore )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_ignore"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="72" name="date.WeekdayNumber" access="All">
						<Display>date.WeekdayNumber ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="73" name="date.YYMMDD" access="All">
						<Display>date.YYMMDD ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="74" name="date.YYYYMMDD" access="All">
						<Display>date.YYYYMMDD ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="75" name="dev_____ Developer _________________________________________________________________________________" access="FullAccessOnly">
						<Display>dev_____ Developer _________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="76" name="dev.ClearVars" access="All">
						<Display>dev.ClearVars ( _vars )</Display>
						<ObjectList membercount="1">
							<Parameter name="_vars"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="77" name="dev.ComparisonVersion" access="All">
						<Display>dev.ComparisonVersion ( _version )</Display>
						<ObjectList membercount="1">
							<Parameter name="_version"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="78" name="dev.DataTypeMustBeText" access="All">
						<Display>dev.DataTypeMustBeText ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="79" name="dev.Default" access="All">
						<Display>dev.Default ( _value ; _default )</Display>
						<ObjectList membercount="2">
							<Parameter name="_value"></Parameter>
							<Parameter name="_default"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="80" name="dev.FieldComment" access="All">
						<Display>dev.FieldComment ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="81" name="dev.FoundSetFieldValues" access="All">
						<Display>dev.FoundSetFieldValues ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="82" name="dev.GetFieldName" access="All">
						<Display>dev.GetFieldName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="83" name="dev.GetTableName" access="All">
						<Display>dev.GetTableName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="84" name="dev.Housekeeping" access="All">
						<Display>dev.Housekeeping</Display>
					</CustomFunction>
					<CustomFunction id="85" name="dev.IsDataType" access="All">
						<Display>dev.IsDataType ( _value ; _type )</Display>
						<ObjectList membercount="2">
							<Parameter name="_value"></Parameter>
							<Parameter name="_type"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="86" name="dev.IsDeveloper" access="All">
						<Display>dev.IsDeveloper</Display>
					</CustomFunction>
					<CustomFunction id="87" name="dev.IsDuplicateRecord" access="All">
						<Display>dev.IsDuplicateRecord ( _match_field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_match_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="88" name="dev.IsSet" access="All">
						<Display>dev.IsSet ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="89" name="dev.MaxSerial" access="All">
						<Display>dev.MaxSerial ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="90" name="dev.NextValueListItem" access="All">
						<Display>dev.NextValueListItem ( _value_list ; _current_item ; _loop )</Display>
						<ObjectList membercount="3">
							<Parameter name="_value_list"></Parameter>
							<Parameter name="_current_item"></Parameter>
							<Parameter name="_loop"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="91" name="dev.Nil" access="All">
						<Display>dev.Nil</Display>
					</CustomFunction>
					<CustomFunction id="92" name="dev.PanelIsFront" access="All">
						<Display>dev.PanelIsFront ( _panel_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_panel_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="93" name="dev.ParseQualifiedField" access="All">
						<Display>dev.ParseQualifiedField ( _qualified_field ; _table_or_field )</Display>
						<ObjectList membercount="2">
							<Parameter name="_qualified_field"></Parameter>
							<Parameter name="_table_or_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="94" name="dev.RecordCount" access="All">
						<Display>dev.RecordCount ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="95" name="dev.RegExMatch" access="All">
						<Display>dev.RegExMatch ( _source ; _regex )</Display>
						<ObjectList membercount="2">
							<Parameter name="_source"></Parameter>
							<Parameter name="_regex"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="96" name="dev.SetVarByName" access="All">
						<Display>dev.SetVarByName ( _var_name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_var_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="97" name="dev.Show" access="All">
						<Display>dev.Show ( _test )</Display>
						<ObjectList membercount="1">
							<Parameter name="_test"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="98" name="dev.SystemDrive" access="All">
						<Display>dev.SystemDrive</Display>
					</CustomFunction>
					<CustomFunction id="99" name="dev.Timer" access="All">
						<Display>dev.Timer ( _name ; _action )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_action"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="100" name="dev.Toggle" access="All">
						<Display>dev.Toggle ( _existing ; _new )</Display>
						<ObjectList membercount="2">
							<Parameter name="_existing"></Parameter>
							<Parameter name="_new"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="101" name="err_____ Error Numbers _____________________________________________________________________________" access="FullAccessOnly">
						<Display>err_____ Error Numbers _____________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="102" name="err.CannotModifyAdminAccount" access="All">
						<Display>err.CannotModifyAdminAccount</Display>
					</CustomFunction>
					<CustomFunction id="103" name="err.CommandUnavailable" access="All">
						<Display>err.CommandUnavailable</Display>
					</CustomFunction>
					<CustomFunction id="104" name="err.ConnectionFailed" access="All">
						<Display>err.ConnectionFailed</Display>
					</CustomFunction>
					<CustomFunction id="105" name="err.FieldIsMissing" access="All">
						<Display>err.FieldIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="106" name="err.FileIsLocked" access="All">
						<Display>err.FileIsLocked</Display>
					</CustomFunction>
					<CustomFunction id="107" name="err.FileIsMissing" access="All">
						<Display>err.FileIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="108" name="err.FindCriteriaEmpty" access="All">
						<Display>err.FindCriteriaEmpty</Display>
					</CustomFunction>
					<CustomFunction id="109" name="err.GenericCalcError" access="All">
						<Display>err.GenericCalcError</Display>
					</CustomFunction>
					<CustomFunction id="110" name="err.HostExceedsCapacity" access="All">
						<Display>err.HostExceedsCapacity</Display>
					</CustomFunction>
					<CustomFunction id="111" name="err.InsufficientPrivileges" access="All">
						<Display>err.InsufficientPrivileges</Display>
					</CustomFunction>
					<CustomFunction id="112" name="err.InvalidAccountOrPassword" access="All">
						<Display>err.InvalidAccountOrPassword</Display>
					</CustomFunction>
					<CustomFunction id="113" name="err.InvalidPrivilegeSet" access="All">
						<Display>err.InvalidPrivilegeSet</Display>
					</CustomFunction>
					<CustomFunction id="114" name="err.InvalidUserAccount" access="All">
						<Display>err.InvalidUserAccount</Display>
					</CustomFunction>
					<CustomFunction id="115" name="err.InvalidUserCredentials" access="All">
						<Display>err.InvalidUserCredentials</Display>
					</CustomFunction>
					<CustomFunction id="116" name="err.LayoutIsMissing" access="All">
						<Display>err.LayoutIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="117" name="err.LayoutObjectIsMissing" access="All">
						<Display>err.LayoutObjectIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="118" name="err.NameExists" access="All">
						<Display>err.NameExists</Display>
					</CustomFunction>
					<CustomFunction id="119" name="err.NameNotValid" access="All">
						<Display>err.NameNotValid</Display>
					</CustomFunction>
					<CustomFunction id="120" name="err.NoError" access="All">
						<Display>err.NoError</Display>
					</CustomFunction>
					<CustomFunction id="121" name="err.NoRecordsFound" access="All">
						<Display>err.NoRecordsFound</Display>
					</CustomFunction>
					<CustomFunction id="122" name="err.PrivilegeSetMissing" access="All">
						<Display>err.PrivilegeSetMissing</Display>
					</CustomFunction>
					<CustomFunction id="123" name="err.RecordMissing" access="All">
						<Display>err.RecordMissing</Display>
					</CustomFunction>
					<CustomFunction id="124" name="err.RelationshipMissing" access="All">
						<Display>err.RelationshipMissing</Display>
					</CustomFunction>
					<CustomFunction id="125" name="err.ScriptIsMissing" access="All">
						<Display>err.ScriptIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="126" name="err.TableIsMissing" access="All">
						<Display>err.TableIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="127" name="err.TooManyLoginAttempts" access="All">
						<Display>err.TooManyLoginAttempts</Display>
					</CustomFunction>
					<CustomFunction id="128" name="err.UnspportedExcelFormat" access="All">
						<Display>err.UnspportedExcelFormat</Display>
					</CustomFunction>
					<CustomFunction id="129" name="err.UserAccountInactive" access="All">
						<Display>err.UserAccountInactive</Display>
					</CustomFunction>
					<CustomFunction id="130" name="err.UserAccountPasswordDoesNotExist" access="All">
						<Display>err.UserAccountPasswordDoesNotExist</Display>
					</CustomFunction>
					<CustomFunction id="131" name="err.UserCanceledAction" access="All">
						<Display>err.UserCanceledAction</Display>
					</CustomFunction>
					<CustomFunction id="132" name="funit _____ Funit Module Functions _________________________________________________________________" access="All">
						<Display>funit _____ Funit Module Functions _________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="133" name="funit.TransactionID" access="All">
						<Display>funit.TransactionID</Display>
					</CustomFunction>
					<CustomFunction id="134" name="geo_____ Geolocation _______________________________________________________________________________" access="FullAccessOnly">
						<Display>geo_____ Geolocation _______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="135" name="geo.CoordDistance" access="All">
						<Display>geo.CoordDistance ( _lat_1 ; _long_1 ; _lat_2 ; _long_2 )</Display>
						<ObjectList membercount="4">
							<Parameter name="_lat_1"></Parameter>
							<Parameter name="_long_1"></Parameter>
							<Parameter name="_lat_2"></Parameter>
							<Parameter name="_long_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="136" name="housekeeping_____ Housekeeping Overrides ___________________________________________________________" access="FullAccessOnly">
						<Display>housekeeping_____ Housekeeping Overrides ___________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="137" name="housekeeping.IsSuspended" access="All">
						<Display>housekeeping.IsSuspended</Display>
					</CustomFunction>
					<CustomFunction id="138" name="housekeeping.Resume" access="All">
						<Display>housekeeping.Resume</Display>
					</CustomFunction>
					<CustomFunction id="139" name="housekeeping.Suspend" access="All">
						<Display>housekeeping.Suspend</Display>
					</CustomFunction>
					<CustomFunction id="140" name="json_____ JSON Manipulation ________________________________________________________________________" access="FullAccessOnly">
						<Display>json_____ JSON Manipulation ________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="141" name="json.ContainerObject" access="All">
						<Display>json.ContainerObject ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="142" name="json.CreateVarsFromKeys" access="All">
						<Display>json.CreateVarsFromKeys ( _json ; _namespace )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_namespace"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="143" name="json.GetBoolean" access="All">
						<Display>json.GetBoolean ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="144" name="json.GetContainer" access="All">
						<Display>json.GetContainer ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="145" name="json.GetDate" access="All">
						<Display>json.GetDate ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="146" name="json.GetNumber" access="All">
						<Display>json.GetNumber ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="147" name="json.GetTime" access="All">
						<Display>json.GetTime ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="148" name="json.GetTimestamp" access="All">
						<Display>json.GetTimestamp ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="149" name="key _____ Keyboard Codes ___________________________________________________________________________" access="All">
						<Display>key _____ Keyboard Codes ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="150" name="key.ByteOrderMark" access="All">
						<Display>key.ByteOrderMark</Display>
					</CustomFunction>
					<CustomFunction id="151" name="key.ByteOrderMarkCode" access="All">
						<Display>key.ByteOrderMarkCode</Display>
					</CustomFunction>
					<CustomFunction id="152" name="key.Delete" access="All">
						<Display>key.Delete</Display>
					</CustomFunction>
					<CustomFunction id="153" name="key.DeleteCode" access="All">
						<Display>key.DeleteCode</Display>
					</CustomFunction>
					<CustomFunction id="154" name="key.DownArrow" access="All">
						<Display>key.DownArrow</Display>
					</CustomFunction>
					<CustomFunction id="155" name="key.DownArrowCode" access="All">
						<Display>key.DownArrowCode</Display>
					</CustomFunction>
					<CustomFunction id="156" name="key.Enter" access="All">
						<Display>key.Enter</Display>
					</CustomFunction>
					<CustomFunction id="157" name="key.EnterCode" access="All">
						<Display>key.EnterCode</Display>
					</CustomFunction>
					<CustomFunction id="158" name="key.Escape" access="All">
						<Display>key.Escape</Display>
					</CustomFunction>
					<CustomFunction id="159" name="key.EscapeCode" access="All">
						<Display>key.EscapeCode</Display>
					</CustomFunction>
					<CustomFunction id="160" name="key.LineFeed" access="All">
						<Display>key.LineFeed</Display>
					</CustomFunction>
					<CustomFunction id="161" name="key.LinefeedCode" access="All">
						<Display>key.LinefeedCode</Display>
					</CustomFunction>
					<CustomFunction id="162" name="key.Return" access="All">
						<Display>key.Return</Display>
					</CustomFunction>
					<CustomFunction id="163" name="key.ReturnCode" access="All">
						<Display>key.ReturnCode</Display>
					</CustomFunction>
					<CustomFunction id="164" name="key.Tab" access="All">
						<Display>key.Tab</Display>
					</CustomFunction>
					<CustomFunction id="165" name="key.TabCode" access="All">
						<Display>key.TabCode</Display>
					</CustomFunction>
					<CustomFunction id="166" name="key.UpArrow" access="All">
						<Display>key.UpArrow</Display>
					</CustomFunction>
					<CustomFunction id="167" name="key.UpArrowCode" access="All">
						<Display>key.UpArrowCode</Display>
					</CustomFunction>
					<CustomFunction id="168" name="key.VerticalTab" access="All">
						<Display>key.VerticalTab</Display>
					</CustomFunction>
					<CustomFunction id="169" name="key.VerticalTabCode" access="All">
						<Display>key.VerticalTabCode</Display>
					</CustomFunction>
					<CustomFunction id="170" name="let_____ Let Notation Functions ___________________________________________________________________" access="FullAccessOnly">
						<Display>let_____ Let Notation Functions ___________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="171" name="let._EscapeComments" access="All">
						<Display>let._EscapeComments ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="172" name="let._IndexedName" access="All">
						<Display>let._IndexedName ( _name ; _index )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_index"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="173" name="let.Array" access="All">
						<Display>let.Array ( _name ; _index ; _value )</Display>
						<ObjectList membercount="3">
							<Parameter name="_name"></Parameter>
							<Parameter name="_index"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="174" name="let.ArrayFromList" access="All">
						<Display>let.ArrayFromList ( _name ; _list )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="175" name="let.ArrayGet" access="All">
						<Display>let.ArrayGet ( _params ; _name ; _index )</Display>
						<ObjectList membercount="3">
							<Parameter name="_params"></Parameter>
							<Parameter name="_name"></Parameter>
							<Parameter name="_index"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="176" name="let.Assign" access="All">
						<Display>let.Assign ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="177" name="let.Enclose" access="All">
						<Display>let.Enclose ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="178" name="let.Get" access="All">
						<Display>let.Get ( _params ; _name )</Display>
						<ObjectList membercount="2">
							<Parameter name="_params"></Parameter>
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="179" name="let.GetNames" access="All">
						<Display>let.GetNames ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="180" name="let.List" access="All">
						<Display>let.List ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="181" name="let.ListGet" access="All">
						<Display>let.ListGet ( _values ; _index )</Display>
						<ObjectList membercount="2">
							<Parameter name="_values"></Parameter>
							<Parameter name="_index"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="182" name="let.Remove" access="All">
						<Display>let.Remove ( _params ; _remove )</Display>
						<ObjectList membercount="2">
							<Parameter name="_params"></Parameter>
							<Parameter name="_remove"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="183" name="let.Replace" access="All">
						<Display>let.Replace ( _params ; _name ; _value )</Display>
						<ObjectList membercount="3">
							<Parameter name="_params"></Parameter>
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="184" name="let.Set" access="All">
						<Display>let.Set ( _name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="185" name="list_____ Lists ____________________________________________________________________________________" access="FullAccessOnly">
						<Display>list_____ Lists ____________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="186" name="list.AppendIf" access="All">
						<Display>list.AppendIf ( _list ; _value ; _condition )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_value"></Parameter>
							<Parameter name="_condition"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="187" name="list.Concatenate" access="All">
						<Display>list.Concatenate ( _list_1 ; _list_2 ; _sep )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list_1"></Parameter>
							<Parameter name="_list_2"></Parameter>
							<Parameter name="_sep"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="188" name="list.CreateList" access="All">
						<Display>list.CreateList ( _text ; _sep )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_sep"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="189" name="list.CustomList" access="All">
						<Display>list.CustomList ( _start ; _end ; _function )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_function"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="190" name="list.First" access="All">
						<Display>list.First ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="191" name="list.FromFaux" access="All">
						<Display>list.FromFaux ( _faux )</Display>
						<ObjectList membercount="1">
							<Parameter name="_faux"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="192" name="list.Insert" access="All">
						<Display>list.Insert ( _list ; _item ; _position )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_item"></Parameter>
							<Parameter name="_position"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="193" name="list.Intersection" access="All">
						<Display>list.Intersection ( _list_1 ; _list_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list_1"></Parameter>
							<Parameter name="_list_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="194" name="list.IsMember" access="All">
						<Display>list.IsMember ( _item ; _list )</Display>
						<ObjectList membercount="2">
							<Parameter name="_item"></Parameter>
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="195" name="list.KeepItems" access="All">
						<Display>list.KeepItems ( _list ; _test ; _data_type )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_test"></Parameter>
							<Parameter name="_data_type"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="196" name="list.Last" access="All">
						<Display>list.Last ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="197" name="list.MaxDate" access="All">
						<Display>list.MaxDate ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="198" name="list.MaxNumber" access="All">
						<Display>list.MaxNumber ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="199" name="list.MinDate" access="All">
						<Display>list.MinDate ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="200" name="list.MinNumber" access="All">
						<Display>list.MinNumber ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="201" name="list.NextValue" access="All">
						<Display>list.NextValue ( _list ; _item ; _loop )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_item"></Parameter>
							<Parameter name="_loop"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="202" name="list.Pop" access="All">
						<Display>list.Pop ( _var_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_var_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="203" name="list.Range" access="All">
						<Display>list.Range ( _start ; _end )</Display>
						<ObjectList membercount="2">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="204" name="list.Remove" access="All">
						<Display>list.Remove ( _list ; _position )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_position"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="205" name="list.RemoveBlanks" access="All">
						<Display>list.RemoveBlanks ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="206" name="list.RemoveValue" access="All">
						<Display>list.RemoveValue ( _list ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="207" name="list.Replace" access="All">
						<Display>list.Replace ( _list ; _item ; _position )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_item"></Parameter>
							<Parameter name="_position"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="208" name="list.ReplaceSeparator" access="All">
						<Display>list.ReplaceSeparator ( _list ; _string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="209" name="list.ReplaceValue" access="All">
						<Display>list.ReplaceValue ( _list ; _old ; _new )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_old"></Parameter>
							<Parameter name="_new"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="210" name="list.Rest" access="All">
						<Display>list.Rest ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="211" name="list.Reverse" access="All">
						<Display>list.Reverse ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="212" name="list.Rotate" access="All">
						<Display>list.Rotate ( _list ; _offset )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_offset"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="213" name="list.Shuffle" access="All">
						<Display>list.Shuffle ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="214" name="list.Subtract" access="All">
						<Display>list.Subtract ( _subtract_from ; _subtract )</Display>
						<ObjectList membercount="2">
							<Parameter name="_subtract_from"></Parameter>
							<Parameter name="_subtract"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="215" name="list.ToFaux" access="All">
						<Display>list.ToFaux ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="216" name="list.ToggleValue" access="All">
						<Display>list.ToggleValue ( _list ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="217" name="list.ValuePosition" access="All">
						<Display>list.ValuePosition ( _item ; _list ; _start )</Display>
						<ObjectList membercount="3">
							<Parameter name="_item"></Parameter>
							<Parameter name="_list"></Parameter>
							<Parameter name="_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="218" name="log_____ Log Module Functions ______________________________________________________________________" access="FullAccessOnly">
						<Display>log_____ Log Module Functions ______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="219" name="log.SystemState" access="All">
						<Display>log.SystemState</Display>
					</CustomFunction>
					<CustomFunction id="220" name="math_____ Math Functions ___________________________________________________________________________" access="All">
						<Display>math_____ Math Functions ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="221" name="math.BaseToInteger" access="All">
						<Display>math.BaseToInteger ( _int_text ; _base )</Display>
						<ObjectList membercount="2">
							<Parameter name="_int_text"></Parameter>
							<Parameter name="_base"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="222" name="math.Format" access="All">
						<Display>math.Format ( _number ; _precision ; _separator )</Display>
						<ObjectList membercount="3">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
							<Parameter name="_separator"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="223" name="math.FormatCurrency" access="All">
						<Display>math.FormatCurrency ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="224" name="math.FormatOrdinal" access="All">
						<Display>math.FormatOrdinal ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="225" name="math.Fractile" access="All">
						<Display>math.Fractile ( _value ; _list ; _pieces )</Display>
						<ObjectList membercount="3">
							<Parameter name="_value"></Parameter>
							<Parameter name="_list"></Parameter>
							<Parameter name="_pieces"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="226" name="math.IntegerToBase" access="All">
						<Display>math.IntegerToBase ( _int ; _base )</Display>
						<ObjectList membercount="2">
							<Parameter name="_int"></Parameter>
							<Parameter name="_base"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="227" name="math.IntegerToHex" access="All">
						<Display>math.IntegerToHex ( _int )</Display>
						<ObjectList membercount="1">
							<Parameter name="_int"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="228" name="math.IsInteger" access="All">
						<Display>math.IsInteger ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="229" name="math.IsNumber" access="All">
						<Display>math.IsNumber ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="230" name="math.NextPeriodInstance" access="All">
						<Display>math.NextPeriodInstance ( _start ; _freq ; _current )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_freq"></Parameter>
							<Parameter name="_current"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="231" name="math.Permutations" access="All">
						<Display>math.Permutations ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="232" name="math.RoundDownTo" access="All">
						<Display>math.RoundDownTo ( _number ; _precision )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="233" name="math.RoundTo" access="All">
						<Display>math.RoundTo ( _number ; _precision )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="234" name="math.RoundToSignificantDigits" access="All">
						<Display>math.RoundToSignificantDigits ( _number ; _digits )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_digits"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="235" name="math.RoundUpTo" access="All">
						<Display>math.RoundUpTo ( _number ; _precision )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="236" name="math.StDev" access="All">
						<Display>math.StDev ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="237" name="math.StDevP" access="All">
						<Display>math.StDevP ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="238" name="math.Sum" access="All">
						<Display>math.Sum ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="239" name="math.WeightedAverage" access="All">
						<Display>math.WeightedAverage ( _weights ; _values )</Display>
						<ObjectList membercount="2">
							<Parameter name="_weights"></Parameter>
							<Parameter name="_values"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="240" name="mode_____ Mode Constants ___________________________________________________________________________" access="FullAccessOnly">
						<Display>mode_____ Mode Constants ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="241" name="mode.Browse" access="All">
						<Display>mode.Browse</Display>
					</CustomFunction>
					<CustomFunction id="242" name="mode.Find" access="All">
						<Display>mode.Find</Display>
					</CustomFunction>
					<CustomFunction id="243" name="mode.Layout" access="All">
						<Display>mode.Layout</Display>
					</CustomFunction>
					<CustomFunction id="244" name="mode.Preview" access="All">
						<Display>mode.Preview</Display>
					</CustomFunction>
					<CustomFunction id="245" name="mode.Printing" access="All">
						<Display>mode.Printing</Display>
					</CustomFunction>
					<CustomFunction id="246" name="modifier_____ Modifier Key Functions _______________________________________________________________" access="FullAccessOnly">
						<Display>modifier_____ Modifier Key Functions _______________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="247" name="modifier.Alt" access="All">
						<Display>modifier.Alt</Display>
					</CustomFunction>
					<CustomFunction id="248" name="modifier.BitIsSet" access="All">
						<Display>modifier.BitIsSet ( _number ; _bit )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_bit"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="249" name="modifier.CapsLock" access="All">
						<Display>modifier.CapsLock</Display>
					</CustomFunction>
					<CustomFunction id="250" name="modifier.Command" access="All">
						<Display>modifier.Command</Display>
					</CustomFunction>
					<CustomFunction id="251" name="modifier.Control" access="All">
						<Display>modifier.Control</Display>
					</CustomFunction>
					<CustomFunction id="252" name="modifier.KeyActive" access="All">
						<Display>modifier.KeyActive ( _key )</Display>
						<ObjectList membercount="1">
							<Parameter name="_key"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="253" name="modifier.Shift" access="All">
						<Display>modifier.Shift</Display>
					</CustomFunction>
					<CustomFunction id="254" name="msg_____ Messages __________________________________________________________________________________" access="FullAccessOnly">
						<Display>msg_____ Messages __________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="255" name="msg.ContactAdmin" access="All">
						<Display>msg.ContactAdmin</Display>
					</CustomFunction>
					<CustomFunction id="256" name="msg.ContactDev" access="All">
						<Display>msg.ContactDev</Display>
					</CustomFunction>
					<CustomFunction id="257" name="msg.InsufficientPrivileges" access="All">
						<Display>msg.InsufficientPrivileges ( _action )</Display>
						<ObjectList membercount="1">
							<Parameter name="_action"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="258" name="msg.InvalidConfigMessage" access="All">
						<Display>msg.InvalidConfigMessage ( _module ; _reasons )</Display>
						<ObjectList membercount="2">
							<Parameter name="_module"></Parameter>
							<Parameter name="_reasons"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="259" name="msg.InvalidParamsMessage" access="All">
						<Display>msg.InvalidParamsMessage</Display>
					</CustomFunction>
					<CustomFunction id="260" name="path_____ File Paths _______________________________________________________________________________" access="FullAccessOnly">
						<Display>path_____ File Paths _______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="261" name="path.DesktopFilepath" access="All">
						<Display>path.DesktopFilepath ( _filename )</Display>
						<ObjectList membercount="1">
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="262" name="path.DocumentsFilepath" access="All">
						<Display>path.DocumentsFilepath ( _filename )</Display>
						<ObjectList membercount="1">
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="263" name="path.FileExtension" access="All">
						<Display>path.FileExtension ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="264" name="path.FileMaker" access="All">
						<Display>path.FileMaker ( _os_path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_os_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="265" name="path.Filename" access="All">
						<Display>path.Filename ( _path ; _include_ext )</Display>
						<ObjectList membercount="2">
							<Parameter name="_path"></Parameter>
							<Parameter name="_include_ext"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="266" name="path.OperatingSystem" access="All">
						<Display>path.OperatingSystem ( _fm_path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_fm_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="267" name="path.ParentFolder" access="All">
						<Display>path.ParentFolder ( _path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="268" name="path.POSIX" access="All">
						<Display>path.POSIX ( _path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="269" name="path.ProtocolFile" access="All">
						<Display>path.ProtocolFile</Display>
					</CustomFunction>
					<CustomFunction id="270" name="path.ProtocolMac" access="All">
						<Display>path.ProtocolMac</Display>
					</CustomFunction>
					<CustomFunction id="271" name="path.ProtocolPlatform" access="All">
						<Display>path.ProtocolPlatform</Display>
					</CustomFunction>
					<CustomFunction id="272" name="path.ProtocolWin" access="All">
						<Display>path.ProtocolWin</Display>
					</CustomFunction>
					<CustomFunction id="273" name="path.TemporaryFilepath" access="All">
						<Display>path.TemporaryFilepath ( _filename )</Display>
						<ObjectList membercount="1">
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="274" name="platform_____ Platform Functions ___________________________________________________________________" access="FullAccessOnly">
						<Display>platform_____ Platform Functions ___________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="275" name="platform.ArchitectureIs32" access="All">
						<Display>platform.ArchitectureIs32</Display>
					</CustomFunction>
					<CustomFunction id="276" name="platform.Go" access="All">
						<Display>platform.Go</Display>
					</CustomFunction>
					<CustomFunction id="277" name="platform.Intel32" access="All">
						<Display>platform.Intel32</Display>
					</CustomFunction>
					<CustomFunction id="278" name="platform.IsDesktop" access="All">
						<Display>platform.IsDesktop</Display>
					</CustomFunction>
					<CustomFunction id="279" name="platform.IsGo" access="All">
						<Display>platform.IsGo</Display>
					</CustomFunction>
					<CustomFunction id="280" name="platform.IsiPad" access="All">
						<Display>platform.IsiPad</Display>
					</CustomFunction>
					<CustomFunction id="281" name="platform.IsiPhone" access="All">
						<Display>platform.IsiPhone</Display>
					</CustomFunction>
					<CustomFunction id="282" name="platform.IsLinux" access="All">
						<Display>platform.IsLinux</Display>
					</CustomFunction>
					<CustomFunction id="283" name="platform.IsMac" access="All">
						<Display>platform.IsMac</Display>
					</CustomFunction>
					<CustomFunction id="284" name="platform.IsServer" access="All">
						<Display>platform.IsServer</Display>
					</CustomFunction>
					<CustomFunction id="285" name="platform.IsWeb" access="All">
						<Display>platform.IsWeb</Display>
					</CustomFunction>
					<CustomFunction id="286" name="platform.IsWin" access="All">
						<Display>platform.IsWin</Display>
					</CustomFunction>
					<CustomFunction id="287" name="platform.Linux" access="All">
						<Display>platform.Linux</Display>
					</CustomFunction>
					<CustomFunction id="288" name="platform.Mac" access="All">
						<Display>platform.Mac</Display>
					</CustomFunction>
					<CustomFunction id="289" name="platform.VersionAdvanced" access="All">
						<Display>platform.VersionAdvanced</Display>
					</CustomFunction>
					<CustomFunction id="290" name="platform.VersioniPad" access="All">
						<Display>platform.VersioniPad</Display>
					</CustomFunction>
					<CustomFunction id="291" name="platform.VersioniPhone" access="All">
						<Display>platform.VersioniPhone</Display>
					</CustomFunction>
					<CustomFunction id="292" name="platform.VersionName" access="All">
						<Display>platform.VersionName</Display>
					</CustomFunction>
					<CustomFunction id="293" name="platform.VersionPro" access="All">
						<Display>platform.VersionPro</Display>
					</CustomFunction>
					<CustomFunction id="294" name="platform.VersionRuntime" access="All">
						<Display>platform.VersionRuntime</Display>
					</CustomFunction>
					<CustomFunction id="295" name="platform.VersionServer" access="All">
						<Display>platform.VersionServer</Display>
					</CustomFunction>
					<CustomFunction id="296" name="platform.VersionWeb" access="All">
						<Display>platform.VersionWeb</Display>
					</CustomFunction>
					<CustomFunction id="297" name="platform.Win" access="All">
						<Display>platform.Win</Display>
					</CustomFunction>
					<CustomFunction id="298" name="plugin_____ Plugin Functions _______________________________________________________________________" access="FullAccessOnly">
						<Display>plugin_____ Plugin Functions _______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="299" name="plugin.Attribute" access="All">
						<Display>plugin.Attribute ( _name ; _attribute )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_attribute"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="300" name="plugin.Installed" access="All">
						<Display>plugin.Installed ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="301" name="plugin.IsReady" access="All">
						<Display>plugin.IsReady ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="302" name="plugin.RegisterScriptMasterFunction" access="All">
						<Display>plugin.RegisterScriptMasterFunction ( _signature ; _code ; _debug )</Display>
						<ObjectList membercount="3">
							<Parameter name="_signature"></Parameter>
							<Parameter name="_code"></Parameter>
							<Parameter name="_debug"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="303" name="plugin.Version" access="All">
						<Display>plugin.Version ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="304" name="psos_____ Perform Script on Server _________________________________________________________________" access="FullAccessOnly">
						<Display>psos_____ Perform Script on Server _________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="305" name="psos.ConditionalOverride" access="All">
						<Display>psos.ConditionalOverride</Display>
					</CustomFunction>
					<CustomFunction id="306" name="psos.IsOverridden" access="All">
						<Display>psos.IsOverridden</Display>
					</CustomFunction>
					<CustomFunction id="307" name="psos.ShouldPerformOnServer" access="All">
						<Display>psos.ShouldPerformOnServer</Display>
					</CustomFunction>
					<CustomFunction id="308" name="psos.TurnOverrideOff" access="All">
						<Display>psos.TurnOverrideOff</Display>
					</CustomFunction>
					<CustomFunction id="309" name="psos.TurnOverrideOn" access="All">
						<Display>psos.TurnOverrideOn</Display>
					</CustomFunction>
					<CustomFunction id="310" name="random_____ Randomizers ____________________________________________________________________________" access="All">
						<Display>random_____ Randomizers ____________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="311" name="random.ListItem" access="All">
						<Display>random.ListItem ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="312" name="random.Number" access="All">
						<Display>random.Number ( _min ; _max ; _precision )</Display>
						<ObjectList membercount="3">
							<Parameter name="_min"></Parameter>
							<Parameter name="_max"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="313" name="random.Password" access="All">
						<Display>random.Password ( _len )</Display>
						<ObjectList membercount="1">
							<Parameter name="_len"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="314" name="random.PasswordChar" access="All">
						<Display>random.PasswordChar</Display>
					</CustomFunction>
					<CustomFunction id="315" name="range_____ Ranges __________________________________________________________________________________" access="FullAccessOnly">
						<Display>range_____ Ranges __________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="316" name="range.Dates" access="All">
						<Display>range.Dates ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="317" name="range.DatesYYYYMMDD" access="All">
						<Display>range.DatesYYYYMMDD ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="318" name="range.Integers" access="All">
						<Display>range.Integers ( _start ; _end )</Display>
						<ObjectList membercount="2">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="319" name="range.Weekdays" access="All">
						<Display>range.Weekdays ( _start ; _end ; _ignore )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_ignore"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="320" name="range.WeekdaysYYYYMMDD" access="All">
						<Display>range.WeekdaysYYYYMMDD ( _start ; _end ; _ignore )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_ignore"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="321" name="repeat_____ Repeat Module Functions ________________________________________________________________" access="FullAccessOnly">
						<Display>repeat_____ Repeat Module Functions ________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="322" name="repeat.DateInAbsMonthlyDef" access="All">
						<Display>repeat.DateInAbsMonthlyDef ( _date ; _start ; _freq ; _days )</Display>
						<ObjectList membercount="4">
							<Parameter name="_date"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_freq"></Parameter>
							<Parameter name="_days"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="323" name="repeat.DateInAbsYearlyDef" access="All">
						<Display>repeat.DateInAbsYearlyDef ( _date ; _start ; _freq )</Display>
						<ObjectList membercount="3">
							<Parameter name="_date"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_freq"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="324" name="repeat.DateInDef" access="All">
						<Display>repeat.DateInDef ( _timestamp ; _repeat_def )</Display>
						<ObjectList membercount="2">
							<Parameter name="_timestamp"></Parameter>
							<Parameter name="_repeat_def"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="325" name="repeat.DateInLastDef" access="All">
						<Display>repeat.DateInLastDef ( _date ; _day_desc )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date"></Parameter>
							<Parameter name="_day_desc"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="326" name="repeat.DateInOrdinalDef" access="All">
						<Display>repeat.DateInOrdinalDef ( _date ; _ordinal ; _day_desc )</Display>
						<ObjectList membercount="3">
							<Parameter name="_date"></Parameter>
							<Parameter name="_ordinal"></Parameter>
							<Parameter name="_day_desc"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="327" name="repeat.DateInRelMonthlyDef" access="All">
						<Display>repeat.DateInRelMonthlyDef ( _date ; _start ; _freq ; _ordinal ; _day_desc )</Display>
						<ObjectList membercount="5">
							<Parameter name="_date"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_freq"></Parameter>
							<Parameter name="_ordinal"></Parameter>
							<Parameter name="_day_desc"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="328" name="repeat.DateInRelYearlyDef" access="All">
						<Display>repeat.DateInRelYearlyDef ( _date ; _start ; _freq ; _ordinal ; _day_desc )</Display>
						<ObjectList membercount="5">
							<Parameter name="_date"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_freq"></Parameter>
							<Parameter name="_ordinal"></Parameter>
							<Parameter name="_day_desc"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="329" name="repeat.DateInWeeklyDef" access="All">
						<Display>repeat.DateInWeeklyDef ( _date ; _start ; _freq ; _weekdays )</Display>
						<ObjectList membercount="4">
							<Parameter name="_date"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_freq"></Parameter>
							<Parameter name="_weekdays"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="330" name="repeat.MonthAsNumber" access="All">
						<Display>repeat.MonthAsNumber ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="331" name="repeat.MonthDiff" access="All">
						<Display>repeat.MonthDiff ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="332" name="repeat.Ordinal" access="All">
						<Display>repeat.Ordinal ( _ordinal ; _day ; _month ; _year )</Display>
						<ObjectList membercount="4">
							<Parameter name="_ordinal"></Parameter>
							<Parameter name="_day"></Parameter>
							<Parameter name="_month"></Parameter>
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="333" name="repeat.Weekdays" access="All">
						<Display>repeat.Weekdays ( _month ; _year )</Display>
						<ObjectList membercount="2">
							<Parameter name="_month"></Parameter>
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="334" name="repeat.WeekendDays" access="All">
						<Display>repeat.WeekendDays ( _month ; _year )</Display>
						<ObjectList membercount="2">
							<Parameter name="_month"></Parameter>
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="335" name="rgb_____ RGB Extracts ______________________________________________________________________________" access="FullAccessOnly">
						<Display>rgb_____ RGB Extracts ______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="336" name="rgb.Blue" access="All">
						<Display>rgb.Blue ( _rgb )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rgb"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="337" name="rgb.Green" access="All">
						<Display>rgb.Green ( _rgb )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rgb"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="338" name="rgb.Red" access="All">
						<Display>rgb.Red ( _rgb )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rgb"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="339" name="schema_____ Schema Introspection ___________________________________________________________________" access="FullAccessOnly">
						<Display>schema_____ Schema Introspection ___________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="340" name="schema.BaseTableNames" access="All">
						<Display>schema.BaseTableNames</Display>
					</CustomFunction>
					<CustomFunction id="341" name="schema.DataFieldNames" access="All">
						<Display>schema.DataFieldNames ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="342" name="schema.FieldDataType" access="All">
						<Display>schema.FieldDataType ( _field_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="343" name="schema.FieldNames" access="All">
						<Display>schema.FieldNames ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="344" name="schema.FieldRepCount" access="All">
						<Display>schema.FieldRepCount ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="345" name="schema.FieldStorageType" access="All">
						<Display>schema.FieldStorageType ( _field_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="346" name="script_____ Script Parameter Results _______________________________________________________________" access="All">
						<Display>script_____ Script Parameter Results _______________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="347" name="script._CharPosOrLen" access="All">
						<Display>script._CharPosOrLen ( _text ; _char ; _start )</Display>
						<ObjectList membercount="3">
							<Parameter name="_text"></Parameter>
							<Parameter name="_char"></Parameter>
							<Parameter name="_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="348" name="script._OptParams" access="All">
						<Display>script._OptParams ( _script )</Display>
						<ObjectList membercount="1">
							<Parameter name="_script"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="349" name="script._RawParams" access="All">
						<Display>script._RawParams ( _script ; _type )</Display>
						<ObjectList membercount="2">
							<Parameter name="_script"></Parameter>
							<Parameter name="_type"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="350" name="script._ReqParams" access="All">
						<Display>script._ReqParams ( _script )</Display>
						<ObjectList membercount="1">
							<Parameter name="_script"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="351" name="script.AssignParams" access="All">
						<Display>script.AssignParams</Display>
					</CustomFunction>
					<CustomFunction id="352" name="script.AssignResults" access="All">
						<Display>script.AssignResults</Display>
					</CustomFunction>
					<CustomFunction id="353" name="script.ConfirmVars" access="All">
						<Display>script.ConfirmVars ( _names )</Display>
						<ObjectList membercount="1">
							<Parameter name="_names"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="354" name="script.Param" access="All">
						<Display>script.Param ( _name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="355" name="sortable_____ Sortable Text ________________________________________________________________________" access="FullAccessOnly">
						<Display>sortable_____ Sortable Text ________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="356" name="sortable.Date" access="All">
						<Display>sortable.Date ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="357" name="sortable.Number" access="All">
						<Display>sortable.Number ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="358" name="sortable.Time" access="All">
						<Display>sortable.Time ( _time )</Display>
						<ObjectList membercount="1">
							<Parameter name="_time"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="359" name="sortable.Timestamp" access="All">
						<Display>sortable.Timestamp ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="360" name="sql_____ ExecuteSQL ________________________________________________________________________________" access="All">
						<Display>sql_____ ExecuteSQL ________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="361" name="sql.ConvertDate" access="All">
						<Display>sql.ConvertDate ( _sql_date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_sql_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="362" name="sql.Debug" access="All">
						<Display>sql.Debug ( _execute_sql_results )</Display>
						<ObjectList membercount="1">
							<Parameter name="_execute_sql_results"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="363" name="sql.FormatListForIn" access="All">
						<Display>sql.FormatListForIn ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="364" name="sql.QuotedFieldName" access="All">
						<Display>sql.QuotedFieldName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="365" name="sql.QuotedQualified" access="All">
						<Display>sql.QuotedQualified ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="366" name="sql.QuotedTableName" access="All">
						<Display>sql.QuotedTableName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="367" name="sql.SelectCountWhereValue" access="All">
						<Display>sql.SelectCountWhereValue ( _from_table ; _where_field ; _value )</Display>
						<ObjectList membercount="3">
							<Parameter name="_from_table"></Parameter>
							<Parameter name="_where_field"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="368" name="sql.SelectFromWhereValue" access="All">
						<Display>sql.SelectFromWhereValue ( _select_field ; _from_table ; _where_field ; _value )</Display>
						<ObjectList membercount="4">
							<Parameter name="_select_field"></Parameter>
							<Parameter name="_from_table"></Parameter>
							<Parameter name="_where_field"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="369" name="sql.SubstituteQuotedVariables" access="All">
						<Display>sql.SubstituteQuotedVariables ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="370" name="system_____ System Constants _______________________________________________________________________" access="FullAccessOnly">
						<Display>system_____ System Constants _______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="371" name="system.AllowAbortStateOn" access="All">
						<Display>system.AllowAbortStateOn</Display>
					</CustomFunction>
					<CustomFunction id="372" name="system.ErrorCaptureOff" access="All">
						<Display>system.ErrorCaptureOff</Display>
					</CustomFunction>
					<CustomFunction id="373" name="system.IsLandscape" access="All">
						<Display>system.IsLandscape</Display>
					</CustomFunction>
					<CustomFunction id="374" name="system.IsPortrait" access="All">
						<Display>system.IsPortrait</Display>
					</CustomFunction>
					<CustomFunction id="375" name="system.MultiUserStateClient" access="All">
						<Display>system.MultiUserStateClient</Display>
					</CustomFunction>
					<CustomFunction id="376" name="system.MultiUserStateHost" access="All">
						<Display>system.MultiUserStateHost</Display>
					</CustomFunction>
					<CustomFunction id="377" name="system.MultiUserStateOff" access="All">
						<Display>system.MultiUserStateOff</Display>
					</CustomFunction>
					<CustomFunction id="378" name="system.RecordStateClosed" access="All">
						<Display>system.RecordStateClosed</Display>
					</CustomFunction>
					<CustomFunction id="379" name="system.RecordStateEditedOpen" access="All">
						<Display>system.RecordStateEditedOpen</Display>
					</CustomFunction>
					<CustomFunction id="380" name="system.RecordStateNewOpen" access="All">
						<Display>system.RecordStateNewOpen</Display>
					</CustomFunction>
					<CustomFunction id="381" name="text_____ Text Processing __________________________________________________________________________" access="FullAccessOnly">
						<Display>text_____ Text Processing __________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="382" name="text._PhoneFormat" access="All">
						<Display>text._PhoneFormat ( _phone ; _format )</Display>
						<ObjectList membercount="2">
							<Parameter name="_phone"></Parameter>
							<Parameter name="_format"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="383" name="text.BOMPad" access="All">
						<Display>text.BOMPad ( _text ; _length )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_length"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="384" name="text.CamelToSnake" access="All">
						<Display>text.CamelToSnake ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="385" name="text.Clean" access="All">
						<Display>text.Clean ( _text ; _clear_pilcrows ; _trim ; _clear_font ; _clear_size ; _clear_color ; _clear_styles )</Display>
						<ObjectList membercount="7">
							<Parameter name="_text"></Parameter>
							<Parameter name="_clear_pilcrows"></Parameter>
							<Parameter name="_trim"></Parameter>
							<Parameter name="_clear_font"></Parameter>
							<Parameter name="_clear_size"></Parameter>
							<Parameter name="_clear_color"></Parameter>
							<Parameter name="_clear_styles"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="386" name="text.CleanAll" access="All">
						<Display>text.CleanAll ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="387" name="text.CleanFormatWithTrim" access="All">
						<Display>text.CleanFormatWithTrim ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="388" name="text.CleanRetainColorStylesReturns" access="All">
						<Display>text.CleanRetainColorStylesReturns ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="389" name="text.CleanRetainStylesReturns" access="All">
						<Display>text.CleanRetainStylesReturns ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="390" name="text.Color" access="All">
						<Display>text.Color ( _text ; _color )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_color"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="391" name="text.CSVField" access="All">
						<Display>text.CSVField ( _text ; _append_comma )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_append_comma"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="392" name="text.E164PhoneFormat" access="All">
						<Display>text.E164PhoneFormat ( _phone )</Display>
						<ObjectList membercount="1">
							<Parameter name="_phone"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="393" name="text.EndsWith" access="All">
						<Display>text.EndsWith ( _text ; _search_string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_search_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="394" name="text.EscapedEmail" access="All">
						<Display>text.EscapedEmail ( _email )</Display>
						<ObjectList membercount="1">
							<Parameter name="_email"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="395" name="text.EscapeDoubleQuotes" access="All">
						<Display>text.EscapeDoubleQuotes ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="396" name="text.FormatAddress" access="All">
						<Display>text.FormatAddress ( _com ; _con ; _addr_1 ; _addr_2 ; _city ; _state ; _zip ; _country )</Display>
						<ObjectList membercount="8">
							<Parameter name="_com"></Parameter>
							<Parameter name="_con"></Parameter>
							<Parameter name="_addr_1"></Parameter>
							<Parameter name="_addr_2"></Parameter>
							<Parameter name="_city"></Parameter>
							<Parameter name="_state"></Parameter>
							<Parameter name="_zip"></Parameter>
							<Parameter name="_country"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="397" name="text.FullName" access="All">
						<Display>text.FullName ( _prefix ; _first ; _middle ; _last ; _suffix )</Display>
						<ObjectList membercount="5">
							<Parameter name="_prefix"></Parameter>
							<Parameter name="_first"></Parameter>
							<Parameter name="_middle"></Parameter>
							<Parameter name="_last"></Parameter>
							<Parameter name="_suffix"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="398" name="text.GetAsURLEncoded" access="All">
						<Display>text.GetAsURLEncoded ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="399" name="text.Oxfordize" access="All">
						<Display>text.Oxfordize ( _items ; _conjunction ; _quote )</Display>
						<ObjectList membercount="3">
							<Parameter name="_items"></Parameter>
							<Parameter name="_conjunction"></Parameter>
							<Parameter name="_quote"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="400" name="text.Pad" access="All">
						<Display>text.Pad ( _text ; _char ; _counter ; _side )</Display>
						<ObjectList membercount="4">
							<Parameter name="_text"></Parameter>
							<Parameter name="_char"></Parameter>
							<Parameter name="_counter"></Parameter>
							<Parameter name="_side"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="401" name="text.PadSpaces" access="All">
						<Display>text.PadSpaces ( _text ; _count )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_count"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="402" name="text.PadZeros" access="All">
						<Display>text.PadZeros ( _text ; _length )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_length"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="403" name="text.ParseAddress" access="All">
						<Display>text.ParseAddress ( _address )</Display>
						<ObjectList membercount="1">
							<Parameter name="_address"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="404" name="text.ParseName" access="All">
						<Display>text.ParseName ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="405" name="text.PhoneFormat" access="All">
						<Display>text.PhoneFormat ( _phone ; _country )</Display>
						<ObjectList membercount="2">
							<Parameter name="_phone"></Parameter>
							<Parameter name="_country"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="406" name="text.Pluralize" access="All">
						<Display>text.Pluralize ( _word ; _count )</Display>
						<ObjectList membercount="2">
							<Parameter name="_word"></Parameter>
							<Parameter name="_count"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="407" name="text.PrependByteOrderMark" access="All">
						<Display>text.PrependByteOrderMark ( _text ; _count )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_count"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="408" name="text.QuoteIfUnquoted" access="All">
						<Display>text.QuoteIfUnquoted ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="409" name="text.RemoveByteOrderMarks" access="All">
						<Display>text.RemoveByteOrderMarks ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="410" name="text.ReplaceTokens" access="All">
						<Display>text.ReplaceTokens ( _text ; _list )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="411" name="text.StartsWith" access="All">
						<Display>text.StartsWith ( _text ; _search_string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_search_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="412" name="text.SubstituteVariables" access="All">
						<Display>text.SubstituteVariables ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="413" name="text.Supertrim" access="All">
						<Display>text.Supertrim ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="414" name="text.TrimPilcrows" access="All">
						<Display>text.TrimPilcrows ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="415" name="text.TrimStart" access="All">
						<Display>text.TrimStart ( _text ; _chars )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_chars"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="416" name="text.WhitespacePosition" access="All">
						<Display>text.WhitespacePosition ( _text ; _start )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="417" name="timestamp_____ Timestamp Processing ________________________________________________________________" access="FullAccessOnly">
						<Display>timestamp_____ Timestamp Processing ________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="418" name="timestamp.ClockTime" access="All">
						<Display>timestamp.ClockTime ( _time )</Display>
						<ObjectList membercount="1">
							<Parameter name="_time"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="419" name="timestamp.ConvertUnix" access="All">
						<Display>timestamp.ConvertUnix ( _unix_timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_unix_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="420" name="timestamp.Format" access="All">
						<Display>timestamp.Format ( _timestamp ; _format_string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_timestamp"></Parameter>
							<Parameter name="_format_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="421" name="timestamp.FromISO8601" access="All">
						<Display>timestamp.FromISO8601 ( _iso )</Display>
						<ObjectList membercount="1">
							<Parameter name="_iso"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="422" name="timestamp.FromRFC2822" access="All">
						<Display>timestamp.FromRFC2822 ( _rfc_2822 )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rfc_2822"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="423" name="timestamp.ICSFormat" access="All">
						<Display>timestamp.ICSFormat ( _date ; _start ; _end ; _summary ; _description ; _location )</Display>
						<ObjectList membercount="6">
							<Parameter name="_date"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_summary"></Parameter>
							<Parameter name="_description"></Parameter>
							<Parameter name="_location"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="424" name="timestamp.LocalMilliseconds" access="All">
						<Display>timestamp.LocalMilliseconds</Display>
					</CustomFunction>
					<CustomFunction id="425" name="timestamp.MonDDYYYYHHMMP" access="All">
						<Display>timestamp.MonDDYYYYHHMMP ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="426" name="timestamp.PeriodicDays" access="All">
						<Display>timestamp.PeriodicDays ( _start ; _frequency ; _after )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_frequency"></Parameter>
							<Parameter name="_after"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="427" name="timestamp.TextualTime" access="All">
						<Display>timestamp.TextualTime ( _time ; _round_seconds )</Display>
						<ObjectList membercount="2">
							<Parameter name="_time"></Parameter>
							<Parameter name="_round_seconds"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="428" name="timestamp.ToiCalFormat" access="All">
						<Display>timestamp.ToiCalFormat ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="429" name="timestamp.ToISO8601" access="All">
						<Display>timestamp.ToISO8601 ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="430" name="timestamp.UTCDifference" access="All">
						<Display>timestamp.UTCDifference</Display>
					</CustomFunction>
					<CustomFunction id="431" name="triggers_____ Trigger Control ______________________________________________________________________" access="FullAccessOnly">
						<Display>triggers_____ Trigger Control ______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="432" name="triggers._ScriptKey" access="All">
						<Display>triggers._ScriptKey</Display>
					</CustomFunction>
					<CustomFunction id="433" name="triggers.Active" access="All">
						<Display>triggers.Active</Display>
					</CustomFunction>
					<CustomFunction id="434" name="triggers.Disable" access="All">
						<Display>triggers.Disable</Display>
					</CustomFunction>
					<CustomFunction id="435" name="triggers.Enable" access="All">
						<Display>triggers.Enable</Display>
					</CustomFunction>
					<CustomFunction id="436" name="triggers.Force" access="All">
						<Display>triggers.Force</Display>
					</CustomFunction>
					<CustomFunction id="437" name="triggers.Reset" access="All">
						<Display>triggers.Reset</Display>
					</CustomFunction>
					<CustomFunction id="438" name="triggers.Restore" access="All">
						<Display>triggers.Restore</Display>
					</CustomFunction>
					<CustomFunction id="439" name="url_____ URL Builders ______________________________________________________________________________" access="FullAccessOnly">
						<Display>url_____ URL Builders ______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="440" name="url._LetNotationToURLVars" access="All">
						<Display>url._LetNotationToURLVars ( _let_notation )</Display>
						<ObjectList membercount="1">
							<Parameter name="_let_notation"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="441" name="url.Auth" access="All">
						<Display>url.Auth ( _user ; _password )</Display>
						<ObjectList membercount="2">
							<Parameter name="_user"></Parameter>
							<Parameter name="_password"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="442" name="url.Bookend" access="All">
						<Display>url.Bookend ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="443" name="url.FMP" access="All">
						<Display>url.FMP ( _filename ; _host )</Display>
						<ObjectList membercount="2">
							<Parameter name="_filename"></Parameter>
							<Parameter name="_host"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="444" name="url.Param" access="All">
						<Display>url.Param ( _name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="445" name="url.Path" access="All">
						<Display>url.Path ( _segment )</Display>
						<ObjectList membercount="1">
							<Parameter name="_segment"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="446" name="url.PerformScriptByName" access="All">
						<Display>url.PerformScriptByName ( _script ; _param ; _vars )</Display>
						<ObjectList membercount="3">
							<Parameter name="_script"></Parameter>
							<Parameter name="_param"></Parameter>
							<Parameter name="_vars"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="447" name="url.TimestampedToken" access="All">
						<Display>url.TimestampedToken</Display>
					</CustomFunction>
					<CustomFunction id="448" name="window_____ Window Utility Functions _______________________________________________________________" access="FullAccessOnly">
						<Display>window_____ Window Utility Functions _______________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="449" name="window.CenterLeft" access="All">
						<Display>window.CenterLeft ( _parent_left ; _parent_width )</Display>
						<ObjectList membercount="2">
							<Parameter name="_parent_left"></Parameter>
							<Parameter name="_parent_width"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="450" name="window.CenterTop" access="All">
						<Display>window.CenterTop ( _parent_top ; _parent_height )</Display>
						<ObjectList membercount="2">
							<Parameter name="_parent_top"></Parameter>
							<Parameter name="_parent_height"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="451" name="window.HeightFromContent" access="All">
						<Display>window.HeightFromContent ( _content_height )</Display>
						<ObjectList membercount="1">
							<Parameter name="_content_height"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="452" name="window.Offscreen" access="All">
						<Display>window.Offscreen</Display>
					</CustomFunction>
					<CustomFunction id="453" name="window.Utility" access="All">
						<Display>window.Utility ( _id )</Display>
						<ObjectList membercount="1">
							<Parameter name="_id"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="454" name="window.WidthFromContent" access="All">
						<Display>window.WidthFromContent ( _content_height )</Display>
						<ObjectList membercount="1">
							<Parameter name="_content_height"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="455" name="xml_____ XML Parsing _______________________________________________________________________________" access="FullAccessOnly">
						<Display>xml_____ XML Parsing _______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="456" name="xml.ExtractData" access="All">
						<Display>xml.ExtractData ( _xml ; _tag ; _idx )</Display>
						<ObjectList membercount="3">
							<Parameter name="_xml"></Parameter>
							<Parameter name="_tag"></Parameter>
							<Parameter name="_idx"></Parameter>
						</ObjectList>
					</CustomFunction>
				</ObjectList>
			</CustomFunctionsCatalog>
			<FieldsForTables membercount="6">
				<FieldCatalog>
					<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
					<ObjectList membercount="26">
						<Field id="1" name="____ ID FIELDS ________________________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA["Duplicate this table to create a new table with the standard fields."]]></Text>
							</Calculation>
						</Field>
						<Field id="2" name="id" fieldtype="Normal" datatype="Number" comment="">
							<AutoEnter type="SerialNumber" prohibitModification="False">
								<SerialNumber increment="1" nextvalue="1" generate="OnCreation"></SerialNumber>
							</AutoEnter>
							<Validation type="Always" allowOverride="False" notEmpty="True" unique="True" existing="False">
								<Strict>Numeric</Strict>
							</Validation>
							<Storage index="All" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="3" name="____ TABLE DATA _____________________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>
							</Calculation>
						</Field>
						<Field id="4" name="____ RULES ___________________________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>
							</Calculation>
						</Field>
						<Field id="5" name="can_edit" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[list.IsMember ( Get ( AccountPrivilegeSetName ) ; List ( "[Full Access]" ; "Executive" ) )]]></Text>
							</Calculation>
						</Field>
						<Field id="6" name="can_delete" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[list.IsMember ( Get ( AccountPrivilegeSetName ) ; List ( "[Full Access]" ; "Executive" ) )]]></Text>
							</Calculation>
						</Field>
						<Field id="7" name="can_view" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[list.IsMember ( Get ( AccountPrivilegeSetName ) ; List ( "[Full Access]" ; "Executive" ) )]]></Text>
							</Calculation>
						</Field>
						<Field id="8" name="is_valid" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[True]]></Text>
							</Calculation>
						</Field>
						<Field id="9" name="____ RELATIONSHIP KEYS ____________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>
							</Calculation>
						</Field>
						<Field id="10" name="ONE" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[1]]></Text>
							</Calculation>
						</Field>
						<Field id="11" name="TABLE_NAME" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[dev.GetTableName ( id )]]></Text>
							</Calculation>
						</Field>
						<Field id="12" name="____ HOUSEKEEPING FIELDS _________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>
							</Calculation>
						</Field>
						<Field id="34" name="uuid" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="Calculated" prohibitModification="False" overwriteExisting="True" alwaysEvaluate="False">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
										<Text><![CDATA[Get ( UUIDNumber )]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="Always" allowOverride="False" notEmpty="True" unique="True" existing="False"></Validation>
							<Storage autoIndex="True" index="Minimal" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="35" name="created_by" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="CreationAccountName" prohibitModification="False"></AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="36" name="created_timestamp" fieldtype="Normal" datatype="Timestamp" comment="">
							<AutoEnter type="Calculated" prohibitModification="False" overwriteExisting="False" alwaysEvaluate="True">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
										<Text><![CDATA[Get ( CurrentHostTimestamp )]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="37" name="created_date" fieldtype="Calculated" datatype="Date" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[GetAsDate ( created_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="38" name="created_time" fieldtype="Calculated" datatype="Time" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[GetAsTime ( created_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="39" name="modified_by" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="Calculated" prohibitModification="False" overwriteExisting="True" alwaysEvaluate="False">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
										<Text><![CDATA[Let (
  _trigger = housekeeping_trigger ;

  Case (
    $$_SUSPEND_HOUSEKEEPING_UPDATES ; Self
                                    ; Get ( AccountName )
  )
)]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage index="All" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="40" name="modified_timestamp" fieldtype="Normal" datatype="Timestamp" comment="">
							<AutoEnter type="Calculated" prohibitModification="False" overwriteExisting="True" alwaysEvaluate="True">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
										<Text><![CDATA[Let (
  _trigger = housekeeping_trigger ;

  Case (
    $$_SUSPEND_HOUSEKEEPING_UPDATES ; Self
                                    ; Get ( CurrentHostTimestamp )
  )
)]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage index="All" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="41" name="modified_date" fieldtype="Calculated" datatype="Date" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[GetAsDate ( modified_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="42" name="modified_time" fieldtype="Calculated" datatype="Time" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[GetAsTime ( modified_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="43" name="housekeeping_trigger" fieldtype="Normal" datatype="Time" comment="">
							<AutoEnter type="ModificationTime" prohibitModification="False"></AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="44" name="housekeeping_display" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[dev.Housekeeping]]></Text>
							</Calculation>
						</Field>
						<Field id="47" name="fm_id" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="Minimal" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[GetAsText ( Get ( RecordID ) )]]></Text>
							</Calculation>
						</Field>
						<Field id="48" name="modified_count" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
								<Text><![CDATA[Get ( RecordModificationCount )]]></Text>
							</Calculation>
						</Field>
						<Field id="54" name="modified_milliseconds" fieldtype="Normal" datatype="Number" comment="">
							<AutoEnter type="Calculated" prohibitModification="True" overwriteExisting="True" alwaysEvaluate="False">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>
										<Text><![CDATA[Let ( trigger = GetField ( dev.Nil ) ; Get ( CurrentTimeUTCMilliseconds ) )]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage index="All" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
					</ObjectList>
				</FieldCatalog>
				<FieldCatalog>
					<ObjectList membercount="0"></ObjectList>
				</FieldCatalog>
				<FieldCatalog>
					<ObjectList membercount="0"></ObjectList>
				</FieldCatalog>
				<FieldCatalog>
					<ObjectList membercount="0"></ObjectList>
				</FieldCatalog>
				<FieldCatalog>
					<ObjectList membercount="0"></ObjectList>
				</FieldCatalog>
				<FieldCatalog>
					<ObjectList membercount="0"></ObjectList>
				</FieldCatalog>
			</FieldsForTables>
			<CalcsForCustomFunctions membercount="456">
				<ObjectList membercount="456">
					<CustomFunctionCalc>
						<CustomFunctionReference id="1" name="__function_template"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _ = ""
  ] ;

  ""
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="2" name="__recursive_template"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  // ========================================
  // Step 0: Setup
  IsEmpty ( $_custom_function_name_step ) ;
  Let (
    [
      $_custom_function_name_debug = False ;

      _ = ""
    ] ;

    __recursive_template
  ) ;

  // ========================================
  // Step 1: Recursion
  $_custom_function_name_step = 1 ;
  Let (
    [
      _ = "recurisve steps here" ;

      _ = ""
    ] ;
    __recursive_template
  ) ;

  // ========================================
  // Step 2: Cleanup
  $_custom_function_name_step = 2 ;
  Let (
    [
      _result = "assign result and clear local variables if not debugging" ;

      _ = Case (
        not $_custom_function_name_debug ;
        dev.ClearVars ( List ( "var" ; "var" ) )
      ) ;

      // Step is always cleared regardless of debug mode.
      $_custom_function_name_step = dev.Nil ;

      _ = ""
    ] ;
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="3" name="app _____ Application Functions ____________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions specific to this application.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="4" name="app.DecryptPassword"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.EncryptPassword
// Purpose:		Return the decrypted version of a password.
// Parameters:		_cypher:	The encrypted version of the password
// Version:		1.0 - Charles Ross - 19-01-21

CryptDecryptBase64 ( _cypher ; app.EncryptionKey )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="5" name="app.EmailPluginKey"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA["DKVH88KYACABQE6AB4VEBXTQ"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="6" name="app.EncryptionKey"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.EncryptionKey
// Purpose:		Stores the encryption key for encrypting and decrypting passwords.
// Version:		1.0 - Charles Ross - 19-01-21
// Notes:			Research if this is the best way to store this.

"kf.eE7gp9KC$)(3ePrTfq6A6gBq&k]8YDhXs[?[7bUbg6RqyA3ZUtAsGZ4bxm=LW"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="7" name="app.EncryptPassword"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.EncryptPassword
// Purpose:		Return the encrypted version of a password.
// Parameters:		_password:	The password to encrypt
// Version:		1.0 - Charles Ross - 19-01-21

CryptEncryptBase64 ( _password ; app.EncryptionKey )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="8" name="app.PayPeriodEnd"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.PayPeriodStart ( _date )
// Purpose:		Return the date of the pay period that ended immediately prior to the given date.
// Parameters:		_date:	The date to return the pay period end before
// Requirements: 	math.RoundDownTo
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Pay periods end on Saturdays, rounding to the nearest 14 days gives us a Sunday,
//				subtracting 1 gives the previous Saturday.
// Example:		app.PayPeriodEnd ( Date ( 12 ; 18 ; 2018 ) ) = Date ( 12 ; 15 ; 2018 )

GetAsDate ( math.RoundDownTo ( _date ; 14 ) ) - 1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="9" name="app.SolutionName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[/*// app.SolutionName
// Purpose:		Returns the solution name as given in the PREF table.
// Requirements: 	sql.SelectFromWhereValue
// Version:		1.0 - Charles Ross - 18-07-31
// Example:		sample = result

sql.SelectFromWhereValue ( PREF::value ; PREF::id ; PREF::name ; "Solution Name" )*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="10" name="app.Version"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.Version ( _format )
// Purpose:		Returns the application version in either simple or compare format.
// Parameters:		_format:	Either "simple" or "compare", defaults to simple
// Version:		1.0 - Charles Ross - 17-03-13
//				1.1 - Charles Ross - 17-07-03 - Automated compare version from simple version
// Notes:			The second section of the compare format is the numeric release version,
//				with 0 for alpha, 1 for beta and 2 for production.
// Example:		app.Version ( "" ) = "1.0a1"

Let (
  [
    _version = "1.0a1" ;

    _major = text.PadZeros ( Truncate ( GetAsNumber ( _version ) ; 0 ) ; 3 ) ;

    _release = Case (
      PatternCount ( _version ; "a" ) ; 0 ;
      PatternCount ( _version ; "b" ) ; 1 ;
      PatternCount ( _version ; "v" ) ; 2
    ) ;

    _version = Substitute (
      _version ;
      [ "a" ; "." ] ;
      [ "b" ; "." ] ;
      [ "v" ; "." ]
    ) ;
    _list = list.CreateList ( _version ; "." ) ;

    _minor = text.PadZeros ( GetValue ( _list ; 2 ) ; 3 ) ;
    _incr  = text.PadZeros ( GetValue ( _list ; 3 ) ; 3 ) ;

    _compare = list.ReplaceSeparator ( List ( _major ; _release ; _minor ; _incr ) ; "." ) ;

    _result = Case (
      "compare" ≠ "compare" ;
      _version ;

      // major.release.minor.increment
      _compare
    )

  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="11" name="apperr _____ Application Error Functions __________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions specific to this application.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="12" name="apperr.ConfigError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.ConfigError
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.ConfigError = "Configuration error"

"Configuration error"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="13" name="apperr.EvalError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.EvalError
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.EvalError = "Configuration error"

"The expression " & Quote ( _calc ) & " generated an evaluation error. " & msg.ContactDev]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="14" name="apperr.InvalidEnvironment"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.InvalidEnvironment
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.InvalidEnvironment = "Invalid Environment"

"Invalid Environment"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="15" name="apperr.InvalidPrivilegeSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.InvalidPrivilegeSet
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.InvalidPrivilegeSet = "Invalid Privilege Set"

"Invalid Privilege Set"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="16" name="apperr.InvalidScriptParameters"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.InvalidScriptParameters
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.InvalidScriptParameters = "Script received invalid parameters"

"Script received invalid parameters"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="17" name="apperr.MissingContactInfo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.MissingContactInfo
// Purpose:		Returns the error code for the named error
// Version:		19-12-13 -  Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.MissingContactInfo = "Account record missing slack or email address."

"Account record missing slack or email address."]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="18" name="apperr.MissingLayout"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.MissingLayout
// Purpose:		Returns the error code for the named error
// Version:		20-01-06 -  Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.MissingLayout = "Missing layout"

"Missing layout"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="19" name="apperr.MissingPlugin"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.MissingPlugin
// Purpose:		Returns the error code for the named error
// Version:		20-01-06 - Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.MissingPlugin = "Plugin is missing"

"Plugin is missing"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="20" name="apperr.MissingRecord"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.MissingRecord
// Purpose:		Returns the error code for the named error
// Version:		20-01-06 -  Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.MissingRecord = "Missing record"

"Missing record"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="21" name="apperr.NoUserRecord"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.NoUserRecord
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.NoUserRecord = "Configuration error"

"No user record found for account " & Quote ( Get ( AccountName ) ) & ". " & msg.ContactAdmin]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="22" name="apperr.SlackChannelNotFound"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.SlackChannelNotFound
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.SlackChannelNotFound = "channel_not_found"

"channel_not_found"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="23" name="apperr.SlackInvalidChannel"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.SlackInvalidChannel
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.SlackInvalidChannel = "invalid_channel"

"invalid_channel"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="24" name="apperr.TestingConfigError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.TestingConfigError
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.TestingConfigError = "Testing configuration error"

"Testing configuration error"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="25" name="apperr.UnsupportedPlatform"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.UnsupportedPlatform
// Purpose:		Returns the error code for the named error
// Version:		20-01-06 - Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.UnsupportedPlatform = "Unsupported platform"

"Unsupported platform"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="26" name="const_____ Sort Constants __________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions to return constant values for FileMaker function constants]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="27" name="const.DateAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.DateAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.DateAsc = 3

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="28" name="const.DateDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.DateDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.DateDesc = -3

-3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="29" name="const.NumberAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.NumberAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.NumberAsc = 2

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="30" name="const.NumberDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.NumberDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.NumberDesc = -2

-2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="31" name="const.TextAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TextAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TextAsc = 1

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="32" name="const.TextDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TextDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TextDesc = -1

-1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="33" name="const.TimeAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimeAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimeAsc = 4

4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="34" name="const.TimeDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimeDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimeDesc = -4

-4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="35" name="const.TimestampAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimestampAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimestampAsc = 5

5]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="36" name="const.TimestampDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimestampDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimestampDesc = -5

-5]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="37" name="container_____ Container Fields Functions __________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that return structured data for reference purposes.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="38" name="container.Decode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Decode ( _base64 )
// Purpose:		Given a string generated by container.Encode, returns the original container data
// Parameters:		_base64:	The Base64 encoded container data returned by container.Encode
// Version:		1.0 - Charles Ross - 17-08-02
// Example:		container.Decode ( container.Encode ( FUNITCF::container ) ) = FUNITCF::container

Let (
  [
    _decoded = Base64Decode ( _base64 ) ;

    _contents = JSONGetElement ( _decoded ; "base64" ) ;
    _filename = JSONGetElement ( _decoded ; "filename" ) ;

    _file = Base64Decode ( _contents ; _filename )
  ] ;

  _file
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="39" name="container.Encode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Encode ( _container )
// Purpose:		Returns a Base64-encoded version of the container and filename.
// Parameters:		_container:	The container data to encode
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-08-02
// Notes:			Notes
// Todo:			To dos
// Example:		// When `FUNITCF::container` contains file.txt with contents of "text":
//                             container.Encode ( FUNITCF::container ) = "eyJiYXNlNjQiOiJkR1Y0ZEFvPSIsImZpbGVuYW1lIjoiZmlsZS50eHQifQ=="

Let (
  [
    _json = json.ContainerObject ( _container )
  ] ;

  Case (
    dev.IsSet ( _container )	; Base64EncodeRFC ( 46488 ; _json )
					; dev.Nil
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="40" name="container.Filename"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Filename ( _container )
// Purpose:		Return the name of the file stored in the container.
// Parameters:		_container:	The container to return the name of
// Version:		1.0 - Charles Ross - 17-08-11
// Example:		container.Filename ( file_field ) = "file.txt" // When `file.txt` was inserted into the container field.

GetContainerAttribute ( _container ; "FileName" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="41" name="container.Interactivate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Interactivate ( _container )
// Purpose:		Converts a non-interactive inserted file into one that can be interacted with.
// Parameters:		_container:	The actual container field with the non-interactive file.
// Requirements:	container.Rename
// Version:		1.0 - Stephen Baker - 15-04-21
// Notes:			http://www.teamdf.com/weetbicks/252/change-containers-from-files-to-interactive-content-in-an-instant
// Example:		container.Interactivate ( Table::container ) // When inserted into a container field, the file can be interacted with

Let (
  [
    _filename = GetContainerAttribute ( _container ; "FileName" )
  ] ;

  container.Rename ( _container ; _filename )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="42" name="container.Rename"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Rename ( _container )
// Purpose:		Renames a container field's file's name.
// Parameters:		_container:	The actual container field with the non-interactive file.
//				_filename:		The new name.
// Version:		1.0 - Jan Stieperaere - 14-02-12
// Notes:			http://clickworks.be/en/rename-container-files
// Example:		container.Rename ( Table::container ; "new filename" ) // Container's file should now have the new filename.

Base64Decode ( Base64Encode ( _container ) ; _filename )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="43" name="crypt_____ Crypt Functions _________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that return structured data for reference purposes.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="44" name="crypt.HexDigest"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// crypt.HexDigest ( _token )
// Purpose:		Return the hex encoded digest for the token
// Parameters:		_token:	The token to return the hex encoded digest for
// Version:		1.0 - Charles Ross - 19-08-19
// Example:		sample = result

HexEncode ( CryptDigest ( _token ; "sha256" ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="45" name="data_____ Data Structures __________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that return structured data for reference purposes.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="46" name="data.Alphabet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Alphabet
// Purpose:		Returns the alphabet in lower case.
// Version:		1.0 written 15-05-22 written by Charles Ross
// Example:		data.Alphabet = "abcdefghijklmnopqrstuvwxyz"

"abcdefghijklmnopqrstuvwxyz"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="47" name="data.Colors"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Colors
// Purpose:		Return a dictionary of name/value paris of colors with their RGB values.
// Requirements:	let.Set
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			At this point, only used by the text.Color funciton.

let.Set ( "blue"	; RGB ( 102	; 51		; 204		) ) &
let.Set ( "red"	; RGB ( 255	; 0		; 0		) ) &
let.Set ( "gray"	; RGB ( 150	; 150		; 150		) ) &
let.Set ( "grey"	; RGB ( 150	; 150		; 150		) ) &
let.Set ( "black"	; RGB ( 0		; 0		; 0		) ) &
let.Set ( "white"	; RGB ( 255	; 255		; 255		) ) &
let.Set ( "gold"	; RGB ( 255	; 0		; 153		) ) &
let.Set ( "green"	; RGB ( 0		; 16		; 139		) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="48" name="data.Digits"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Digits
// Purpose:		A convenience function for filtering digits in strings.
// Version:		1.0 written 15-03-11 written by Charles Ross
// Example:		data.Digits = "0123456789"

"0123456789"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="49" name="data.Easters"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Easters
// Purpose:		A let-notation structure of Easter dates from 2000 to 2100
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-08
// Example:		sample = result

let.Set ( 2000 ; Date ( 4 ; 23 ; 2000 ) ) &
let.Set ( 2025 ; Date ( 4 ; 20 ; 2025 ) ) &
let.Set ( 2050 ; Date ( 4 ; 10 ; 2050 ) ) &
let.Set ( 2075 ; Date ( 4 ; 7 ; 2075 ) ) &
let.Set ( 2001 ; Date ( 4 ; 15 ; 2001 ) ) &
let.Set ( 2026 ; Date ( 4 ; 5 ; 2026 ) ) &
let.Set ( 2051 ; Date ( 4 ; 2 ; 2051 ) ) &
let.Set ( 2076 ; Date ( 4 ; 19 ; 2076 ) ) &
let.Set ( 2002 ; Date ( 3 ; 31 ; 2002 ) ) &
let.Set ( 2027 ; Date ( 3 ; 28 ; 2027 ) ) &
let.Set ( 2052 ; Date ( 4 ; 21 ; 2052 ) ) &
let.Set ( 2077 ; Date ( 4 ; 11 ; 2077 ) ) &
let.Set ( 2003 ; Date ( 4 ; 20 ; 2003 ) ) &
let.Set ( 2028 ; Date ( 4 ; 16 ; 2028 ) ) &
let.Set ( 2053 ; Date ( 4 ; 6 ; 2053 ) ) &
let.Set ( 2078 ; Date ( 4 ; 3 ; 2078 ) ) &
let.Set ( 2004 ; Date ( 4 ; 11 ; 2004 ) ) &
let.Set ( 2029 ; Date ( 4 ; 1 ; 2029 ) ) &
let.Set ( 2054 ; Date ( 3 ; 29 ; 2054 ) ) &
let.Set ( 2079 ; Date ( 4 ; 23 ; 2079 ) ) &
let.Set ( 2005 ; Date ( 3 ; 27 ; 2005 ) ) &
let.Set ( 2030 ; Date ( 4 ; 21 ; 2030 ) ) &
let.Set ( 2055 ; Date ( 4 ; 18 ; 2055 ) ) &
let.Set ( 2080 ; Date ( 4 ; 7 ; 2080 ) ) &
let.Set ( 2006 ; Date ( 4 ; 16 ; 2006 ) ) &
let.Set ( 2031 ; Date ( 4 ; 13 ; 2031 ) ) &
let.Set ( 2056 ; Date ( 4 ; 2 ; 2056 ) ) &
let.Set ( 2081 ; Date ( 3 ; 30 ; 2081 ) ) &
let.Set ( 2007 ; Date ( 4 ; 8 ; 2007 ) ) &
let.Set ( 2032 ; Date ( 3 ; 28 ; 2032 ) ) &
let.Set ( 2057 ; Date ( 4 ; 22 ; 2057 ) ) &
let.Set ( 2082 ; Date ( 4 ; 19 ; 2082 ) ) &
let.Set ( 2008 ; Date ( 3 ; 23 ; 2008 ) ) &
let.Set ( 2033 ; Date ( 4 ; 17 ; 2033 ) ) &
let.Set ( 2058 ; Date ( 4 ; 14 ; 2058 ) ) &
let.Set ( 2083 ; Date ( 4 ; 4 ; 2083 ) ) &
let.Set ( 2009 ; Date ( 4 ; 12 ; 2009 ) ) &
let.Set ( 2034 ; Date ( 4 ; 9 ; 2034 ) ) &
let.Set ( 2059 ; Date ( 3 ; 30 ; 2059 ) ) &
let.Set ( 2084 ; Date ( 3 ; 26 ; 2084 ) ) &
let.Set ( 2010 ; Date ( 4 ; 4 ; 2010 ) ) &
let.Set ( 2035 ; Date ( 3 ; 25 ; 2035 ) ) &
let.Set ( 2060 ; Date ( 4 ; 18 ; 2060 ) ) &
let.Set ( 2085 ; Date ( 4 ; 15 ; 2085 ) ) &
let.Set ( 2011 ; Date ( 4 ; 24 ; 2011 ) ) &
let.Set ( 2036 ; Date ( 4 ; 13 ; 2036 ) ) &
let.Set ( 2061 ; Date ( 4 ; 10 ; 2061 ) ) &
let.Set ( 2086 ; Date ( 3 ; 31 ; 2086 ) ) &
let.Set ( 2012 ; Date ( 4 ; 8 ; 2012 ) ) &
let.Set ( 2037 ; Date ( 4 ; 5 ; 2037 ) ) &
let.Set ( 2062 ; Date ( 3 ; 26 ; 2062 ) ) &
let.Set ( 2087 ; Date ( 4 ; 20 ; 2087 ) ) &
let.Set ( 2013 ; Date ( 3 ; 31 ; 2013 ) ) &
let.Set ( 2038 ; Date ( 4 ; 25 ; 2038 ) ) &
let.Set ( 2063 ; Date ( 4 ; 15 ; 2063 ) ) &
let.Set ( 2088 ; Date ( 4 ; 11 ; 2088 ) ) &
let.Set ( 2014 ; Date ( 4 ; 20 ; 2014 ) ) &
let.Set ( 2039 ; Date ( 4 ; 10 ; 2039 ) ) &
let.Set ( 2064 ; Date ( 4 ; 6 ; 2064 ) ) &
let.Set ( 2089 ; Date ( 4 ; 3 ; 2089 ) ) &
let.Set ( 2015 ; Date ( 4 ; 5 ; 2015 ) ) &
let.Set ( 2040 ; Date ( 4 ; 1 ; 2040 ) ) &
let.Set ( 2065 ; Date ( 3 ; 29 ; 2065 ) ) &
let.Set ( 2090 ; Date ( 4 ; 16 ; 2090 ) ) &
let.Set ( 2016 ; Date ( 3 ; 27 ; 2016 ) ) &
let.Set ( 2041 ; Date ( 4 ; 21 ; 2041 ) ) &
let.Set ( 2066 ; Date ( 4 ; 11 ; 2066 ) ) &
let.Set ( 2091 ; Date ( 4 ; 8 ; 2091 ) ) &
let.Set ( 2017 ; Date ( 4 ; 16 ; 2017 ) ) &
let.Set ( 2042 ; Date ( 4 ; 6 ; 2042 ) ) &
let.Set ( 2067 ; Date ( 4 ; 3 ; 2067 ) ) &
let.Set ( 2092 ; Date ( 3 ; 30 ; 2092 ) ) &
let.Set ( 2018 ; Date ( 4 ; 1 ; 2018 ) ) &
let.Set ( 2043 ; Date ( 3 ; 29 ; 2043 ) ) &
let.Set ( 2068 ; Date ( 4 ; 22 ; 2068 ) ) &
let.Set ( 2093 ; Date ( 4 ; 12 ; 2093 ) ) &
let.Set ( 2019 ; Date ( 4 ; 21 ; 2019 ) ) &
let.Set ( 2044 ; Date ( 4 ; 17 ; 2044 ) ) &
let.Set ( 2069 ; Date ( 4 ; 14 ; 2069 ) ) &
let.Set ( 2094 ; Date ( 4 ; 4 ; 2094 ) ) &
let.Set ( 2020 ; Date ( 4 ; 12 ; 2020 ) ) &
let.Set ( 2045 ; Date ( 4 ; 9 ; 2045 ) ) &
let.Set ( 2070 ; Date ( 3 ; 30 ; 2070 ) ) &
let.Set ( 2095 ; Date ( 4 ; 24 ; 2095 ) ) &
let.Set ( 2021 ; Date ( 4 ; 4 ; 2021 ) ) &
let.Set ( 2046 ; Date ( 3 ; 25 ; 2046 ) ) &
let.Set ( 2071 ; Date ( 4 ; 19 ; 2071 ) ) &
let.Set ( 2096 ; Date ( 4 ; 15 ; 2096 ) ) &
let.Set ( 2022 ; Date ( 4 ; 17 ; 2022 ) ) &
let.Set ( 2047 ; Date ( 4 ; 14 ; 2047 ) ) &
let.Set ( 2072 ; Date ( 4 ; 10 ; 2072 ) ) &
let.Set ( 2097 ; Date ( 3 ; 31 ; 2097 ) ) &
let.Set ( 2023 ; Date ( 4 ; 9 ; 2023 ) ) &
let.Set ( 2048 ; Date ( 4 ; 5 ; 2048 ) ) &
let.Set ( 2073 ; Date ( 3 ; 26 ; 2073 ) ) &
let.Set ( 2098 ; Date ( 4 ; 20 ; 2098 ) ) &
let.Set ( 2024 ; Date ( 3 ; 31 ; 2024 ) ) &
let.Set ( 2049 ; Date ( 4 ; 18 ; 2049 ) ) &
let.Set ( 2074 ; Date ( 4 ; 15 ; 2074 ) ) &
let.Set ( 2099 ; Date ( 4 ; 12 ; 2099 ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="50" name="data.Ordinals"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Ordinals
// Purpose:		Return the firsst five ordinal words.
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

List ( "first" ; "second" ; "third" ; "fourth" ; "fifth" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="51" name="data.Weekdays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Weekdays
// Purpose:		Return a list of the weekday names
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

List (
  "Sunday" ;
  "Monday" ;
  "Tuesday" ;
  "Wednessday" ;
  "Thursday" ;
  "Friday" ;
  "Saturday"
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="52" name="date_____ Date Functions ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions dealing only with date manipulation.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="53" name="date.AdjustDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.AdjustDate ( _dict ; _name )
// Purpose:		Adjust the named date in the dictionary to move it off of the weekend
// Parameters:		_dict:	A let-notation of holidays
//				_name:	The name of the holiday to adjust
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-01
// Example:		( DayOfWeek ( let.get ( date.AdjustDate ( let.Set ( "Sunday" ; GetAsDate ( "9/15/2019" ) ) ; "Sunday" ) ; "Sunday" ) ) = 2 )
//				  and
//				( DayOfWeek ( let.Get ( date.AdjustDate ( let.Set ( "Saturday" ; GetAsDate ( "9/14/2019" ) ) ; "Saturday" ) ; "Saturday" ) ) = 6 )

let.Replace ( _dict ; _name ; date.MoveOffWeekend ( let.Get ( _dict ; _name ) ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="54" name="date.BusinessHolidays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.BusinessHolidays ( _year )
// Purpose:		Returns a list of the dates of observed holidays in the passed year.
// Version:		1.0 Jeremy Bante 11-10-01
// Notes:			This version of this function includes observed U.S. federal holidays. It should be
//				modified to include any holidays observed by the users of each particular system.
// Example:		( let.Get ( date.BusinessHolidays ( 2010 ) ; "Christmas" ) = "12/24/2010" )
//				  and
//				( let.get ( date.BusinessHolidays ( 2019 ) ; "Labor Day" ) = "9/2/2019" )
//				  and
//				( let.get ( date.BusinessHolidays ( 2019 ) ; "Independence Day" ) = "7/4/2019" )

Let (
  [
    _holidays = date.Holidays ( _year ) ;

    _new_years = let.Get ( _holidays ; "New Years Day" ) ;
    _result = Case (
      DayOfWeek ( _new_years ) = 1 ;
      let.Replace ( _holidays ; "New Years Day" ; _new_years + 1 ) ;
      DayOfWeek ( _new_years ) = 7 ;
      let.Remove ( _holidays  ; "New Years Day " ) ;
      _holidays
    ) ;

    _result = date.AdjustDate ( _result ; "Independence Day" ) ;
    _result = date.AdjustDate ( _result ; "Veterans Day" ) ;
    _result = date.AdjustDate ( _result ; "Christmas" ) ;

    _next_new_years = Date ( 1 ; 1 ; _year + 1 ) ;
    _result = Case (
      DayOfWeek ( _next_new_years ) = 7 ;
      _result & let.Set ( "Next New Years Day" ; _next_new_years - 1 ) ;
      _result
    ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="55" name="date.ConvertUnixDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.ConvertUnixDate ( _unix_date )
// Purpose:		Given a date in standard Unix format (YYYY-MM-DD), return a FileMaker date.
// Parameters:		_unix_date:	A date in standard Unix format.
// Requirements: 	list.CreateList
// Version:		1.0 written 15-08-24 by Charles Ross
// Example:		date.ConvertUnixDate ( "2015-08-24" ) = Date ( 8 ; 24 ; 2015 )

Let (
  [
    _date_list	= list.CreateList ( _unix_date ; "-" ) ;
    _year		= GetValue ( _date_list ; 1 ) ;
    _month		= GetValue ( _date_list ; 2 ) ;
    _day		= GetValue ( _date_list ; 3 ) ;
    _date		= Date ( _month ; _day ; _year ) ;

    _result = Case (
      IsEmpty ( _unix_date ) or ( _date = "?" ) ;	dev.Nil ;
									_date
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="56" name="date.DiffDays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffDays ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in days, excluding years and months
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Notes:			Numbers are returned with the appropriate sign when _date_2 < _date_1
// Example:		date.DiffDays ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = -21

Let(
  [
    _sign = Sign ( _date_2 - _date_1 );

    _d_1 = Min ( _date_1 ; _date_2 ) ;
    _d_2 = Max ( _date_1 ; _date_2 ) ;

    _days = Mod (
      Day ( _d_2 ) - Day ( _d_1 );
      Day ( Date ( Month ( _d_1 ) + 1; 0; Year ( _d_1 ) ) )
    )
  ];

  _days * _sign
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="57" name="date.DiffMonths"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffMonths ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in integer months, excluding years
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Notes:			Numbers are returned with the appropriate sign when _date_2 < _date_1
// Example:		date.DiffMonths ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = -6

Let(
  [
    _sign = Sign ( _date_2 - _date_1 );

    _d_1 = Min ( _date_1 ; _date_2 ) ;
    _d_2 = Max ( _date_1 ; _date_2 ) ;

    _months = Mod (
      Month ( _d_2 ) - Month ( _d_1 ) - ( Day ( _d_2 ) < Day ( _d_1 ) );
      12
    )
  ];

  _months * _sign
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="58" name="date.DiffString"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffString ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in english.
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Example:		date.Difference ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = "8 years, 6 months, and 21 days"

Let (
  [
    _years		= Abs ( date.DiffYears ( _date_1 ; _date_2 ) ) ;
    _months	= Abs ( date.DiffMonths ( _date_1 ; _date_2 ) ) ;
    _days		= Abs ( date.DiffDays ( _date_1 ; _date_2 ) ) ;

    _years_label = Case (
      _years = 1	; " year, "
			; " years, "
    ) ;

    _months_label = Case (
      _months = 1	; " month"
				; " months, and "
    ) ;

    _days_label = Case (
      _days = 1	; " day"
			; " days"
    ) ;

    _result =	_years & _years_label &
			_months & _months_label &
			_days & _days_label
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="59" name="date.DiffYears"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffYears ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in integer years
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Notes:			Numbers are returned with the appropriate sign when _date_2 < _date_1
// Example:		date.DiffYears ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = -8

Let(
  [
    _sign = Sign ( _date_2 - _date_1 );

    _d_1 = Min ( _date_1 ; _date_2 ) ;
    _d_2 = Max ( _date_1 ; _date_2 ) ;

    _years = Year ( _d_2 ) - Year ( _d_1 )
      - ( ( Month ( _d_2 ) - ( Day ( _d_2 ) < Day ( _d_1 ) ) ) < Month ( _d_1 ) )
  ];

  _years * _sign
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="60" name="date.EndOfMonth"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.EndOfMonth ( _date )
// Purpose:		Return the last day of the month containing _date
// Parameters:		_date:	A generic date.
// Version:		1.1 written 15-03-08 by Charles Ross
// Example:		date.EndOfMonth ( Date ( 2; 1; 2015 ) ) = Date ( 2; 28; 2015 )

Let(
  [
    _month		= Month ( _date );
    _year		= Year ( _date )
  ];

  Date ( _month + 1; 1; _year ) - 1
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="61" name="date.FirstDayOfWeek"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.FirstDayOfWeek ( _date; _week_start )
// Purpose:		Return the date of the week's start that contains the given date and starts on the
//				given week start (Sun=0, Mon=1, …)
// Parameters:		_date:			The date for which to find the beginning of the week.
//				_week_start:		The weekday to use as the first day of the week.
// Version:		1.0 written 15-04-14 by Matt Wills, Virtual Vermont
// Example:		( date.FirstDayOfWeek ( Date ( 3; 17; 2015 ) ; 2 ) = Date ( 3; 16; 2015 ) )
//				  and
//				( date.FirstDayOfWeek ( Date ( 3; 17; 2015 ) ; 4 ) = Date ( 3; 11; 2015 ) )

Let (
  [
    _prelim = _date - DayOfWeek ( _date ) + _week_start ;
    _result = Case (
      _prelim > _date ;
      _prelim - 7 ;
      _prelim
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="62" name="date.Holidays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.Holidays ( _year )
// Purpose:		Returns a let-notation structure of the year's holiday list names and dates.
// Parameters:		_year: The year to return the holidsy of
// Version:		1.0.0 - Charles Ross - 17-12-09
//				2.0.0 - Charles Ross - 19-08-31 - Update to uses date.OrdinalWeekdayOfMonth
// Notes:			This version of this function includes observed U.S. federal holidays. It should be
//				modified to include any holidays observed by the users of each particular system.
// Example:		( date.FirstDayOfWeek ( Date ( 3; 17; 2015 ) ; 2 ) = Date ( 3; 16; 2015 ) )
//				  and
//				( date.FirstDayOfWeek ( Date ( 3; 17; 2015 ) ; 4 ) = Date ( 3; 11; 2015 ) )

let.Set ( "New Years Day"			; Date ( 1 ; 1 ; _year ) ) &
let.Set ( "Martin Luther King Jr. Day"	; date.OrdinalWeekdayOfMonth ( "third" ; "Monday" ; "January" ; _year ) ) &
let.Set ( "Washington's Birthday"	; date.OrdinalWeekdayOfMonth ( "third" ; "Monday" ; "February" ; _year ) ) &
let.Set ( "Easter"				; let.Get ( data.Easters ; _year ) ) &
let.Set ( "Memorial Day"			; date.OrdinalWeekdayOfMonth ( "last" ; "Monday" ; "May" ; _year ) ) &
let.Set ( "Independence Day"		; Date ( 7 ; 4 ; _year ) ) &
let.Set ( "Labor Day"				; date.OrdinalWeekdayOfMonth ( "first" ; "Monday" ; "September" ; _year ) ) &
let.Set ( "Columbus Day"			; date.OrdinalWeekdayOfMonth ( "second" ; "Monday" ; "October" ; _year ) ) &
let.Set ( "Veterans Day"			; Date ( 11 ; 11 ; _year ) ) &
let.Set ( "Thanksgiving"			; date.OrdinalWeekdayOfMonth ( "fourth" ; "Thursday" ; "November" ; _year ) ) &
let.Set ( "Christmas"				; Date ( 12 ; 25 ; _year ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="63" name="date.MonDDYYYY"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.MonDDYYYY ( _date )
// Purpose:		Return date string in the form of Mon DD, YYYY
// Parameters:		_date:	The date to format
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 18-06-27
// Example:		date.MonDDYYYY ( Date ( 6 ; 27 ; 2018 ) ) = "Jun 27, 2018"

timestamp.Format ( Timestamp ( _date ; 0 ) ; "%b%e, %Y" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="64" name="date.MonthNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.MonthNumber ( _month_name )
// Purpose:		Return the month number given a month name.
// Parameters:		_month_name:	The name of the month to get the number of
// Version:		1.0 - David Head - 10-05-15
// Example:		( date.MonthNumber ( "January" ) = 1 )
//				  and
//				( date.MonthNumber ( "June" ) = 6 )

Position ( 
  "xxJanFebMarAprMayJunJulAugSepOctNovDec" ; 
  Left ( _month_name ; 3 ) ; 
  1 ; 
  1 
) / 3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="65" name="date.MoveOffWeekend"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.MoveOffWeekend
// Purpose:		Return the day before or day after the date if it's a weekend date
// Parameters:		_date_:	The date to inspect
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-01
// Example:		( date.MoveOffWeekend ( Date ( 9 ; 14 ; 2019 ) ) = Date ( 9 ; 13 ; 2019 ) )
//				  and
//				( date.MoveOffWeekend ( Date ( 9 ; 15 ; 2019 ) ) = Date ( 9 ; 16 ; 2019 ) )

Let (
  [
    _day = DayOfWeek ( _date ) ;

    _result = Case (
      _day = 1	; _date + 1 ;
      _day = 7	; _date - 1
			; _date
    ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="66" name="date.OrdinalWeekdayOfMonth"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.OrdinalWeekdayOfMonth ( _ordinal ; _day ; _month ; _yeaar )
// Purpose:		Return the described day for the given month and year
// Parameters:		_ordinal:	An ordinal description of "first" through "fifth", or "lasst
//				_day:		A weekday name
//				_month:	A month name
//				_year:	A year
// Requirements: 	date.WeekdayNumber
//				date.MonthNumber
//				list.ValuePosition
//				date.EndOfMonth
//				list.Rotate
//				list.Reversse
//				list.Range
// Version:		1.0 - Charles Ross - 19-08-31
// Notes:			Based on algorithm by Jereme Bante
// Example:		( date.OrdinalWeekdayOfMonth ( "first" ; "Monday" ; "October" ; 2019 ) = "10/7/2019" )
//				  and
//				( date.OrdinalWeekdayOfMonth ( "fifth" ; "Wednesday" ; "October" ; 2019 ) = "10/30/2019" )
//				  and
//				( date.OrdinalWeekdayOfMonth ( "last" ; "Sunday" ; "October" ; 2019 ) = "10/27/2019" )
//				  and
//				( date.OrdinalWeekdayOfMonth ( "fifth" ; "Saturday" ; "October" ; 2019 ) = dev.Nil )

Let (
  [
    _day = date.WeekdayNumber ( _day ) ;
    _month = date.MonthNumber ( _month ) ;
    _pos = list.ValuePosition (
      _ordinal ;
      List ( "first" ; "second" ; "third" ; "fourth" ; "fifth" ; "last" ) ;
      1
    ) ;

    _earliest =
      Case (
        _pos = 6	; date.EndOfMonth ( Date ( _month ; _day ; _year ) ) - 6
			; Date ( _month ; ( ( _pos - 1 ) * 7 ) + 1 ; _year )
     ) ;

    _weekdays = list.Rotate ( list.Reverse ( list.Range ( 0 ; 6 ) ) ; _day ) ;

    _adjustment = GetValue ( _weekdays ; DayOfWeek ( _earliest ) ) ;

    _prelim = _earliest + _adjustment ;

    _result = Case (
      Month ( _prelim ) = _month	; _prelim
							; dev.Nil
    ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="67" name="date.PeriodicDays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.PeriodicDays ( _start ; _frequency ; _after )
// Purpose:		Return the next date after a give date that is the a multiple of frequency days away from the start date
// Parameters:		_start:		The date at which the periodic dates start
//				_frequency:	The frequency of the period, 1 would be every day, 7 would be once a week
//				_after:		The result must be after this date
// Version:		1.0 - Charles Ross - 19-08-29
// Example:		date.PeriodicDays ( Date ( 10 ; 1 ; 2019 ) ; 3 ; Date ( 11 ; 1 ; 2019 ) ) = "11/3/2019"

Let (
  [
    _diff = _after - _start ;
    _mod = Mod ( _diff ; _frequency ) ;

    _result = _after - _mod + _frequency
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="68" name="date.Seconds"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.Seconds ( _amount; _unit )
// Purpose:		Return a numerical amount of seconds based on the supplied amount in the
//				units specified
// Parameters:		_amount:		The amount of time in the specified units.
//              		_units:		The units of measurement, one of "minutes", "hours", "days",
//							"months", or "years".
// Version:		1.0 written 11-09-15 by Matt Petrowsky
// Notes:			Because of variations in months and years, these return values are approximate.
//				If you need exact differences between date values you'll need to use FileMaker's
//				date functions.
// Example:		date.Seconds ( 5 ; "days" ) = 432000

Let (
  [
    _seconds = Choose (
      Int ( Position ( "minutes.hours...days....months..years..."; _unit; 1; 1 ) / 8 );

      60; 
      60 * 60;
      60 * 60 * 24;
      31556926 / 12;
      31556926
    )
  ];

  _seconds * _amount
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="69" name="date.StartOfMonth"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.StartOfMonth ( _date )
// Purpose:		Returns the date of the first day of the month in which _date falls in.
// Parameters:		_date:	The date to get the first of the month for
// Version:		1.0 - Charles Ross - 17-06-24
// Example:		Let (
//				  [
//				    _date = get ( CurrentDate ) ;
//				    _first = date.StartOfMonth ( _date ) ;
//				    _ = ""
//				  ] ;
//
//				  ( Month ( _first ) = Month ( _date ) )
//				    and
//				  ( Year ( _first ) = Year ( _date ) )
//				    and
//				  ( Day ( _first ) = 1 )
//				)

Date ( Month ( _date ) ; 1 ; Year ( _date ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="70" name="date.TextualDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.FullMonthName
// Purpose:		Format a date in full text form (i.e., "January 1, 2017")
// Parameters:		_date:	The date to format
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		date.FullMonthName ( Date ( 1 ; 1 ; 2017 ) ) = "January 1, 2017"

timestamp.Format ( _date ; "%B%e, %Y" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="71" name="date.WeekdayCount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.WeekdayCount ( _start ; _end ; _ignore )
// Purpose:		Return the number of weekdays between start and end inclusive, excluding dates in ignore
// Parameters:		_start:	The start of the range to consider
//				_end:	The end of the range to consider
//				_ignore:	A list of dates to ignore
// Requirements: 	range.Weekdays
// Version:		1.0 written 17-03-08 by Charles Ross
// Notes:			Based on algorithm from jej@igeek.co.uk, 12-09-25
// Example:		( date.WeekdayCount ( "10/1/2019" ; "10/30/2019" ; dev.nil ) = 30 )
//				  and
//				( date.WeekdayCount ( "10/1/2019" ; "10/30/2019" ; List ( "10/2/2019" ; "10/4/2019" ) ) = 28 )

ValueCount ( range.Weekdays ( _start ; _end ; _ignore ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="72" name="date.WeekdayNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.WeekdayNumber ( _name )
// Purpose:		Return the weekday number given a day name.
// Parameters:		_name:	The name of the weekday to get the number of
// Version:		1.0 - Charles Ross - 19-08-27
// Example:		( date.WeekdayNumber ( "Monday" ) = 2 )
//				  and
//				( date.WeekdayNumber ( "Saturday" ) = 7 )
// Notes:			Base on David Head's date.MonthNumber algorithm

Position ( 
  "xxSunMonTueWedThuFriSat" ; 
  Left ( _name ; 3 ) ; 
  1 ; 
  1 
) / 3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="73" name="date.YYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.YYMMDD ( _date )
// Purpose:		Converts a date value into the YYMMDD format.
// Parameters:		_date:	The date to format.
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 19-08-02
// Example:		date.YYMMDD ( "10/1/2019" ) = "191001"

timestamp.Format ( GetAsTimestamp ( _date ) ; "%y%m%d" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="74" name="date.YYYYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.YYYYMMDD ( _date _
// Purpose:		Converts a date value into the YYYYMMDD format.
// Parameters:		_date:	The date to format.
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		date.YYYYMMDD ( "10/1/2019" ) = "20191001"

timestamp.Format ( GetAsTimestamp ( _date ) ; "%Y%m%d" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="75" name="dev_____ Developer _________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that generally are only useful to the developer, making his or her life a bit easier, hopefully.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="76" name="dev.ClearVars"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.ClearVars ( _vars )
// Purpose:		Takes a list of variables and sets all of them to an empty string.
// Parameters:		_vars:	The list of variables to clear. Should include single or double dollar signs.
// Requirements: 	list.First
//				list.Rest
//				dev.SetVarByName
//				devp.Nil
// Version:		1.0 written 17-02-23 by Charles Ross
// Todo:			Perhaps allow calls to exclude dollar sign and assume when there is none that a
//				local variable is meant.
// Example:		Let (
//				  [
//				    $_v1 = 1 ;
//				    $_v2 = 2 ;
//				    $_v3 = 3 ;
//
//				    _ = dev.ClearVars ( List ( "$_v1" ; "$_v3" ) )
//				  ] ;
//
//				  IsEmpty ( $_v1 ) and IsEmpty ( $_v3 ) and ( $_v2 = 2 )
//				)

Case (
  ValueCount ( _vars ) = 0 ; dev.Nil ;

  Let (
    [
      _var	= list.First ( _vars ) ;
      _vars	= list.Rest ( _vars ) ;

      _ = dev.SetVarByName ( _var ; dev.Nil )
    ] ;

    dev.ClearVars ( _vars )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="77" name="dev.ComparisonVersion"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.ComparisonVersion ( _version )
// Purpose:		Translate a version number into one that can be compared numerically.
// Parameters:		_version: The version to translate
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-11
// Notes:			Notes
// Todo:			To dos
// Example:		dev.ComparisonVersion ( "1.2.3" ) = 10203

Let (
  [
    _list = list.CreateList ( _version ; "." ) ;

    _compare = ( GetValue ( _list ; 1 ) * 10000 )
      + ( GetValue ( _list ; 2 ) * 100 )
      + GetValue ( _list ; 3 )
  ] ;

  _compare
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="78" name="dev.DataTypeMustBeText"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.DataTypeMustBeText ( _value )
// Purpose:		Returns true if the data type cannot be other than text.
// Parameters:		_value:	The value to test
// Requirements:	devp.Nil
// Version:		1.0 written 17-02-24 by Charles Ross
// Notes:			Primarily used for the letn.Set function.
// Todo:			Figure out if this function should be a utility function for the letn group.
// Example:		dev.DataTypeMustBeText ( "not a value" ) = True

( _value = dev.Nil )
  or ( _value = "?" )
  or ( GetAsNumber ( _value ) = "?" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="79" name="dev.Default"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Default
// Purpose:		If the value is set, return it, else return a default value.
// Parameters:		_value:	The value to test against and return if set.
//				_default:	What to return if value is empty.
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		dev.Default ( dev.Nil ; "default" ) = "default"
//				  and dev.Default ( "value" ; "default" ) = "value"

Case (
  dev.IsSet ( _value )	; _value
				; _default
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="80" name="dev.FieldComment"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.FieldComment ( _field )
// Purpose:		Returns the comment of the field, assuming it's in the current file.
// Parameters:		_field:	The field to return the comment of.
// Version:		1.0 - Charles Ross - 18-10-27
// Notes:			Just a wrapper for `FieldComment` that removes the need for the first parameter.
// Example:		dev.FieldComment ( FUNITCF::test ) = "field comment" // Assuming that's the comment for the given field

FieldComment ( Get ( FileName ) ; GetFieldName ( _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="81" name="dev.FoundSetFieldValues"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.FoundSetFieldValues ( _field )
// Purpose:		Return a list of all the values for the given field in the found set
// Parameters:		_field:	The fully-qualified name of the field to return the values of
// Version:		1.0 - Charles Ross - 19-09-17
// Example:		sample = result

Let (
  [
    _calc = "GetNthRecord ( " & _field & " ; %n )" ;
    _result = list.CustomList ( 1 ; Get ( FoundCount ) ; _calc ) ;
    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="82" name="dev.GetFieldName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.GetFieldName ( _field )
// Purpose:		Returns only the field name, i.e., without the table occurrence name
// Parameters:		_field: The field to return the name of.
// Requirements:	dev.ParseQualifiedField
// Version:		1.0.0 - Kevin Frank - 11-04-18
//				1.0.1 - Charles Ross - 17-11-27 - Broke out logic common to `dev.Get*Name`
// Notes:			GetFieldName() returns the relationship plus the field name.
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				dev.GetFieldName ( FUNITCF::test ) = "test"

dev.ParseQualifiedField ( GetFieldName ( _field ) ; "field" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="83" name="dev.GetTableName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.GetTableName ( _field )
// Purpose:		Returns only the table name, i.e., without the field name
// Parameters:		_field: The field to return the table name for
// Requirements:	dev.ParseQualifiedField
// Version:		1.0.0 - Kevin Frank - 11-04-18
//				1.0.1 - Charles Ross - 17-11-27 - Broke out logic common to `dev.Get*Name`
// Notes:			GetFieldName() returns the relationship plus the field name.
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				dev.GetTableName ( FUNITCF::test ) = "FUNITCF"

dev.ParseQualifiedField ( GetFieldName ( _field ) ; "table" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="84" name="dev.Housekeeping"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Housekeeping
// Purpose:		Returns a textual description of the current record's stats
// Requirements: 	date.TextualDate
//				timestamp.ClockTime
// Version:		1.0 - Charles Ross - 17-09-10
// Notes:			Housekeeping fields are hard coded and so must conform to the convention.
// Example:		sample = result

Let (
  [
    _id = "Record ID: " & TextStyleAdd ( Evaluate ( "id" ) ; Bold ) ;

    _date = date.TextualDate ( Evaluate ( "created_date" ) ) ;
    _time = timestamp.ClockTime ( Evaluate ( "created_time" ) ) ;
    _user = TextStyleAdd ( Evaluate ( "created_by" ) ; Bold ) ;

    _created_msg = "Created by " & _user & " on " & _date & " at " & _time ;

    _date = date.TextualDate ( Evaluate ( "modified_date" ) ) ;
    _time = timestamp.ClockTime ( Evaluate ( "modified_time" ) ) ;
    _user = TextStyleAdd ( Evaluate ( "modified_by" ) ; Bold ) ;

    _modified_msg = "Last Modified by " & _user & " on " & _date & " at " & _time
  ] ;

  List (
    _id ;
    _created_msg ;
    _modified_msg
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="85" name="dev.IsDataType"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsDataType ( _value ; _type )
// Purpose:		Returns True (1) if the passed value is of the passed data type.
// Parameters:		_value:	The value to test
//				_type:	the type to test against, should be "timestamp", "time", or "date"
// Version:		1.0 written 17-02-24 by Charles Ross
// Notes:			Primarily used within the letn.Set function
// Todo:			Figure out if this function should be a utility function for the letn group.
// Example:		dev.IsDataType ( Get ( CurrentDate ) ; "date" )
//				  and dev.IsDataType ( Get ( CurrentTime ) ; "time" )
//				  and dev.IsDataType ( Get ( currenttimestamp ) ; "timestamp" )
//				  and ( not dev.IsDataType ( "text" ; "date" ) )
//				  and ( not dev.IsDataType ( get ( CurrentDate ) ; "time" ) )
//				  and ( not dev.IsDataType ( get ( CurrentDate ) ; "timestamp" ) )

Let (
  [
    _value_plus_one = GetAsText ( _value + 1 ) ;

    _value = Case (
      _type = "timestamp"	; GetAsTimestamp ( _value ) ;
      _type = "time"		; GetAsTime ( _value ) ;
      _type = "date"		; GetAsDate ( _value )
    ) ;

    _result = ( GetAsText ( _value + 1 ) = _value_plus_one )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="86" name="dev.IsDeveloper"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsDeveloper
// Purpose:		Returns true if the current user is logged in with full access.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-08
// Example:		// When the user is logged in with a full access account…
//				( ( get ( AccountPrivilegeSetName ) = "[Full Access]" ) and dev.IsDeveloper )
//				  xor
//				( ( get ( AccountPrivilegeSetName ) ≠ "[Full Access]" ) and not dev.IsDeveloper )

Get ( AccountPrivilegeSetName ) = "[Full Access]"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="87" name="dev.IsDuplicateRecord"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsDuplicateRecord ( _match_field )
// Purpose:		Returns `True` if the contents of the match field on the current record is the same as that one the previous record
// Parameters:		_match_field:	The field to use as a comparison for duplicate records
// Version:		1.0 - Charles Ross - 19-07-18
// Todo:			To dos
// Example:		sample = result

_match_field = GetNthRecord ( _match_field ; Get ( RecordNumber ) - 1 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="88" name="dev.IsSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsSet ( _value )
// Purpose:		A convenience function for easier readability when needing to check that a value is
//				not empty.
// Parameters:		_value:	The value to check.
// Version:		1.0 - The Scarpetta Group - 15-04-14
// Example:		// Assuming that $_value has non-empty contents:
//				dev.IsSet ( $_value ) = 1

not IsEmpty ( _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="89" name="dev.MaxSerial"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.MaxSerial ( _field )
// Purpose:		Returns the highest numeric primary key for the given field and table.
// Parameters:		_field:	The field to return the maximum serial number for
// Version:		1.0 - Charles Ross - 17-06-17
// Example:		sample = result

Let (
  [
    _sql = List (
      "SELECT MAX(_primary_key)" ;
      "FROM _table"
    ) ;

    _primary_key	= sql.QuotedFieldName ( _field ) ;
    _table			= sql.QuotedTableName ( _field ) ;

    _sql = Substitute (
      _sql ;
      [ "_primary_key"	; _primary_key	] ;
      [ "_table"		; _table		]
    ) ;

    _result = ExecuteSQL ( _sql ; "" ; "" )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="90" name="dev.NextValueListItem"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.NextValueListItem ( _value_list ; _current_item ; _loop )
// Purpose:		Return the next item in a value list given the current item.
// Parameters:		_value_list:	The value list to get the next item from
//				_current_item:	The current item to get the next one from
//				_loop:		Whether to loop back to the begining of the value
//							list if the current item is the last one
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 18-10-29
// Example:		sample = result

list.NextValue ( ValueListItems ( Get ( FileName ) ; _value_list ) ; _current_item ; _loop )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="91" name="dev.Nil"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Nil
// Purpose:		Provides a human-readible storage for an empty string.
// Version:		1.0 written 15-03-11 by Charles Ross
// Note:			This is meant to be used to make it clear when something is being set to an empty
//				string in order to blank it out, especially variables, but is also useful for comparisons.
// Example		dev.Nil = ""

""]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="92" name="dev.PanelIsFront"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.PanelIsFront ( _panel_name )
// Purpose:		Returns True if the named tab or slide panel is frontmost
// Parameters:		_panel_name: The name of the tab panel to check for
// Author:			1.0 - Charles Ross - 15-03-08
// Example:		// Assuming that a single panel with two tabs, "tab_1" and "panel_1" is on the current layout and the
//				// first one is active...
//				dev.PanelIsFront ( "tab_1" ) and ( not devp.PanelIsFront ( "panel_1" ) )

GetLayoutObjectAttribute ( _panel_name; "isFrontTabPanel" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="93" name="dev.ParseQualifiedField"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.ParseQualifiedField ( _qualified_field ; _table_or_field )
// Purpose:		Returns either just the table name or field name given a qualified field name.
// Parameters:		_qualified_field:	The qualified field name
//				_table_or_field:		Either "table" or "field", indicating which part to return.
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-11-27
// Example:		sample = result

Let (
  [
    _list			= list.CreateList ( _qualified_field ; "::" ) ;
    _index			= list.ValuePosition ( _table_or_field ; List ( "table" ; "field" ) ; 1 )
  ];

  GetValue ( _list; _index )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="94" name="dev.RecordCount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.RecordCount ( _table )
// Purpose:		Returns the number of records in the given table.
// Parameters:		_table:	The table to return the record count of
// Version:		1.0 - Charles Ross - 17-07-21

ExecuteSQL ( "SELECT COUNT(*) FROM " & Quote ( _table ) ; dev.Nil ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="95" name="dev.RegExMatch"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.RegExMatch ( _string; _pattern )
// Purpose:		Returns true if the pattern is contained in the string.
// Parameters:		_string:	The string to search for the pattern in.
//				_pattern:	The pattern to search for.
// Requirements: 	plug.RegisterScriptMasterFunction
//				The ScriptMaster plugin, written with version 4.32.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-04-16
//				1.1 edited to use plug.RegisterScriptMasterFunction.
// Example:		dev.RegExMatch ( "foo";	"foo" )
//				and not	dev.RegExMatch ( "bar";	"foo" )
//				and 		dev.RegExMatch ( "My email address is chivalry@mac.com.";
//							"(?i)\b[\w._%+-]+@[a-z\d.-]+\.[a-z]{2,4}\b" )

Let (
  [
    _signature = "dev_RegExMatch( source ; regex )";
    _code = "
/*lang=groovy*/¶
import java.util.regex.*¶
¶
Pattern pattern = Pattern.compile( regex );¶
Matcher matcher = pattern.matcher( source );¶
¶
return matcher.find();
";
    _eval = Substitute (
      _signature;
      [ "source";	Quote ( _source )	];
      [ "regex";	Quote ( _regex )	]
    )
  ];

  Case (
    plugin.RegisterScriptMasterFunction ( _signature; _code; False );
    Evaluate ( _eval )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="96" name="dev.SetVarByName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.SetVarByName ( _variable_name ; _value )
// Purpose:		Given the name of a global or local variable, sets it to the passed value.
// Parameters:		_var_name:	The name of the variable to set
//				_value:		The value to give to the variable
// Requirements:	let.Enclose
// Version:		1.0 written 15-06-22 by Charles Ross
//				1.1 edited 17-02-25 by Charles Ross; use letn.EncloseInLet
// Example:		Let (
//				  [
//				    _ = dev.SetVarByName ( "$_var" ; "foo" )
//				  ] ;
//
//				  $_var = "foo"
//				)

Let (
  [
    _value	= Quote ( _value ) ;
    _code	= let.Enclose ( _var_name & " = " & _value & " ;" ) ;

    _ = Evaluate ( _code )
  ];

  "True"
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="97" name="dev.Show"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Show ( _test )
// Purpose:		A convenience function for specifying when objects should be shown rather than when
//				they should be hidden.
// Parameters:		_test:	A boolean value that when true shows the object.
// Version:		1.0 - Charles Ross - 17-11-29
// Example:		dev.Show ( False ) = True and dev.Show ( True ) = False

not _test]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="98" name="dev.SystemDrive"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.SystemDrive
// Purpose:		FileMaker Server 16+ returns an empty string for `Get ( SystemDrive )`. This function returns what
//				that function used to return.
// Version:		17-08-10 - Charles Ross
// Example:		// When run within FileMaker Pro…
//				Get ( SystemDrive ) = dev.SystemDrive

Let (
  [
    _doc = Get ( DocumentsPath ) ;
    _comps = Substitute ( _doc ; "/" ; "¶" ) ;
    _name = GetValue ( _comps ; 2 ) ;
    _system_drive = "/" & _name & "/"
  ] ;

  _system_drive
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="99" name="dev.Timer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Timer ( _name; _action )
// Purpose:		Manipulates the named timer with the given action, storing timers in a global variable.
// Parameters:		_name:	The name of the timer to perform the action on.
//				_action:	Which action to perform.
// Requirements: 	let.Get
//				let.Set
//				devp.Nil
// Version:		1.0 - Arnold Kegebein - 10-06-01
//				1.1 - Charles Ross - 17-02-10; replaced kege functions with letn.
// Notes:			If the timer exiss already, returns the difference between the timer's start and the
//				current time.
//				http://www.kegebein.net/blog/2010/06/unlimited-timer/
// Example:		// With the side effect that the timer is stored for future use.
//				dev.Timer ( "timer"; "start" ) & dev.Timer ( "timer"; "stop" ) = "0:00:00"

Let(
  [
    _now = timestamp.LocalMilliseconds ;
    _timer = let.Get ( $$_TIMR_TIMER ; _name ) ;

    _start = let.Get ( _timer ; "start" ) ;
    _stop = let.Get ( _timer ; "stop" ) ;
    _stop = Case(
      IsEmpty( _stop );		_now;
      					_stop
    );

    _diff = Case(
      IsEmpty( _start );		dev.Nil;
      					_stop - _start
    );

    _timer = Case(
      _action = "start";
      let.Set ( "start" ; _now ) ;

      _action = "stop" and IsEmpty( _start );
      let.Set ( "start" ; _stop ) & let.Set ( "stop" ; _stop ) ;

      _action = "stop";
      let.Set ( "start" ; _start ) & let.Set ( "stop" ; _stop )
    );

    $$_TIMR_TIMER = Case(
      _action = "start" or _action = "stop";
      let.Set ( _name ; _timer ) ;

      _action = "delete";
      let.Set ( _name ; dev.Nil ) ;

      $$_TIMR_TIMER
    )
  ];

  _diff
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="100" name="dev.Toggle"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Toggle ( _existing ; _new )
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 18-01-10
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  _existing = _new	; dev.Nil
				; _new
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="101" name="err_____ Error Numbers _____________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that assist with error handling, generally by giving names to error numbers. Not every error
// number will be represented here, only those which have been used at least once in some solution.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="102" name="err.CannotModifyAdminAccount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.CannotModifyAdminAccount
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.CannotModifyAdminAccount = 217

217]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="103" name="err.CommandUnavailable"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.CommandUnavailable
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.CommandUnavailable = 3

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="104" name="err.ConnectionFailed"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.ConnectionFailed
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.ConnectionFailed = 1631

1631]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="105" name="err.FieldIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FieldIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.FieldIsMissing = 102

102]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="106" name="err.FileIsLocked"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FileIsLocked
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.CannotModifyAdminAccount = 300

300]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="107" name="err.FileIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FileIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.FileIsMissing = 100

100]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="108" name="err.FindCriteriaEmpty"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FindCriteriaEmpty
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.FindCriteriaEmpty = 400

400]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="109" name="err.GenericCalcError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.GenericCalcError
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-11-25 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.GenericCalcError = 1200

1200]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="110" name="err.HostExceedsCapacity"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.HostExceedsCapacity
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.HostExceedsCapacity = 812

812]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="111" name="err.InsufficientPrivileges"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err. InsufficientPrivileges
// Purpose:		Returns the error number for the named error
// Version:		1.0 - Charles Ross - 17-03-10
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err. InsufficientPrivileges = 9

9]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="112" name="err.InvalidAccountOrPassword"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidAccountOrPassword
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.InvalidAccountOrPassword = 212

212]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="113" name="err.InvalidPrivilegeSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidPrivilegeSet
// Purpose:		Custom error number for missing privilege set.
// Version:		1.0 written 17-06-20 by Charles Ross
// Notes:			Custom error numbers begin at 10000
// Example:		err.InvalidPrivilegeSet = 10001

10001]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="114" name="err.InvalidUserAccount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidUserAccount
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.InvalidUserAccount = 213

213]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="115" name="err.InvalidUserCredentials"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidUserCredentials
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.InvalidUserCredentials = 212

212]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="116" name="err.LayoutIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.LayoutIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.LayoutIsMissing = 105

105]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="117" name="err.LayoutObjectIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.LayoutObjectIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.LayoutObjectIsMissing = 116

116]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="118" name="err.NameExists"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NameExists
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NameExists = 12

12]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="119" name="err.NameNotValid"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NameNotValid
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-11-25 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NameNotValid = 11

11]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="120" name="err.NoError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NoError
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NoError = 0

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="121" name="err.NoRecordsFound"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NoRecordsFound
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NoRecordsFound = 401

401]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="122" name="err.PrivilegeSetMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.PrivilegeSetMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.PrivilegeSetMissing = 109

109]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="123" name="err.RecordMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.RecordMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 18-04-23 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.RecordMissing = 101

101]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="124" name="err.RelationshipMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.RelationshipIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.RelationshipIsMissing = 103

103]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="125" name="err.ScriptIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.ScriptIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.ScriptIsMissing = 104

104]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="126" name="err.TableIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.TableIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.TableIsMissing = 106

106]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="127" name="err.TooManyLoginAttempts"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.TooManyLoginAttempts
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.TooManyLoginAttempts = 214

214]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="128" name="err.UnspportedExcelFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UnspportedExcelFormat
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UnspportedExcelFormat = 730

730]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="129" name="err.UserAccountInactive"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UserAccountInactive
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UserAccountInactive = 210

210]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="130" name="err.UserAccountPasswordDoesNotExist"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UserAccountPasswordDoesNotExist
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 17-04-20 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UserAccountPasswordDoesNotExist = 213

213]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="131" name="err.UserCanceledAction"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UserCanceledAction
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UserCanceledAction = 1

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="132" name="funit _____ Funit Module Functions _________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions specific to this application.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="133" name="funit.TransactionID"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[/*// funit.TransactionID
// Purpose:		Return the funit transaction ID for the current testing run
// Requirements:	A `DEV` table with a single record with primary key `1` that has a `funit_transaction_id` field
// Version:		1.0 - Charles Ross - 19-09-19
// Example:		sample = result

sql.SelectFromWhereValue ( DEV::funit_transaction_id ; DEV::id ; DEV::id ; 1 )*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="134" name="geo_____ Geolocation _______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Geolocation functions]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="135" name="geo.CoordDistance"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// geo.CoordDistance ( lat_1 ; long_1 ; lat_2 ; long_2 )
// Purpose:		Return distance (in miles) between two points on earth
// Parameters:		_lat_1:	Latitude of first coordinate in degrees
//				_long_1:	Longitude of first coordinate in degrees
//				_lat_2:	Latitude of second coordinate in degrees
//				_long_2:	Longitude of second coordinate in degrees
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 18-04-05
// Notes:			https://dbservices.com/articles/filemaker-radius-search/
//				Original version by Nate Williams

Let (
  [
    _earth_radius = 3963.168 ;

    _lat_1		= Radians (  _lat_1 ) ;
    _long_1		= Radians (  _long_1 ) ;
    _lat_2		= Radians ( _lat_2 ) ;
    _long_2		= Radians ( _long_2 ) ;


    _dist = Acos ( Cos ( _lat_1 ) * Cos ( _long_1 ) * Cos ( _lat_2 ) * Cos ( _long_2 ) + Cos ( _lat_1 ) * Sin ( _long_1 ) * Cos ( _lat_2 ) * Sin ( _long_2 ) + Sin ( _lat_1 ) * Sin ( _lat_2 ) ) * _earth_radius
  ] ;

  _dist
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="136" name="housekeeping_____ Housekeeping Overrides ___________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions to manipulate JSON strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="137" name="housekeeping.IsSuspended"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// housekeeping.IsSuspended
// Purpose:		Check a global variable that indicates housekeeping fields should not be updated
// Version:		1.0 - Charles Ross - 19-08-08
// Example:		sample = result

$$_SUSPEND_HOUSEKEEPING_UPDATES = True]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="138" name="housekeeping.Resume"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// housekeeping.Resume
// Purpose:		Clear a global variable that indicates housekeeping fields should not be updated
// Version:		1.0 - Charles Ross - 19-08-08
// Example:		sample = result

Let ( $$_SUSPEND_HOUSEKEEPING_UPDATES = dev.Nil ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="139" name="housekeeping.Suspend"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// housekeeping.Suspend
// Purpose:		Set a global variable that indicates housekeeping fields should not be updated
// Version:		1.0 - Charles Ross - 19-08-08
// Example:		sample = result

Let ( $$_SUSPEND_HOUSEKEEPING_UPDATES = True ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="140" name="json_____ JSON Manipulation ________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions to manipulate JSON strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="141" name="json.ContainerObject"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.ContainerObject ( _container )
// Purpose:		Encodes container data as a JSONObject
// Parameters:		_container:	The container data to encode.
// Version:		1.0 - Jeremy Bante - 17-04-16
//				1.1 - Jeremy Bante - 17-04-27 - Using Base64EncodeRFC to improve speed, implementing a recommendation by Dan Smith
// Example:		json.ContainerObject ( FUNITCF::container ) = "{\"base64\":\"dGV4dAo=\",\"filename\":\"file.txt\"}" // When container has a text file named file.txt with contents of "text"

JSONSetElement ( dev.Nil ;
  [ "filename"	; GetContainerAttribute ( _container ; "filename" ) ; JSONString ] ;
  [ "base64"	; Base64EncodeRFC ( 4648 ; _container ) ; JSONString ]
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="142" name="json.CreateVarsFromKeys"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.CreateVarsFromKeys ( _json ; _namespace )
// Purpose:		Create local variables for the keys in the JSON with the namespace's prefix
// Parameters:		_json:		The JSON to create the variables from
//				_namespace:	The prefix to prepend variable names with
// Result:			A numeric code representing the success or failure:
//				- 0:		Success or empty JSON
//				- 5:		Invalid JSON
//				- 1204:	One of the JSON root keys did not conform to FileMaker's naming restrictions for variables
// Version:		1.0 - Mislav Kos - 17-12-08
//				1.1 - Mislav Kos - 18-02-18 - Corrected typecasting portion of custom function
//				2.0 - Charles Ross - 19-09-18 - Conformed to file's conventions
// Notes:			Keys must be named following the same naming restrictions as FileMaker variables and fields:
//				https://fmhelp.filemaker.com/help/16/fmp/en/index.html#page/FMP_Help%2Fnaming-fields.html.
// Example:		Let (
//				  _ = json.CreateVarsFromKeys ( JSONSetElement ( dev.Nil ; "var" ; "val" ; JSONString ) ; dev.Nil ) ;
//				  _ = json.CreateVarsFromKeys ( "{ \"id\" : \"123\", \"color\" : \"blue\" }" ; "json" ;
//				  ( $var = "val" )
//				    and ( $id = "123" )
//				    and ( $color = "blue" )
//				)

Case (
  IsEmpty ( _json ) 						; 0 ;
  Left ( JSONFormatElements ( _json ) ; 1 ) = "?"	; 5 ;
	
  Let (
    [
      _keys = JSONListKeys ( _json ; "." ) ;
      // Process keys starting with the last one; otherwise JSON arrays won't process correctly
      _key = GetValue ( _keys ; ValueCount ( _keys ) )
    ] ;
    Case (
      IsEmpty ( _key ) ; 0 ;

      Let (
        [
          _value = JSONGetElement ( _json ; _key ) ;

          _text = GetAsText ( _value ) ;
          _number = GetAsNumber ( _value ) ;
          _is_valid_date = dev.IsDataType ( _text ; "date" ) ;
          _is_valid_time = dev.IsDataType ( _text  ; "time" ) ;

          _value = Case (
            ( _value = dev.Nil ) or ( _value = "?" )	; Quote ( _value ) ;
            _is_valid_time and _is_valid_date		; "GetAsTimestamp ( " & Quote ( _value ) & " )" ;
            _is_valid_time					; "GetAsTime ( " & Quote ( _value ) & " )" ;
            _is_valid_date					; "GetAsDate ( " & Quote ( _value ) & " )" ;
            _text ≠ GetAsText ( _number )		; Quote ( _value )
									;  _number
          ) ;

          _code = "Let ( $" & _namespace & _key & " = " & _value & " ; \"\" ) " ;
          _error = EvaluationError ( Evaluate ( _code ) )
        ] ;
        Case (
          _error ≠ 0	; _error
				; json.CreateVarsFromKeys ( JSONDeleteElement ( _json ; _key ) ; _namespace )
        )
      )
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="143" name="json.GetBoolean"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetBoolean ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data and casts it to a boolean
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	requirements
// Version:		1.0 - Jeremy Bante - 17-05-11
// Example:		sample = result

Let (
  [
    _value		= JSONGetElement ( _json ; _key_index_or_path ) ;
    _error		= ( Left ( _value ; 1 ) = "?" ) ;
    _not_bool	= ( _value ≠ False ) and ( _value ≠ True )

  ] ;

  Case (
    _error		; _value ;
    _not_bool	; "? Value is not a boolean¶  " & _value
			; _value
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="144" name="json.GetContainer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetContainer ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data, and casts it as FileMaker container data
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Version:		1.0 - Jeremy Bante - 17-04-16
// Notes:			Assumes that the _key_index_or_path refers to a JSONObject encoded according to
//				the format of the `json.ContainerObject` function.
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?" ;

    _parsed = Base64Decode (
      JSONGetElement ( _value ; "base64" ) ;
      JSONGetElement ( _value ; "fileName" )
    )
  ] ;

  Case (
    _error	; _value
		; _parsed
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="145" name="json.GetDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetDate
// Purpose:		Parses a value from JSON data, and casts it to a FileMaker date
// Parameters:		_param:	description
// Requirements: 	timestamp.FromISO8601
// Version:		1.0 - Jeremy Bante - 17-04-06
//				1.1 - Jeremy Bante - 17-04-08 - Refactoring
// Notes:			Assumes that the date is encoded as a JSONString formatted according
//				to ISO 8601.
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?"
  ] ;

  Case (
    _error	; _value
		; GetAsDate ( timestamp.FromISO8601 ( _value ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="146" name="json.GetNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetNumber ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data, and casts it to a number
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	requirements
// Version:		1.0 - Jeremy Bante - 17-04-06
//				1.1 - Jeremy Bante - 17-04-08 - Refactoring
//				1.2 - Daniel Smith - 17-04-25 - Add value to result if it's not a number
//				1.3 - Jeremy Bante - 17-04-27 - Omitting input from error result
//				1.4 - Jeremy Bante - 17-04-30 - Revising wording of NaN error result and
//				  re-including parsed value, based on discussion with Dan Smith.
// Example:		sample = result

Let (
  [
    _value		= JSONGetElement ( _json ; _key_index_or_path ) ;
    _error		= ( Left ( _value ; 1 ) = "?" ) ;
    _number	= GetAsNumber ( _value ) ;
    _nan		= IsEmpty ( _number ) and not IsEmpty ( _value )
  ] ;

  Case (
    _error	; _value ;
    _nan	; "? Value is not a number¶  " & _value
		; _number
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="147" name="json.GetTime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetTime ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data, and casts it to a FileMaker time
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	timestamp.FromISO8601
// Version:		1.0 - Jeremy Bante - 17-04-16
// Notes:			ssumes that the time is encoded as a JSONString formatted according
//				to ISO 8601
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?"
  ] ;

  Case (
    _error	; _value
		; GetAsTime ( timestamp.FromISO8601 ( _value ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="148" name="json.GetTimestamp"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.JSONGetTimestamp ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data and casts it to a FileMaker timestamp.
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	timestamp.FromISO88601
// Version:		1.0 - Jeremy Bante - 17-04-16
// Notes:			Assumes the timestamp is encoded as a JSONString formatted in ISO 8601.
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?"
  ] ;

  Case (
    _error 	; _value
		; timestamp.FromISO8601 ( _value )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="149" name="key _____ Keyboard Codes ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Keyboard code constants.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="150" name="key.ByteOrderMark"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.ByteOrderMark
// Purpose:		Return the code for the delete key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the byte order mark character…
//				$_char = key.ByteOrderMark

Char ( key.ByteOrderMarkCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="151" name="key.ByteOrderMarkCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.ByteOrderMarkCode
// Purpose:		Return the code for the byte order mark
// Version:		1.0 - Charles Ross - 20-01-11
// Example:		// When $_char holds the byte order mark character…
//				Code ( $_char ) = key.ByteOrderMarkCode

65279]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="152" name="key.Delete"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Delete
// Purpose:		Return the code for the delete key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the delete character…
//				$_char = key.Delete

Char ( key.DeleteCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="153" name="key.DeleteCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.DeleteCode
// Purpose:		Return the code for the delete key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the delete character…
//				Code ( $_char ) = key.DeleteCode

8]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="154" name="key.DownArrow"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.DownArrow
// Purpose:		Return the character for the down arrow key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the down arrow character…
//				$_char = key.DownArrow

Char ( key.DownArrowCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="155" name="key.DownArrowCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.DownArrowCode
// Purpose:		Return the code for the down arrow key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the down arrow character…
//				Code ( $_char ) = key.DownArrowCode

31]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="156" name="key.Enter"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Enter
// Purpose:		Return the code for the enter key (line feed)
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the line feed character…
//				$_char = key.Enter

Char ( key.EnterCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="157" name="key.EnterCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.EnterCode
// Purpose:		Return the code for the enter key (line feed)
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the line feed character…
//				Code ( $_char ) = key.EnterCode

10]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="158" name="key.Escape"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Escape
// Purpose:		Return the code for the escape character
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the escape character…
//				$_char = key.Escape

Char ( key.EscapeCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="159" name="key.EscapeCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.EscapeCode
// Purpose:		Return the code for the escape key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the escape character…
//				Code ( $_char ) = key.EscapeCode

27]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="160" name="key.LineFeed"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.LineFeed
// Purpose:		Return the code for the linefeed
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the linefeed character…
//				$_char = key.LineFeed

Char ( key.LinefeedCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="161" name="key.LinefeedCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.LinefeedCode
// Purpose:		Return the code for the line feed character
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the line feed character…
//				Code ( $_char ) = key.LinefeedCode

10]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="162" name="key.Return"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Return
// Purpose:		Return the code for the return key (carriage return)
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the carriage return character…
//				$_char = key.Return

Char ( key.ReturnCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="163" name="key.ReturnCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.ReturnCode
// Purpose:		Return the code for the return key (carriage return)
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the carriage return character…
//				Code ( $_char ) = key.ReturnCode

13]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="164" name="key.Tab"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Tab
// Purpose:		Return the code for the tab key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the tab character…
//				$_char = key.Tab

Char ( key.TabCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="165" name="key.TabCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.TabCode
// Purpose:		Return the code for the tab key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the tab character…
//				Code ( $_char ) = key.TabCode

9]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="166" name="key.UpArrow"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.UpArrow
// Purpose:		Return the code for the up arrow key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the up arrow character…
//				$_char = key.UpArrow

Char ( key.UpArrowCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="167" name="key.UpArrowCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.UpArrowCode
// Purpose:		Return the code for the up arrow key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the up arrow character…
//				Code ( $_char ) = key.UpArrowCode

29]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="168" name="key.VerticalTab"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.VerticalTab
// Purpose:		Return the code for the vertical tab character
// Version:		1.0 - Charles Ross - 17-07-28
// Example:		// When $_char holds the vertical tab character…
//				$_char = key.VerticalTab

Char ( key.VerticalTabCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="169" name="key.VerticalTabCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.VerticalTabCode
// Purpose:		Return the code for the vertical tab character
// Version:		1.0 - Charles Ross - 17-07-28
// Example:		// When $_char holds the vertical tab character…
//				Code ( $_char ) = key.VerticalTabCode

11]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="170" name="let_____ Let Notation Functions ___________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for easy manipulation of let notation strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="171" name="let._EscapeComments"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let._EscapeComments ( _text )
// Purpose:		Passes FileMaker calculation code and returns it with comments escaped.
// Parameters:		_text:	The text to escape the comments of.
// Version:		1.0 written 15-11-26 by Charles Ross
// Notes:			Utility function only meant to be called by other functions.
// Example:		sample = result

Quote ( Substitute (
  _text ;
  [ "*/"	; "\*\/"	] ;
  [ "/*"	; "\/\*"	]
) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="172" name="let._IndexedName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let._IndexedName
// Purpose:		Assuming a valid name and index, returns the name with FileMaker's index notation.
// Parameters:		_name:	The name to index
//				_index:	The index to use
// Version:		1.0 written 15-11-26 by Charles Ross
// Notes:			Utility function only meant to be called by other functions.
// Example:		let._IndexedName ( "name" ; 5 ) = "name[5]"

_name &
Case (
  _index ≠ 1 or IsEmpty ( _name )	; "[" & _index & "]"
							; dev.Nil
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="173" name="let.Array"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Array ( _name ; _index ; _value )
// Purpose:		Serves as syntactic sugar for creating array values in Let notation.
// Parameters:		_name:	The name for the returned name/value pair, can be any value that would be a
//						valid local variable name
//				_index:	A numeric index for a repeating variable.
//				_value:	The value for the returned name/value pair.
// Requirements: 	let.Set
//				let.IndexedName
// Version:		1.0 written 13-07-26 by Jeremy Bante
//				1.1 edited 15-11-26 by Charles Ross, improve readability, use letn.IndexedName.
// Example:		let.Array ( "name" ; 1 ; "foo" ) & let.Array ( "name" ; 2 ; "bar" )
//				  = "$name = \"foo\" ;¶$name[2] = \"bar\" ;¶"

Let (
  [
    _indexed_name = let._IndexedName ( _name ; _index ) ;

    _result = let.Set ( _indexed_name ; _value )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="174" name="let.ArrayFromList"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.ArrayFromList ( _name ; _list )
// Purpose:		Converts a return-delimited list to a Let notation array.
// Parameters:		_name:	The name for the returned name/value pair.
//				_list:		A return-delimited list of values.
// Requirements: 	let.Array
//				dev.ClearVars
// Version:		1.0 written 13-07-26 by Jeremy Bante
//				1.1 edited 15-11-26 by Charles Ross, use more descriptive variable names, restructure
//					recursive code.
// Notes:			Rework to use `While`
// Example:		let.ArrayFromList ( "name" ; List ( "one" ; "two" ; "three" ) )
//				  = "$name = \"one\" ;¶$name[2] = \"two\" ;¶$name[3] = \"three\" ;¶"

Case (
  ( not IsEmpty ( $_letn_ArrayFromList_count ) )
    and ( $_letn_ArrayFromList_index = $_letn_ArrayFromList_count ) ;
  dev.ClearVars ( List ( "$_letn_ArrayFromList_index" ; "$_letn_ArrayFromList_count" ) ) ;

  Let (
    [
      $_letn_ArrayFromList_count	= ValueCount ( _list ) ;
      $_letn_ArrayFromList_index	= $_letn_ArrayFromList_index + 1 ;

      _value	= GetValue ( _list ; $_letn_ArrayFromList_index ) ;
      _entry	= let.Array ( _name ; $_letn_ArrayFromList_index ; _value ) ;

      _result = _entry & let.ArrayFromList ( _name ; _list )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="175" name="let.ArrayGet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.ArrayGet ( _params ; _name ; _index )
// Purpose:		Serves as syntactic sugar for retireving array values from Let notation. Returns a named
//				value from a string of name/value pairs.
// Parameters:		_params:	A string of name/value pairs in Let notation
//				_name:	The name of the value to retrieve
//				_index:	The index of a repeating variable
// Requirements: 	let.Get
//				let.IndexedName
// Version:		1.0 written 13-07-27 by Jeremy Bante
//				1.1 edited 15-11-26 by Charles Ross, improve readability, use letn.IndexedName
// Example:		let.ArrayGet ( let.Array ( "name" ; 1 ; "foo" ) & let.Array ( "name" ; 2 ; "bar" ) ; "name" ; 2 ) = "bar"

Let (
  [
    _indexed_name	= let._IndexedName ( _name ; _index );
    _result			= let.Get ( _params ; _indexed_name )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="176" name="let.Assign"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Assign ( _params )
// Purpose:		Parses a Let dictionary of name-value parameters into a series of locally scoped
//				$variables.
// Parameters:		_params:	A Let notation dictionary, such as produced by letn.Set.
// Requirements: 	let.Enclose
// Version:		created 12-11-11 by Jeremy Bante
//				modified 12-11-28 by Jeremy Bante, support "$" prefix values as default
//				modified 13-03-15 by David Smith, update documentated return value
//				modified 15-11-25 by Charles Ross, rework to conform to custom function standards,
//					improve readability
// Notes:			Returns 1 when _params is a valid set of name/value pairs (which includes the empty
//				string, 0 otherwise. When 0 is returned, error code is sent to $_letn_Assign_error.
// Example:		List (
//				  let.Assign ( let.Set ( "name" ; "value" ) ) ;
//				  $name
//				) = List ( 1 ; "value" )

Let (
  [
    // Convert global variables to local variables
    _params = Substitute (
          ¶ & _params;
          [ "¶$$"; "¶$" ]
        ) ;

    _code	= let.Enclose ( _params ) ;
    _error	= EvaluationError ( Evaluate ( _code ) ) ;

    _result = ( _error = 0 )						// indicate success or failure of Evaluate()
      or Let ( $_letn_Assign_error = _error ; False )	// only runs on error
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="177" name="let.Enclose"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Enclose ( _params )
// Purpose:		Surrounds the _params in a `Let` function for evaluation. The `Let` funciton itself
//				returns an empty string.
// Parameters:		_params:	The parameters to enclose within a `Let` function.
// Version:		1.0.0 - Charles Ross - 15-11-26
//				1.0.1 - Charles Ross - 18-04-23 - Change name to indicate it's no longer a "private" custom function.
// Notes:			Utility function only meant to be called by other functions.
// Example:		let.Enclose ( letn.Set ( "name" ; "value" ) )
//				  = "Let ( [¶$name = \"value\" ;¶¶_ = \"\"¶] ; _ )"

List (
  "Let ( ["			;
  _params		;
  "_ = \"\""		; // Alows the params to terminate with a semicolon
  "] ; _ )"
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="178" name="let.Get"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Get ( _params ; _name )
// Purpose:		Returns the value of name from the list of parameters, assumed to be in Let notation.
// Parameters:		_params:	Name/value paris in Let notation
//				_name:	The name of the value to retrieve
// Requirements: 	dev.Nil
// Version:		1.0 written 12-12-05 by Jeremy Bante
//				1.1 edited 13-01-08 by Jeremy Bante to handle leading $$ and $ in the name parameter
//					the same as the letn.Set function, based on a comment by Dan Smith.
//				1.2 edited 15-11-26 by Charles Ross, conform to custom function library standards
// Example:		let.Get ( let.Set ( "var" ; "foo" ) ; "var" ) = "foo"

Let (
  [
    _params = ¶ & _params & ¶;

    // strip any leading $$ or $ for backwards compatibility
    _name = Substitute (
      ¶ & _name ;
      [ "¶$$"	; dev.Nil ] ;
      [ "¶$"		; dev.Nil ] ;
      [ ¶		; dev.Nil ]
    ) ;

    _length = Length ( _params );

    // position of last occurrence of name
    _position = Position ( _params ; "¶$" & _name & " = " ; _length ; -1 );

    // check for $$global name for backwards compatibility
    _position = Case (
      _position > 0	; _position
				; Position ( _params ; "¶$$" & _name & " = " ; _length ; -1 )
    ) ;

    _start	= Position ( _params ; " = " ; _position ; 1 ) + 3;
    _end	= Position ( _params ; ";¶" ; _position ; 1 );
    _value	= Middle ( _params ; _start ; _end - _start ) ;

    // check that _value exists and is valid
    _result = Case (
      ( _position > 0 )
        and IsValidExpression ( _value );
      Evaluate ( _value )
    )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="179" name="let.GetNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.GetNames ( _params )
// Purpose:		Returns a list of names from the name/value pairs in Let notation.
// Parameters:		_params:	Let notation string
// Requirements: 	list.IsMember
// Version:		1.0 written 13-01-24 by Daniel Smith
//				1.1 edited 13-12-23 by John Jones to use Position/Middle
//				1.2 edited 13-12-24 by Jeremy Bante to improve efficiency
// Example:		let.GetNames ( let.Set ( "var1" ; "foo" ) & let.Set ( "var2" ; "bar" ) ) = List ( "var1" ; "var2" )

Case (
  // ========================================
  // Step 0, set-up
  not $_letn_GetNames_step ;
  Let (
    [
      _empty = IsEmpty ( Trim ( _params ) ) ;

      _params = Substitute (
        ¶ & _params ;
        [ "¶$"	; ¶	] ;		// remove "$" prefix
        [ "¶$"	; ¶	] ;		// remove "$$" prefix
        [ "¶¶"	; ¶	]		// remove empty values
      ) ;

      $_letn_GetNames_length = Length ( _params ) ;

      $_letn_GetNames_step = Case ( 
        _empty	; 2
			; 1
        )
    ] ;

    let.GetNames ( _params )
  ) ;

  // ========================================
  // Step 1, check each parameter
  $_letn_GetNames_step = 1 ;
  Let (
    [
      _start				= $_letn_GetNames_end + 1 ;
      $_letn_GetNames_end	= Position ( _params ; ¶ ; _start ; 1 ) ;
      _end_of_list		= $_letn_GetNames_end = 0 ;

      _length = Case (
        _end_of_list	; $_letn_GetNames_length + 1
				; $_letn_GetNames_end
      ) - _start ;

      _pair = Middle ( _params ; _start ; _length ) ;
      _name = Left ( _pair ; Position ( _pair ; " = " ; 1 ; 1 ) - 1 ) ;

      // only include _name if it isn't already in the result
      _include = not list.IsMember ( _name ; $_letn_GetNames_result ) ;

      $_letn_GetNames_result = List (
        $_letn_GetNames_result ;
        Case ( _include ; _name )
      ) ;

      _end_of_list = _end_of_list or ( $_letn_GetNames_end ≥ $_letn_GetNames_length ) ;

      $_letn_GetNames_step = Case (
        _end_of_list	; 2
				; 1
      )
    ] ;

    let.GetNames ( _params )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  $_letn_GetNames_step = 2 ;
  Let (
    [
      _result = $_letn_GetNames_result ;

      // purge variables
      _var_list = List ( "$_letn_GetNames_end" ; "$_letn_GetNames_length" ; "$_letn_GetNames_result"; "$_letn_GetNames_step" ) ;
      _ = dev.ClearVars ( _var_list )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="180" name="let.List"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.List ( _value )
// Purpose:		Encoded value with trailing return and data type preserved
// Parameters:		_value:	The value to encode
// Requirements: 	dev.IsDataType
//				dev.Nil
// Version:		1.0 written 12-11-26 by Daniel Smith
//				1.1 edited 13-05-09 by Daniel Smith to encode a value like the current version of
//					letn.Set custom function
//				1.2 edited 13-12-24 by Jeremy Bante to specially encode newline characters in values,
//					and to update type detection to match the # function.
//				1.3 edited 14-05-26 by Jeremy Bante to detect type using a different method suggested
//					by Arnold Kegebein.
//				1.4 edited 14-06-06 by Jeremy Bante to fix an issue where long sequences of digits
//					could be interpreted as timestamps.
//				1.5 edited 15-11-26 by Charles Ross to conform to custom function library standards
// Example:		let.List ( "value1" )
//				  & let.List (
//				  let.List ( "subValue" )
//				  & let.List ( "subValue2" )
//				) = "\"value1\"¶\"\\\"subValue\\\"\¶\\\"subValue2\\\"\¶\"¶"

Let (
  [
    _number = GetAsNumber ( _value ) ;

    _value = Case (
      dev.DataTypeMustBeText ( _value ) ;
      Quote ( _value ) ;

      dev.IsDataType ( _value ; "timestamp" ) ;
      "GetAsTimestamp ( " & Quote ( _value ) & " )" ;

      dev.IsDataType ( _value ; "time" ) ;
      "GetAsTime ( " & Quote ( _value ) & " )" ;

      dev.IsDataType ( _value ; "date" ) ;
      "GetAsDate ( " & Quote ( _value ) & " )" ;

      _value ≠ _number ;
      Substitute ( Quote ( _value ) ;
        [ Char ( 10 )	; "\" & Char ( 10 ) & \""	] ;
        [ Char ( 8232 )	; "\" & Char ( 8232 ) & \""	] ;
        [ Char ( 8233 )	; "\" & Char ( 8233 ) & \""	]
      ) ;

      _number
    ) ;

    _result = Case (
      IsValidExpression ( _value )
        // The following `Evaluate` slows the calc by ~30%, only include during dev and debug
        // and Evaluate ( _value ) = _value
      ;
      _value & ¶ ;

      "/* Error " & err.GenericCalcError & " value: " & let._EscapeComments ( _value ) & " */" & ¶
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="181" name="let.ListGet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.ListGet ( _values ; _index )
// Purpose:		Retrieve a value from a list created with the let.List ( value ) function. Preserve the data
//				type and all special characters of the original value.
// Parameters:		_values:	List of encoded values
//				_index:	The position of the value to retrieve
// Version:		1.0 written 12-11-26 by Daniel Smith
// Example:		let.ListGet ( let.List ( "value1" ) & let.List ( "value2" ) ; 1 ) = "value1"
//				  and let.ListGet ( let.List ( "" ) & let.List ( "value2" ) ; 2 ) = "value2"
//				  and let.ListGet ( let.List ( "value1" ) & let.List ( "value2" ) ; 3 ) = dev.Nil
//				  and let.ListGet ( "This is not a valid #List string" ; 1 ) = dev.Nil

Let (
  [
    _value = GetValue ( _values ; _index ) ;

    _result = Case (
      IsValidExpression ( _value )	; Evaluate ( _value )
						; dev.Nil
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="182" name="let.Remove"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Remove
// Purpose:		Returns a Let notation string from _params with names found in _remove taken out.
// Parameters:		_params:	A Let notation string
//				_remove:	The list of names to remove
// Requirements: 	devp.Nil
// Version:		1.0 written 12-12-20 by Daniel Smith
//				1.1 edited 13-01-08 by Jeremy Bante to extend the function to remove multiple names from
//					a return-delimited list
//				1.2 edited 13-03-15 by Daniel Smith to add trailing return if it doesn't exist
//				1.3 edited 13-12-23 by John Jones to use Middle/Position instead of GetValue
//				1.4 edited 13-12-24 by Jeremy Bante to improve efficiency
//				1.5 edited 15-11-26 by Charles Ross, improve readability, conform to standards
// Example:		let.Remove ( let.Set ( "var_1" ; "val_1" ) & let.Set ( "var_2" ; "val_2" ) ; "var_1" )
//				  = let.Set ( "var_2" ; "val_2" )

Case (
  // ========================================
  // Step 0, set-up
  not $_letn_Remove_step ;
  Let (
    [
      _empty = IsEmpty ( _params ) or IsEmpty ( _remove ) ;

      // add "$" prefix for matching
      _remove = Substitute ( ¶ & _remove ; ¶ ; "¶$" ) ;

      // add "$$" prefix for backwards-compatibility
      _remove = _remove & Substitute ( _remove ; ¶ ; "¶$" ) & ¶ ;

      $_letn_Remove_length = Length ( _params ) ;

      $_letn_Remove_step = Case (
        _empty	; -1
			; 1
      )
    ] ;

    let.Remove ( _params ; _remove )
  ) ;

  // ========================================
  // Step 1, check each parameter
  $_letn_Remove_step = 1 ;
  Let (
    [
      _start				= $_letn_Remove_end + 1 ;
      $_letn_Remove_end	= Position ( _params ; ¶ ; _start ; 1 ) ;
      _end_of_list		= $_letn_Remove_end = 0 ;

      _length = Case (
        _end_of_list	; $_letn_Remove_length + 1
				; $_letn_Remove_end
      ) - _start ;

      _pair		= Middle ( _params ; _start ; _length ) ;
      _name		= Left ( _pair ; Position ( _pair ; " = " ; 1 ; 1 ) - 1 ) ;

      // only include if ~name is not in removeParameters
      _include = ( not IsEmpty ( _name ) )
        and ( Position ( _remove ; ¶ & _name & ¶ ; 1 ; 1 ) = 0 ) ;

      $_letn_Remove_result = $_letn_Remove_result & Case ( _include ; _pair & ¶ ) ;

      _end_of_list = _end_of_list
      or ( $_letn_Remove_end ≥ $_letn_Remove_length ) ;

      $_letn_Remove_step = Case (
        _end_of_list	; 2
				; 1
      )
    ] ;

    let.Remove ( _params ; _remove )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  ( $_letn_Remove_step = 2 )
    or ( $_letn_Remove_step = -1 ) ;
  Let (
    [
      _empty = $_letn_Remove_step = -1 ;
      _result = Case (
        _empty	; _params
			; $_letn_Remove_result
      ) ;

      // purge variables
      _var_list = List ( "$_letn_Remove_end" ; "$_letn_Remove_length" ; "$_letn_Remove_result" ; "$_letn_Remove_step" ) ;
      _ = dev.ClearVars ( _var_list )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="183" name="let.Replace"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Replace ( _params ; _name ; _value )
// Purpose:		Replaces the existing value in name with the new one passed.
// Parameters:		_params:	The let notation parameters to replace the name in
//				_name:	The name to replace the value of
//				_value:	The new value to store in the name
// Requirements: 	let.Remove
//				let.Set
// Version:		1.0 written 17-02-24 by Charles Ross
// Example:		Let (
//				  [
//				    _letn = let.Set ( "var_1" ; "val_1" ) & let.Set ( "var_2" ; "val_2" ) ;
//				    _letn = let.Replace ( _letn ; "var_1" ; "new" )
//				  ] ;
//				  let.Get ( _letn ; "var_1" ) = "new"
//				)

let.Remove ( _params ; _name ) & let.Set ( _name ; _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="184" name="let.Set"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Set ( _name ; _value )
// Purpose:		Returns a name/value pair in Let notation.
// Parameters:		_name:	The name for the returned name/value pair, name can be any value that
//						would be a valid local variable name.
//				_value:	The value for the returned name/value pair.
// Requirements: 	devp.Nil
//				devp.DataTypeMustBeText
//				devp.IsDataType
//				letn.EncloseInLet
//				letn.EscapeComments
//				errn.NameNotValid
//				errn.GenericCalcError
// Version:		created 12-11-10 by Jeremy Bante
//				modified 12-11-28 by Jeremy Bante, to return error feedback and prefix names with "$".
//				modified 12-12-07 by Jeremy Bante, corrected error result that could create invalid
//					syntax for values containing a comment close sequence
//				modified 12-12-12 by Daniel Smith, preserve data type of value
//				modified 13-01-14 by Daniel Smith, include trailing return on error result and accept
//					a value of "?"
//				modified 13-04-15 by Jeremy Bante, to not wrap numbers in GetAsNumber
//				modified 13-07-27 by Jeremy Bante, fix a type misidentification bug
//				modified 13-09-02 by Daniel Smith, fix a type misidentification bug
//				modified 13-12-12 by John Jones, explicitly encode line feed characters in text values
//				modified 13-12-24 by Jeremy Bante, return an error if name contains a carriage return,
//					remove explicit encoding for line feeds
//				modified 14-05-25 by Jeremy Bante, detect type using a different method suggested by
//					Arnold Kegebein
//				modified 14-06-06 by Jeremy Bante, fix an issue where long sequences of digits could
//					be interpreted as timestamps
//				modified 14-10-07 by Daniel Smith, prevent from returning an EvaluationError
//				1.13 modified 15-11-25 by Charles Ross, rework for custom function standards
// Notes:			https://github.com/filemakerstandards/fmpstandards/blob/master/Functions/%23Name-Value/%23.fmfn
// Todo:			To dos
// Example:		let.Set ( "name" ; "value" ) = "$name = \"value\" ;¶"

Let (
  [
    // strip leading "$$" and "$"
    _name = Substitute (
      "/*start*/" & _name ;
      [ "/*start*/$$"	; dev.Nil ] ;
      [ "/*start*/$"	; dev.Nil ] ;
      [ "/*start*/"		; dev.Nil ]
    ) ;

    _is_valid_date	= not EvaluationError ( GetAsDate ( _value ) ) ;
    _is_valid_time	= not EvaluationError ( GetAsTime ( _value ) ) ;
    _number		= GetAsNumber ( _value ) ;

    _value =  Case (
      dev.DataTypeMustBeText ( _value ) ;
      Quote ( _value ) ;

      _is_valid_date
        and _is_valid_time
        and dev.IsDataType ( _value ; "timestamp" ) ;
      "GetAsTimestamp ( " & Quote ( _value ) & " )" ;

      _is_valid_time
        and dev.IsDataType ( _value ; "time" ) ;
      "GetAsTime ( " & Quote ( _value ) & " )" ;

      _is_valid_date
        and dev.IsDataType ( _value ; "date" ) ;
      "GetAsDate ( " & Quote ( _value ) & " )" ;

      _value ≠ _number ;
      Quote ( _value ) ;

      _number
    ) ;

    _result = "$" & _name & " = " & _value & " ;¶" ;

    _test_expr = let.Enclose ( _result ) ;

    _error = Case (
      IsEmpty ( _name )
        or ( Position ( _name ; ¶ ; 1 ; 1 ) ≠ 0 ) ;
      err.NameNotValid ;

      not IsValidExpression ( _test_expr ) ;
      err.GenericCalcError
    ) ;

    // prevent bad pairs from affecting evaluation by commenting
    _err_msg = "/* Error " & _error & " name: " &
        let._EscapeComments ( _name ) & " value: " &
        let._EscapeComments ( _value ) & " */" & ¶ ;

    _result = Case (
      _error		; _err_msg
			; _result
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="185" name="list_____ Lists ____________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that assist with list manipulation.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="186" name="list.AppendIf"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.AppendIf
// Purpose:		Appends the value to the list if the condition is true.
// Parameters:		_list:			T?he list to conditionally append to
//				_value:		The value to append
//				_condition:	The condition to evaluate
// Requirements: 	list.Append
// Version:		1.0 - Charles Ross - 17-12-11
//				1.1 - Charles Ross - 19-09-24 - list.Append replaced with List function
// Notes:			Notes
// Todo:			To dos
// Example:		( list.AppendIf ( List ( 1 ; 2 ) ; 3 ; True ) = List ( 1 ; 2 ; 3 ) )
//				  and ( list.AppendIf ( List ( 1 ; 2 ) ; 3 ; False ) = List ( 1 ; 2 ) )

Case (
  _condition	; List ( _list ; _value )
			; _list
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="187" name="list.Concatenate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Concatenate ( _list_1; _list_2; _sep )
// Purpose:		Takes two lists with the same number of items and returns a new list with the matching
//				items in each of the lists concatenated with the separator between them.
// Parameters:		_list_1:	The first list.
//				_list_2:	The second list.
//				_sep:		The character (or string) to separate matching entries with.
// Requirements: 	lsts.First
//				lsts.Rest
// Version:		1.0 written 15-03-06 by Charles Ross
// Notes:			The lists being the same length is *not* a requirement. Blanks will be inserted for the
//				shorter list when there is a difference.
// Example:		list.Concatenate ( "1¶2¶3"; "A¶B¶C"; "-" ) = "1-A¶2-B¶3-C¶"

Case (
  // Recursive exit condition
  ( ValueCount ( _list_1 ) = 0 )
    and ( ValueCount ( _list_2 ) = 0 );		dev.Nil;

  Let(
    [
      _1_first = list.First ( _list_1 );
      _2_first = list.First ( _list_2 );

      _1_rest = list.Rest ( _list_1 );
      _2_rest = list.Rest ( _list_2 );

      _first = _1_first & _sep & _2_first;

      _list = _first & ¶ & list.Concatenate ( _1_rest; _2_rest; _sep )
    ];

    _list
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="188" name="list.CreateList"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.CreateList ( _text ; _separator )
// Purpose:		Returns a list where each item in the list is delineated by the _separator.
// Parameters:		_text:		The text to create the list from.
//				_separator:	The character that separates each item in the list.
// Version:		1.0 written 15-08-24 by Charles Ross
// Example:		list.CreateList ( "1,2,3" ; "," ) = List ( 1 ; 2 ; 3 )

Substitute ( _text ; _sep ; "¶" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="189" name="list.CustomList"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// lsts.CustomList ( _start; _end; _funciton )
//
// Purpose:		Return a list that applies the start and end values to the function's "[n]" token
//
// Parameters:		_start:	description
//              		_end:	description
//				_function:	description
//
// Requirements:	devp.Nil
//				sysk.PlatformIsGo
//				sysk.PlatformIsServer
//				sysk.PlatformIsWeb
//				txtp.StartsWith
//
// Author:			Agnès Barouh (filemaker@tictac.fr), Ugo Di Luca, Grazie Mille, cleanup by Charles Ross
// Version:		updated 08-07-01 by Agnès Barouh
//				updated 10-08-01 by Agnès Barouh to work with FM Go
//				updated 11-11-01 by Agnès Barouh to work with FM SErver
//				4.8 updated 12-11-01 by Agnès Barouh to work with IWP
//
// Notes:			Please, do not used "_custom_list_num" in your calculation with Let()
//
//				Build any list based on all Native or Custom Functions involving a 'Number' value
//				as a parameter, such as : Left(), Middle(), GetValue(), GetRepetitionNumber (),
//				GetNthRecord(), GetLayoutObjectAttribute () ... ex : -
//				CustomList ( 1 ; Get ( FoundCount ) ; "GetNthRecord ( FirstName ; [n] )" ) 
//				will return James¶Henry¶Susan if your foundset has 3 records.
//
//				Build any range based on Dates, Times, TimeStamps, and obviously Numbers
//				ex : CustomList ( 1 ; 5 ; "GetAsDate ( StartingDate ) + [n]" )
//				will return a range of 5 dates starting from the specified StartingDate
//
//				The 'Function' Parameter is nothing else than a litteral calculation expression. 
//				Therefore, CustomList allows for any filtering or parsing process based on any
//				condition you may need. ex : 
//				CustomList ( 10 ; 100 ;
//				  "Let ( [ Value = GetValue ( MyList ; [n] ) ] ; Case ( PatternCount ( Value ; "X" ) ; Value ))" )
//				will parse any value containing a "X" in  the 'MyList' chain, in between the 10th
//				and the 100th values.
//
//				CustomList is based on a totally new algorithm, and is now volontarily bridled
//				to a maximum range of 500,000 values, where the first version was technically
//				limited to a max of 18,700 values. Previous version still available here:
//				http://www.briandunning.com/cf/747
//
//				The new CustomList() is faster and still is NOT recursive. The arguments are
//				unchanged which makes it compatible with all your previous developments
//				involving CustomList().
//
//				For Developper ease, the new CustomList() includes a debugging mode. find
//				the "*****DEBUGGING MODE*****" tag in the formula below to switch mode.
//				When debug is set to 1, any error will be returned with its appropriate
//				explanatory code, else the result will be set to "?"
//
//				Basically, CustomList() does two things :
//				1: Transform your formula in a litteral chain :
//
//				CustomList ( 1; 4; "GetNthRecord ( Field ; [n])")
//				therefore becomes
//				"Let ( [ _custom_list_num = 1 ] ; GetNthRecord ( Field ; _custom_list_num ) ) & ¶ &
//				Let ( [ _custom_list_num = 2 ] ; GetNthRecord ( Field ; _custom_list_num ) ) & ¶ &
//				Let ( [ _custom_list_num = 3 ] ; GetNthRecord ( Field ; _custom_list_num ) ) & ¶ &
//				Let ( [ _custom_list_num = 4 ] ; GetNthRecord ( Field ; _custom_list_num ) )"
//
//				2: Evaluates this chain.
//
//				Interrested in the mechanism ?
//				My advice then : dissect this function by escaping the 'Result' and placing one
//				of the numerous intermediary variables available. Special attention should be
//				paid to the 'First' Variable, everything starts from there!
//
// Todo:			Other functions I've written that have placeholders, such as tmsp.FormatTimestamp,
//				use the percent character to represent the placeholder. Add that as an option to this.
//
// Example:
// list.CustomList ( 1 ; 5 ; "Date ( 3; 17; 2015 ) + [n]" ) =
//   "3/18/2015¶3/19/2015¶3/20/2015¶3/21/2015¶3/22/2015"

Case (
  // This function will not evaluate if Invalid parameters were passed for Start and End.
  IsEmpty ( _start )
    or IsEmpty ( _end )
    or ( _end < 1 )
    or ( _start < 1 );
  dev.Nil;

  Let (
    [
      _function = Substitute ( _function; "%n"; "[n]" );

      _start	= GetAsNumber ( _start );
      _end	= GetAsNumber ( _end );
      _diff	= _end - _start + 1;

      _version =  Case (
        platform.IsGo;		1;
        platform.IsServer;	2;
        platform.IsWeb;		3;
						0
      ) ;

      _stack_size = Choose (
        _version ;
        1700  ;	400 ;		300 ;		900
      ) ;

      // Check for a range higher than 500,000 values  ( max 150000 values for FmGo and
      // 120000 for FmS and 250000 for IWP ). For FMPro/Adv, CustomList() is volontarily
      // restrained to 500 000 but you can but you can go beyond.

      _end = Case (
        ( _diff > Choose ( _version ; 500000  ; 150000 ; 120000 ; 250000 ) )
          or ( _end < _start )
          or IsEmpty ( _start )
          or IsEmpty ( _end );
        "Error";
        _end
      );

      $_custom_list_nil = Quote ( dev.Nil );

      // CustomList has its own recursion model. As CustomList may be involved into the
      // "function" argument, each CustomList expression used is passed to a repeating
      // variable for evaluation

      _index = Let (
        [
          $_custom_list_execute_count = $_custom_list_execute_count + 1
        ];

        $_custom_list_execute_count & PatternCount ( _function ; "CustomList" ) + 1
      ) ;

      $_custom_list_n[ _index ]  = _start - 1;

      _calc = Case (
        _diff ≥ ( _stack_size - 10 ) ;	( _stack_size / 10 )  ;
							Floor ( _diff / 10 ) + 1
      );

      // Here starts the "magic" of the Substitutions and the whole mechanism.
      // CustomList() is set to evaluate stacks of 1,700 values at a time ( 400 for
      // FileMakerGo), which is the current limit of FileMaker internal Evaluate function

      _first							= Substitute ( ( 10 ^ _calc ) - 1; 9; "__________" ) ;  
      _x							= Floor ( _diff / _stack_size );
      $_custom_list_remainder[ _index ]	= _diff - ( _x * _stack_size );

      // When the "Function" argument is left empty, CustomList() will return a numeric
      // list based on the range defined

      _function_r = Case (
        IsEmpty ( _function );	"_custom_list_num";
						Substitute ( _function; ["[n]"; "_custom_list_num"] ; [¶ ; ""] )
      );

      // Each repeating variable content is parsed in order to get our String ready for the
      // last evaluation - Special care is made for French users here, please substitute
      // the "definir" below with your local translation of the "Let" function if you're not
      // using an english version. The use of "Let ([" is recommanded anyway

      // Removed localized "Let" translation.
      _normalized_fn = Substitute (
        Lower ( _function );
        [ " ";		dev.Nil ];
        [ "¶";		dev.Nil ]
      );
      _starts_with_let = text.StartsWith ( _normalized_fn ; "Let([" );

      _base_fn = "
        Let (
          [
            $_custom_list_n[<<index>>] = $_custom_list_n[<<index>>] + 1;" & "
            _custom_list_num = $_custom_list_n[<<index>>]";

      _base_fn = Substitute ( _base_fn; "<<index>>"; _index );
      _base_fn = _base_fn & Case (
        _starts_with_let;	";";
					"];"
      );

      _fn_append = Case (
        _starts_with_let;	Replace ( _function_r; 1; Position ( _function_r; "["; 1; 1 ); "" ) & "&\¶&¶";
					_function_r & ")&\¶&¶"
      );

      $_custom_list_execute[ _index ] = Substitute ( _first ; "_";  _base_fn & _fn_append );

      // Final compilation starts here. The reminder part above each 1,700 values is
      // treated now.
  
      _eval_1 = "
        Evaluate ( $_custom_list_execute[<<index>>] & $_custom_list_nil ) & ";
      _eval_1 = Substitute ( _eval_1; "<<index>>"; _index );

      _eval_2 = "
        Evaluate(
          LeftValues ( $_custom_list_execute[<<index>>] ; $_custom_list_remainder[<<index>>]  ) &
            $_custom_list_nil
        ) & " & $_custom_list_nil;
        _eval_2 = Substitute ( _eval_2; "<<index>>"; _index );

      _final = Case (
        _x > 0;
        Substitute ( ( 10 ^ _x ) - 1; 9; _eval_1 )
      ) & _eval_2;

      // The Final variable can now be evaluated to get our List

      _result  =   Case (
        _end <> "Error";
        Substitute (
          "#^#" & Evaluate  ( _final ) & "#^#";
          [ "#^#|#^#";	"¶"		];
          [ "¶";		"¶#^#"	];
          [ "#^#¶";		""		];
          [ "¶#^#";		"¶"		];
          [ "¶#^#";		""		];
          [ "#^#";		""		]
        )
      ) ;

      $_custom_list_execute[ _index ]  = dev.Nil ;
      $_custom_list_remainder [ _index ] = dev.Nil ;
      $_custom_list_nil = dev.Nil ;
      $_custom_list_execute_count = dev.Nil ;
      $_custom_list_n[ _index ] = dev.Nil

      // ----------- FUNCTION RESULT BELOW -----------
    ];


    // CustomList returns either the valid result, or an error formatted according to the debugging
    // mode chosen above

    Case (
      ( Length ( _result )
        and ( _result = Filter ( _result; "?" ) ) )
      or ( _end =  "Error" );
      Let (
        [
          /*****DEBUGGING MODE*****/

          // Case Debug = 1, returned error "[error_CL], Number, Name and Calculation error",
          // if Debug  <> 1, returned error is "?"

          _debug		= False ;
          _write		= Substitute ( _function; "[n]"; 1 );
          _num_error	= EvaluationError ( Evaluate ( _write ) );

          _error = "[" & _num_error & "] " &
            "Unlisted error | Unknown error, check calculation or check \"Start\" and \"End\" ¶" &
            "102 | Field is missing¶" &
            "103 | Relationship is missing¶" &
            "106 | Table is missing¶" &
            "113 | Function is missing¶" &
            "1204 | Number, text constant, field name or \"(\" expected¶" &
            "1205 | Comment is not terminated with \"*/\"¶" &
            "1206 | Text constant must end with a quotation mark¶" &
            "1207 | Unbalanced parenthesis¶" &
            "1208 | Operator or function missing or \"(\" not expected¶" &
            "1211 | List usage is not allowed in this function¶" &
            "1212 | An operator (for example, +, -, *,;) is expected here¶" &
            "1215 | This parameter is an invalid Get function parameter";
          _pos = ValueCount ( Left ( _error; Position ( _error; _num_error & " "; 1; 1 ) ) )
        ];

        Case (
          _debug = 1;	"[Error_CL]  | Return error : " & GetValue ( _error; Case ( _pos = 0; 1; _pos ) ) &
				  ¶ & TextStyleAdd ( "Calculation ( for [n] = 1 ) : "; Bold ) & _write;
				"?"
        )
      );

      _result
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="190" name="list.First"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.First ( _list )
// Purpose:		Return the first item of the passed list. Generally used to loop through a list.
// Parameters:		_list: The list to return the first item of
// Version:		1.0 written 15-03-11 by Charles Ross
// Example:		list.First ( "1¶2¶3" ) = "1"

GetValue ( _list; 1 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="191" name="list.FromFaux"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.FromFaux ( _faux )
// Purpose:		Convert the given faux list to a list
// Parameters:		_faux:	The faux list to convert
// Version:		20-02-01 - Charles Ross
// Example:		sample = result

list.CreateList ( _faux ; "\¶" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="192" name="list.Insert"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[/*// list.Insert ( _list ; _item ; _position )
// Purpose:		Inserts the item into the list at the position, padding the list if necessary with blank values.
// Parameters:		_list:		The list to insert the item into
//				_item:	The item to insert
//				_position:	The position to insert the item at
// Version:		1.0 - Jim Feuerstein - 17-03-08
// Example:		sample = result

Let (
  [
    _size = ValueCount ( _list ) ;

    _list = Case (
     _position > ( _size + 1 )	; _list
						; <Function Missing> ( _list ; _position - 1 )
    ) ;

    _pre	= LeftValues ( _list ; _position - 1 ) ;
    _post	= RightValues ( _list ; _size - _position + 1) ;

    _result = _pre & _item & "¶" & _post
  ] ;

  _result
)*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="193" name="list.Intersection"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Intersection ( _list_1; _list_2 )
// Purpose:		Returns the intersection of the two lists, that is, returns the members of the list that
//				exist in both.
// Parameters:		_list_1: A list
//              		_list_2: Another list
// Requirements: 	lsts.First
//				lsts.Rest
// Version:		1.0 written 15-03-11 by Charles Ross
// Example:
// list.Intersection ( "1¶2¶3"; "2¶3¶4¶5" ) = "2¶3"

Case (
  ValueCount ( _list_1 ) = 0; // The exit condition
  dev.Nil;

  Let (
    [
      _first	= list.First ( _list_1 );
      _rest	= list.Rest ( _list_1 );

      _rest_intersection = list.Intersection ( _rest; _list_2 );

      _result = Case (
        list.IsMember ( _first; _list_2 );		List ( _first; _rest_intersection );
								_rest_intersection
      )
    ];

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="194" name="list.IsMember"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.IsMember ( _item; _list )
// Purpose:		Returns True if _item is in _list. The surrounding paragraphs marks make sure that
//				we aren't returning true when the item exists as a substring within another item.
// Parameters:		_item:	The item to search for in the list.
//				_list:		This list to search
// Version:		1.0 - Charles Ross - 15-03-12
//				1.1 - Charles Ross - 17-09-10 - Simplify with use of `FilterValues`
// Example:		list.IsMember ( "1"; "1¶2¶3" )
//				  and ( not list.IsMember ( "4"; "1¶2¶3" ) )

not IsEmpty ( FilterValues ( _item ; _list ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="195" name="list.KeepItems"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.KeepItems ( _list ; _test )
// Purpose:		Return a list of items in the given list that pass the given test.
// Parameters:		_list:		The list of items to compare
//				_test:	The test to use on each item in the list
//				_type:	The type of data found in the list. Should be one of FileMaker's data types
// Version:		1.0 - Charles Ross - 19-08-12
// Notes:			Only type "Text" and "Number" are supported so far. "Date", "Time", and "Timestamp" coming soon.
//				_test should return a boolean value when "%t" is replaced by an item in the list.
// Todo:			To dos
// Example:		list.KeepItems ( List ( 1 ; 2 ; 3 ; 4 ) ; "Mod ( %t ; 2 ) = 0" ; "Text" ) = List ( 2 ; 4 )

While (
  [
    _result = dev.Nil ;
    _i = 0 ;

    _type = "Text" ;

    _ = ""
  ] ;

  _i ≤ ValueCount ( _list ) ;

  [
    _i = _i + 1 ;

    _item = GetValue ( _list ; _i ) ;
    _item = Case (
      _type = "Text"		; Quote ( _item )	;
      _type = "Number"	; _item
    ) ;

    _code = Substitute ( _test ; "%t" ; Quote ( _item ) ) ;
    _keep = Evaluate ( _code ) ;

    _result = Case (
      _keep	; List ( _result ; GetValue ( _list ; _i ) )
		; _result
    ) ;
 
    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="196" name="list.Last"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Last ( _list )
// Purpose:		Returns the last item in the given list
// Parameters:		_list:	The list to return the last item of
// Version:		1.0 - Charles Ross - 17-09-14
// Example:		list.Last ( List ( "one" ; "two" ; "three" ) ) = "three"

GetValue ( _list ; ValueCount ( _list ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="197" name="list.MaxDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.MaxDate
// Purpose:		Return the maximum value from a list of dates
// Parameters:		_list:	The list of dates to return the maximum value of
// Requirements: 	list.First
// Version:		1.0 - Charles Ross - 19-12-23
// Example:		

list.First ( SortValues ( _list ; const.DateDesc ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="198" name="list.MaxNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.MaxNumber
// Purpose:		Return the maximum value from a list of numbers
// Parameters:		_list:	The list of numbers to return the maximum value of
// Requirements: 	list.First
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		list.MaxNumber ( List ( 1 ; 9 ; 3 ; 2 ) ) = 9

list.First ( SortValues ( _list ; const.NumberDesc ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="199" name="list.MinDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.MinDate
// Purpose:		Return the minimum value from a list of dates
// Parameters:		_list:	The list of dates to return the minimum value of
// Requirements: 	list.First
// Version:		1.0 - Charles Ross - 19-12-23
// Example:		

list.First ( SortValues ( _list ; const.DateAsc ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="200" name="list.MinNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.MinNumber
// Purpose:		Return the minimum value from a list of numbers
// Parameters:		_list:	The list of numbers to return the minimum value of
// Requirements: 	list.First
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		list.MinNumber ( List ( 9 ; 1 ; 3 ; 2 ) ) = 1

list.First ( SortValues ( _list ; const.NumberAsc ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="201" name="list.NextValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.NextValue ( _list ; _item ; _loop )
// Purpose:		Given a list and an item in the list, return the next item in the list.
// Parameters:		_list:		The list to get the next value of
//				_item:	The current item
//				_loop:	If `True`, return the first item if the current item is the last
// Requirements: 	list.RemoveValue
//				list.ValuePosition
// Version:		1.0.0 - Charles Ross - 18-10-27
//				1.0.1 - Charles Ross - 18-10-29 - Return original item if on last item and loop is false
// Notes:			Removes dash values that might be present in value lists.
// Example:		list.NextValue ( List ( "one" ; "two" ; "three" ) ; "two" ; True ) = "three"

Let (
  [
    _list = list.RemoveValue ( _list ; "-" ) ;

    _pos = list.ValuePosition ( _item ; _list ; 1 ) + 1 ;
    _next_value = GetValue ( _list ; _pos ) ;

    _next_value = Case (
      _loop and IsEmpty ( _next_value )	; GetValue ( _list ; 1 ) ;
      IsEmpty ( _next_value )			; _item
								; _next_value
    ) ;

    _ = ""
  ] ;

  _next_value
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="202" name="list.Pop"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Pop ( _var_name )
// Purpose:		Pops the virst value off of the named variable and returns it.
// Parameters:		_var_name:	The name of the variable to pop the first value off of.
// Requirements: 	list.First
//				list.Rest
// Version:		1.0 written 15-03-11 by Geoff Coffey
// Notes:			http://sixfriedrice.com/wp/pop-goes-the%E2%80%A6um%E2%80%A6variable/
// Example:		Let (
//				  [
//				    $_var = "1¶2¶3";
//				    _first = list.Pop ( "$_var" )
//				  ];
//				  $_var
//				) = "2¶3"

Let (
  [
    _list	= Evaluate ( _var_name );
    _first	= list.First ( _list );

    _calc = "Let ( " & _var_name & " = list.Rest ( " & _var_name & " ); dev.Nil )";

    _ = Evaluate ( _calc )
  ];

  _first
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="203" name="list.Range"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Range ( _start ; _end )
// Purpose:		Return a list of numbers (or dates, etc.) that include the given range
// Parameters:		_start:	The smallest number in the range
//				_end:	The largest number in the range
// Version:		1.0 - Charles Ross - 19-08-31
// Example:		list.Range ( 0 ; 7 ) = List ( 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 )

While (
  [
    _result = dev.Nil ;
    _i = _start - 1  ;
    _ = ""
  ] ;

  _i < _end ;

  [
    _i = _i + 1 ;
    _result = List ( _result ; _i ) ;
    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="204" name="list.Remove"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Remove ( _list ; _position )
// Purpose:		Removes the item from the list at the position.
// Parameters:		_list:		The list to remove the item from
//				_position:	The position to remove the item from
// Version:		1.0 - Jim Feuerstein - 17-03-08
// Example:		list.Remove ( List ( 1 ; 2 ; 3 ; 4 ) ; 3 ) = List ( 1 ; 2 ; 4 ) & ¶

Let (
  [
    _size = ValueCount ( _list ) ;

    _pre	= LeftValues ( _list ; _position - 1 ) ;
    _post	= RightValues ( _list ; _size - _position ) ;

    _result = _pre & _post
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="205" name="list.RemoveBlanks"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.RemoveBlanks ( _list )
// Purpose:		Returns the passed list with blank items removed.
// Parameters:		_list:	The list to remove blanks from.
// Requirements: 	list.First
//				list.Rest
// Version:		1.0 written 15-09-12 by Charles Ross
// Example:		list.RemoveBlanks ( List ( 1 ; 2 & ¶ ; 3 ) ) = List ( 1 ; 2 ; 3 )

Case (
  ValueCount ( _list ) = 0 ;
  dev.Nil ;

  List (
    list.First ( _list ) ;
    list.RemoveBlanks ( list.Rest ( _list ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="206" name="list.RemoveValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.RemoveValue
// Purpose:		Removes all occurrences of value from the list
// Parameters:		_list:		The list to rmove the value from
//				_value:	The value to remove from the list
// Requirements: 	list.Subtract
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		list.RemoveValue ( List ( 1 ; 2; 3 ) ; 2 ) = List ( 1 ; 3 ) & ¶

list.Subtract ( _list ; _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="207" name="list.Replace"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Replace ( _list ; _item ; _position )
// Purpose:		Replaces the item in the list at the position with the passed item.
// Parameters:		_list:		The list to insert the item into
//				_item:	The item to replace
//				_position:	The position to insert the item at
// Requirements: 	list.Insert
//				list.Remove
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

list.Insert ( list.Remove ( _list ; _position ) ; _item ; _position )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="208" name="list.ReplaceSeparator"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ReplaceSeparator ( _list )
// Purpose:		Replaces the default list separator with the specified string. Can be used to convert a list
//				to some other data structure, such as a comma separated string.
// Parameters:		_list:		The list to process
//              		_string:	The string to use instead of a paragraph return
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		lsts.ReplaceSeparator ( "1¶2¶3"; ", " ) = "1, 2, 3"

Substitute( _list; "¶"; _string )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="209" name="list.ReplaceValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ReplaceValue ( _lsit ; _old ; _new )
// Purpose:		Replaces every occurrence of the old value in the list with the new value.
// Parameters:		_list:		The list to replace the items in.
//				_old:		The value to replace.
//				_new:	The value to replace it with.
// Requirements: 	list.ValuePosition
//				list.Replace
// Version:		1.0 - Charles Ross - 17-03-13
// Example:		list.ReplaceValue ( List ( "one" ; "two" ; "one" ; "four" ) ; "one" ; "1" ) = List ( 1 ; "two" ; 1 ; "four" ) & ¶

Case (
  not list.IsMember ( _old ; _list ) ;
  _list ;

  Let (
    [
      _pos = list.ValuePosition ( _old ; _list ; 1 ) ;

      _list = list.Replace ( _list ; _new ; _pos )
    ] ;

    list.ReplaceValue ( _list ; _old ; _new )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="210" name="list.Rest"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Rest ( _list )
// Purpose:		Returns the passed list with the first item removed. Usually used to loop through a list of
//				items.
// Parameters:		_list:	A list.
// Version:		1.0 written 15-03-12 by Charles Ross
// Note:			RightValues appends a return to the last item in the list. The List function, which seems
//				to be more commonly used, does not. Therefore this function lops off the last character
//				which should always be a carriage return.
// Example:		list.Rest ( "1¶2¶3" ) = "2¶3"

Let (
  [
    _list	= RightValues ( _list; ValueCount ( _list ) - 1 );
    _len	= Length ( _list )
  ];

  Left ( _list; _len - 1 )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="211" name="list.Reverse"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Reverse ( _list )
// Purpose:		Returns the list with the order of items reversed.
// Parameters:		_list:	The list with items to reverse the order of
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-09-14
// Example:		list.Reverse ( List ( "one" ; "two" ; "three" ) = List ( "three" ; "two" ; "one )

Let (
  [
    _count = ValueCount ( _list ) ;
    _last = GetValue ( _list ; _count ) ;
    _rest = LeftValues ( _list ; _count - 1 )
  ] ;

  Case (
    _count = 0 ;
    dev.Nil ;

    List ( _last ; list.Reverse ( _rest ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="212" name="list.Rotate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Rotate ( _list ; _offset )
// Purpose:		Rotate the list to the right for positive numbers and to the left for negative numbers
// Parameters:		_list:		The list to rotate
//				_offset:	The amount to rotate the list
// Version:		1.0 - Charles Ross - 19-08-31
// Notes:			Notes
// Todo:			To dos
// Example:		list.Rotate ( List ( 1 ; 2 ; 3 ) ; 1 ) = List ( 3 ; 1 ; 2 )
//				  and list.Rotate ( List ( 1 ; 2 ; 3 ; 4 ; 5 ) ; -2 ) = List ( 3 ; 4 ; 5 ; 1 ; 2 )

Let (
  [
    _count = ValueCount ( _list ) ;

    _offset = Case (
      _offset < 0		; _count + _offset ;
      _offset > _count	; Mod ( _offset ; _count )
				; _offset
    ) ;

    _prelim = RightValues ( _list ; _offset ) & LeftValues ( _list ; _count - _offset ) ;

    _result = Left ( _prelim ; Length ( _prelim ) - 1 ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="213" name="list.Shuffle"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Shuffle
// Purpose:		Return the given list with its items randomized.
// Parameters:		_list: The list of items to shuffle
// Requirements: 	random.ListItem
//				list.RemoveValue
// Version:		1.0 - Charles Ross - 19-01-23
// Example:		sample = result

Case (
  ValueCount ( _list ) = 0 ;
  dev.Nil ;

  Let (
    [
      _item = random.ListItem ( _list ) ;
      _list = list.RemoveValue ( _list ; _item ) ;

      _ = ""
    ] ;

    List (
      _item ;
      list.Shuffle ( _list )
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="214" name="list.Subtract"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Subtract ( _subtract_from ; _subtract )
// Purpose:		Returns the elements in _subtract_from that do not exist in _subtract.
// Parameters:		_subtract_from:		A list of items
//              		_subtract:			A list of items that should have at least some members in common with _list_1.
// Version:		15-03-11 - Charles Ross
//				19-12-20 - Charles Ross - Fix bug that left empty list items in the result
// Notes:			Is this the mathematical concept of relative complement?
// Example:		lsts.Subtract ( "1¶2¶3"; "2¶3¶4" ) = "1"
//				  and lsts.Subtract ( "2¶3¶4"; "1¶2¶3" ) = "4"

Case (
  ValueCount ( _subtract_from ) = 0;
  dev.Nil;

  Let (
    [
      _first = list.First ( _subtract_from );
      _rest = list.Rest ( _subtract_from );

      _is_member = list.IsMember ( _first; _subtract );

      _entry = Case (
        _is_member;	dev.Nil;
				_first
      )
    ];

    List ( _entry ; list.Subtract ( _rest; _subtract ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="215" name="list.ToFaux"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ToFaux ( _list )
// Purpose:		Convert the given list to a faux list
// Parameters:		_list:	The list to convert
// Version:		20-02-01 - Charles Ross
// Example:		sample = result

list.ReplaceSeparator ( _list ; "\¶" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="216" name="list.ToggleValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ToggleValue ( _list ; _value )
// Purpose:		Append the value to the list if it's absent from the list, remove it if present.
// Parameters:		_list:		The list to toggle the presence of the value
//				_value:	The value to toggle the presence within the list
// Requirements: 	list.IsMember
//				list.RemoveValue
// Version:		1.0 - Charles Ross - 18-02-09
//				1.0.1 - Charles Ross - 19-12-19 - Remove dependency on depricated `list.Append`
// Example:		list.ToggleValue ( list ( "one" ; "two" ; "three" ) ; "three" ) = List ( "one" ; "two" ) & ¶

Case (
  list.IsMember ( _value ; _list ) ;
  list.RemoveValue ( _list ; _value ) ;

  List ( _list ; _value )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="217" name="list.ValuePosition"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ValuePosition ( _item; _list )
// Purpose:		Returns which occurrence in the list the given item is at. In other words,
//				MiddleValues( TheList; ItemPosition( Item; TheList ); 1 ) = TheItem & "¶" (since
//				MiddleValues appends a carriage return to the end of it's return value).
// Parameters:		_list:			The list to search in
//				_item:		The item to search for
//				_start:		Which occurrence to begin looking at
// Version:		1.0 - Charles Ross 15-03-11
//				1.1 - Charles Ross - 17-09-10 - Changed to use Jim's algorithm
// Notes:			Add `occurrence` parameter.
// Example:		list.ValuePosition ( "4" ; "1¶2¶3¶4¶5" ; 1  ) = 4

Case (
  _start > ValueCount ( _list ) ;
  0 ;

  _item = GetValue ( _list ; _start ) ;
  _start ;

  list.ValuePosition ( _item ; _list ; _start + 1 )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="218" name="log_____ Log Module Functions ______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for easy manipulation of let notation strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="219" name="log.SystemState"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// log.SystemState
// Purpose:		Record the (nearly) complete state of the system in let-notation
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-18
// Notes:			Let-notation result has keys of `Get` function parameters with values of them being executed.
// Example:		sample = result

Case (
  // ========================================
  // Step 0: Setup
  IsEmpty ( $_log_systemstate_step ) ;
  Let (
    [
      $_log_systemstate_debug = False ;

      $_log_systemstate_get_params = List (
        "AccountExtendedPrivileges" ;
        "AccountName" ;
        "AccountPrivilegeSetName" ;
        "ActiveFieldName" ;
        "ActiveFieldTableName" ;
        "ActiveLayoutObjectName" ;
        "ActiveModifierKeys" ;
        "ActiveSelectionSize" ;
        "ActiveSelectionStart" ;
        "AllowAbortState" ;
        "ApplicationLanguage" ;
        "ApplicationVersion" ;
        "ConnectionAttributes" ;
        "ConnectionState" ;
        "CurrentHostTimestamp" ;
        "CurrentTimestamp" ;
        "CustomMenuSetName" ;
        "Device" ;
        "EncryptionState" ;
        "ErrorCaptureState" ;
        "FilePath" ;
        "FileMakerPath" ;
        "FoundCount" ;
        "HighContrastColor" ;
        "HighContrastState" ;
        "HostApplicationVersion" ;
        "HostIPAddress" ;
        "HostName" ;
        "InstalledFMPlugins" ;
        "LayoutAccess" ;
        "LayoutName" ;
        "LayoutTableName" ;
        "MultiUserState" ;
        "RecordAccess" ;
        "RecordID" ;
        "RecordNumber" ;
        "RecordOpenCount" ;
        "RecordOpenState" ;
        "PersistentID" ;
        "ScreenDepth" ;
        "ScreenHeight" ;
        "ScreenScaleFactor" ;
        "ScreenWidth" ;
        "ScriptName" ;
        "ScriptParameter" ;
        "ScriptResult" ;
        "SortState" ;
        "SystemIPAddress" ;
        "SystemLanguage" ;
        "SystemNICAddress" ;
        "SystemPlatform" ;
        "SystemVersion" ;
        "TotalRecordCount" ;
        "UserCount" ;
        "UserName" ;
        "UseSystemFormatsState" ;
        "WindowMode" ;
        "WindowHeight" ;
        "WindowLeft" ;
        "WindowName" ;
        "WindowOrientation" ;
        "WindowStyle" ;
        "WindowWidth" ;
        "WindowZoomLevel"
      ) ;

      $_log_systemstate_step = 1
    ] ;

    log.SystemState
  ) ;

  // ========================================
  // Step 1: Recursion
  $_log_systemstate_step = 1 ;
  Let (
    [
      _param = list.Pop ( "$_log_systemstate_get_params" ) ;

      $_log_systemstate_result = $_log_systemstate_result &
        let.Set ( _param ; Evaluate ( "Get ( " & _param & " )" ) ) ;

      $_log_systemstate_step = Case (
        ValueCount ( $_log_systemstate_get_params ) = 0	; 2
											; 1
      )
    ] ;
    log.SystemState
  ) ;

  // ========================================
  // Step 2: Cleanup
  $_log_systemstate_step = 2 ;
  Let (
    [
      _result = $_log_systemstate_result ;

      _ = Case (
        not $_log_systemstate_debug ;
        dev.ClearVars ( List ( "$_log_systemstate_debug" ; "$_log_systemstate_step" ; "$_log_systemstate_result" ; "$_log_systemstate_get_params" ) )
      ) ;

      // Step is always cleared regardless of debug mode.
      $_log_systemstate_step = dev.Nil
    ] ;
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="220" name="math_____ Math Functions ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that manipulate numbers in various ways.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="221" name="math.BaseToInteger"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.BaseToInteger ( _int_text; _base )
// Purpose:		Converts _number from the passed _base to base-10.
// Parameters:		_int_text:	An integer to convert.
//				_base:	The base to convert from.
// Requirements:	dev.Nil
// Version:		1.0 written 05-10-01 by Mikhail Edoshin
// Notes:			http://web.archive.org/web/20090707091229/
//				  http://edoshin.skeletonkey.com/2005/10/number_to_decim.html
// Example:		math.BaseToInteger ( "11F" ; 16 ) = 287

Case (
  IsEmpty ( _int_text )
    or ( _base < 2 )
    or ( _base > 36 );		dev.Nil;

  Let (
    [
      _len = Length ( _int_text );

      _chars			= data.Digits & data.Alphabet ;
      _pos			= Position ( _chars; Left ( _int_text; 1 ); 1; 1 );
      _digit_value	= ( _pos - 1 ) * ( _base ^ ( _len - 1 ) );
      _rest			= Right ( _int_text; _len - 1 );

      _result = _digit_value + math.BaseToInteger ( _rest; _base )
    ];
    
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="222" name="math.Format"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Format ( _number; _precision; _separator )
// Purpose:		Formats the number to the given precision with the given separator between thousands.
// Parameters:		_number: 		The number to format.
//				_precision:	The precision to format the number to, with dollars and cents, would
//							be 2, for example.
//				_separator:	The string to place between thousands.
// Author:			Agnès Barouh
// Version:		3.1 written 08-01-01
// Notes:			barouh.agnes@wanadoo.fr
//				The decimal separator should work for the locale it's run in.
// Example:		math.Format ( "69584" ; 2 ; " " ) = "69 584.00"

Let(
  [
    _rounded = Abs ( Round ( _number; _precision ) );

    _minus = Case (
      _number < 0;	"-";
				dev.Nil
    );

    _separated = Substitute (
      NumToJText ( Int ( _rounded ); 1; 0 );
      ",";	_separator
    );

    _decimal_separator = Filter ( 1 / 2; ".," ); // Will work based on locale.;

    // Fills precision with trailing zeros if needed.
    _frac = Middle ( _rounded - Int ( _rounded ) & Substitute ( ( 10 ^ _precision ) - 1; 9; 0 ); 2; _precision )
  ];
  
  Case (
    not IsEmpty ( _number );
   _minus & _separated &
    Case (
      _precision > 0;
      _decimal_separator & _frac
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="223" name="math.FormatCurrency"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.FormatCurrency ( _number )
// Purpose:		Converts the number to a currency representation of dollars and cents.
// Parameters:		_number:	The amount of money to represent.
// Requirements: 	numbers.Format
// Version:		1.0 written 15-03-11 by Charles Ross
// Example:		math.FormatCurrency ( 12345.67 ) = "$12,345.67"

"$" & math.Format ( _number; 2; "," )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="224" name="math.FormatOrdinal"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.FormatOrdinal ( _number )
// Purpose:		Returns the number as ordinal text ("1st", "3rd", etc.) with the ordinal text superscripted.
// Parameters:		_number:	The number to return as an ordinal.
// Author:			Vaughan Bromfield, Bob Weaver, LaRetta
// Version:		1.0 - Vaughan Bromfield, Bob Weaver, LaRetta
//				1.2 - 15-03-26 - make superscript a constant instead of string
// Notes:			The superscript feature was added by an unknown individual.
//				Adapted from http://www.briandunning.com/cf/737
// Example:		math.FormatOrdinal ( 4 ) = "4th" // with "th" as a superscript.

Let (
  [ 
    _style	= Superscript; // Can be made null to remove formatting
    _digit	= Int( GetAsNumber( _number ) );
    _tens	= Mod ( Abs( _digit ); 100 );

    _ordinal = Choose (
      Min ( 4 ; Mod ( _tens ; 10 ) ) * ( ( _tens < 11 ) or ( _tens > 13 ) );
      "th"; "st"; "nd"; "rd"; "th"
    )
  ];

  _digit & TextStyleAdd ( _ordinal; _style )

)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="225" name="math.Fractile"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Fractile ( _value ; _list ; _pieces )
// Purpose:		Which fractile does the value fall in when the list is sorted?
// Parameters:		_value:	The value to find the fractile for
//				_list:		The list that contains the value
//				_pieces:	How many pieces to break the list into
// Requirements: 	list.ValuePosition
//				math.RoundUpTo
// Version:		1.0 - Charles Ross - 17-12-13
// Example:		math.Fractile ( -10 ; List ( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; -10 ) ; 5 ) = 1

Let (
  [
    _list  = SortValues ( _list ; 2 ) ;

    _pos = list.ValuePosition ( _value ; _list ; 1 ) ;
    _count = ValueCount ( _list ) ;

    _fraction = _pos / _count
  ] ;

  math.RoundUpTo ( _fraction ; 1 / _pieces ) * _pieces
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="226" name="math.IntegerToBase"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IntegerToBase ( _int_text; _base )
// Purpose:		Converts an integer into a textual represention of the number in the given base.
// Parameters:		_int_text:	A textual representation of the integer in the tiven base
//				_base:	The base to convert from.
// Requirements: 	dev.Nil
// Version:		1.0 written 05-10-01 by Mikhail Edoshin
// Notes:			http://web.archive.org/web/20100117170354/
//				  http://edoshin.skeletonkey.com/2005/10/number_to_base.html
// Example:		math.IntegerToBase ( 287 ; 16 ) = "11F"

Case(
  IsEmpty ( _int )
    or ( _base < 2 )
    or ( _base > 36 )
    or ( Int ( _int ) ≠ _int ) ;		dev.Nil ;

  Let(
    [
      _chars = data.Digits & data.Alphabet ;

      _current_digit = Middle ( _chars ; Mod ( _int ; _base ) + 1 ; 1 )
    ];
    
    Case(
      _int ≥ _base;	math.IntegerToBase( Div ( _int ; _base ) ; _base )
    )  & _current_digit
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="227" name="math.IntegerToHex"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IntegerToHex ( _int )
// Purpose:		Converts an decimal integer into its hexadecimal form.
// Parameters:		_int:	The integer to convert.
// Requirements: 	nump.IntegerToBase
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		math.IntegerToHex ( 287 ) = "11F"

math.IntegerToBase ( _int ; 16 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="228" name="math.IsInteger"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IsInteger ( _number )
// Purpose:		Returns true if the number is an integer.
// Parameters:		_number:	The number to test for being an integer.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		( math.IsInteger ( 6 ) = 1 ) and ( math.IsInteger ( 3.14 ) = 0 )

dev.IsSet ( _number ) and ( Int ( _number ) = _number )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="229" name="math.IsNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IsNumber ( _value )
// Purpose:		Determine if the supplied value is numeric
// Parameters:		_value: The value to test.
// Version:		1.0 - Unknown - 15-03-11
// Notes:			Adapted from http://fmfunctions.com/functions_display_record.php?functionId=161
// Example:		math.IsNumber ( 0 ) and math.IsNumber ( -0 ) and math.IsNumber ( 0.1 ) and math.IsNumber ( 1 ) and math.IsNumber ( 1.2 )
//				  and math.IsNumber ( -1.2 ) and math.IsNumber ( 1.234e+124 ) and math.IsNumber ( -1.234e+124 )
//				  and math.IsNumber ( 10^50 ) and ( not math.IsNumber ( "abc" ) ) and ( not math.IsNumber ( "1.2.3" ) )
//				  and ( not math.IsNumber ( "0001" ) )

Let(
  [
    _decimal_separator = Middle( 3 / 2; 2; 1 ); // do some division to get separator

    _cleaned_value = Substitute(
      _value ;
      [ "e+" ;	"" ];
      [ "E+" ;	"" ];
      [ "e-" ;		"" ];
      [ "E-" ;		"" ]
    );

    _filtered_value = Filter( _cleaned_value; "1234567890-" & _decimal_separator );

    _decimal_count = PatternCount( _value; _decimal_separator )
  ];

  Exact( _filtered_value ; _cleaned_value )
    and ( Left( _value; 1 ) ≠ "0"
      or _value = "0"
      or Left( _value; 2 ) = "-0"
      or Left( _value; 2 ) = "0" & _decimal_separator
    )
    and _decimal_count ≤ 1
    and _value ≠ "-"
    and dev.IsSet ( _value )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="230" name="math.NextPeriodInstance"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.NextPeriodInstance ( _start ; _freq ; _current )
// Purpose:		Given a starting point and a frequency, return the next instance of the period at or above the
//				current value.
// Parameters:		_start:	The start of the period
//				_freq:	The frequency of the period
//				_current:	The current position
// Requirements: 	requirements
// Version:		19-12-23 - Charles Ross
// Example:		math.NextPeriodInstance ( 2 ; 5 ; 14 ) = 17
//				  and math.NextPeriodInstance ( 2 ; 1 ; 14 ) = 14
//				  and math.NextPeriodInstance ( 2 ; 2 ; 13 ) = 14

Let (
  [
    _diff = _current - _start ;
    _mod = Mod ( _diff ; _freq ) ;
    _addend = Mod ( _freq - _mod ; _freq ) ;

    _result = _current + _addend ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="231" name="math.Permutations"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Permutations ( _list )
// Purpose:		Return a list of pseudo-lists of the permutations of the given list.
// Parameters:		_list:	The list of items to permute.
// Version:		1.0 - Jed Verity
//				2.0 - Charles Ross - 18-09-05
// Notes:			https://www.briandunning.com/cf/208
// Todo:			To dos
// Example:		sample = result

// after first call, text looks like: text|sub(or)main|counter|subcounter|output

Let (
  [
    _nil = "" ;
    _first = not PatternCount ( _list ; "|" ) ;

    _p1 = Position ( _list ; "|" ; 1 ; 1 ) ;
    _pz = Position ( _list ; "|" ; 1 ; PatternCount ( _list ; "|" ) ) ;

    _output = Case (
      not _first	; Right ( _list ; Length ( _list ) - _pz - 1 )
			; _nil
    ) ;

    _v = Case (
      _first	; _list
		; Left( _list ; _p1 - 1 ) 
    ) ;

    _textvals = Case (
      not _first	; Substitute ( Middle ( _list ; _p1 + 1 ; _pz - _p1 - 1 ) ; "|" ; "¶" )
			; _nil
    ) ;

    _method = Case (
    not _first	; GetValue ( _textvals ; 1 )
			; _nil
    ) ;

    _c		= Case ( _first ; 1 ; GetValue ( _textvals ; 2 ) ) ;
    _cs	= Case ( _first ; 1 ; GetValue ( _textvals ; 3 ) )
  ] ;

  Case ( 
    _method = "sub" ;

    Case (_cs ≤ ValueCount(_v);

    Let (
      [
        _values_temp = _v 
;
        _counter_item		= MiddleValues ( _values_temp ; _c	; 1 ) ;
        _subcounter_item	= MiddleValues ( _values_temp ; _cs	; 1 ) ;

        _values_output = Substitute (
          Substitute (
            Substitute (
              _values_temp ;
              _counter_item ;
              Substitute (
                _subcounter_item ;
                "¶" ;
                _nil
              ) & "_zub¶" ) ;
              _subcounter_item ;
              _counter_item ) ;
            "_zub" ;
            _nil
          )
      ] ;

      math.Permutations (_values_output & "|main|" & _c+1 & "|0|" & _output) &
      math.Permutations (_v & "|sub|" & _c & "|" & _cs+1 & "|" & _output )

      )
    ) ;

    If (
      _c = ValueCount (_v);
      _output & _v & "¶"; 
      math.Permutations ( _v & Case (Right (_v;1) ≠ "¶";"¶") & "|sub|" & _c & "|" & _c & "|" & _output )
    ) & _output
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="232" name="math.RoundDownTo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.RoundDownTo ( _number; _precision )
// Purpose:		Rounds the number down to the nearest multiple of the precision.
// Parameters:		_number:		The number to round.
//				_precision:	The multiple to round to.
// Version:		1.0 - Mikhail Edoshin - 06-01-01
// Notes:			http://web.archive.org/web/20100122090742/
//				  http://edoshin.skeletonkey.com/2006/01/rounding_to_a_g.html
//				To round time use a precision that is the number of seconds you want to round to, for
//				example, a precision of 300 woiuld round to the nearest 15 minutes.
//				To round currency to the nearest quarter, use a precision of 0.25.
// Example:		( math.RoundDownTo ( 5; 2 ) = 4 )
//				  and ( math.RoundDownTo ( Time ( 1; 23; 45 ); 15 * 60 ) = Time ( 1; 15; 0 ) )

Floor( _number / _precision ) * _precision]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="233" name="math.RoundTo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.RoundTo ( _number; _precision )
// Purpose:		Rounds the number to the nearest multiple of the precision.
// Parameters:		_number:		The number to round.
//				_precision:	The multiple to round to.
// Version:		1.0 - Mikhail Edoshin - 06-01-01
// Notes:			http://web.archive.org/web/20100122090742/
//				  http://edoshin.skeletonkey.com/2006/01/rounding_to_a_g.html
//				To round time use a precision that is the number of seconds you want to round to, for
//				example, a precision of 300 woiuld round to the nearest 15 minutes.
//				To round currency to the nearest quarter, use a precision of 0.25.
// Example:		( math.RoundTo ( 5; 3 ) = 6 )
//				  and ( math.RoundTo ( Time ( 1; 23; 45 ); 15 * 60 ) = Time ( 1; 30; 0 ) )

Round( _number / _precision; 0 ) * _precision

/*Don't calculate the number of seconds: use the Time() function instead. For example, to round to an hour:

math.RoundTo( Time Field, Time( 1, 0, 0 ) )
to 15 minutes:

math.RoundTo( Time Field, Time( 0, 15, 0 ) )
You might also want to make a few constant custom functions: HOURS and MINUTES. These function must return Time( 1, 0, 0 ), Time( 0, 1, 0 ) respectively. (You could make a function for seconds, if you need them, but you'll need to select a name carefully, because Seconds is taken already.) With such functions your code will be more readable, like this:

math.RoundTo( Time Field, 2 * HOURS )

math.RoundTo( Time Field, 0.5 * HOURS )

math.RoundTo( Time Field, 15 * MINUTES )

math.RoundTo( Time Field, 1/2 * MINUTES )*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="234" name="math.RoundToSignificantDigits"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// nump.RoundToSignificantDigits ( _number ; _digits )
// Purpose:		Rounds the passed number to the passed significant digits.
// Parameters:		_number:	The number to round
//				_digits:	The number of significant digits to round to
// Version:		1.0 written 15-11-06 by Charles Ross
// Example:		( nump.RoundToSignificantDigits ( 12345.6789 ; 3 ) = 12300 )
//				  and
//				( nump.RoundToSignificantDigits ( 12345.6789 ; 6 ) = 12345.7 )

Let (
  [
    // Find out how many integer digits the number has
    _ceiling = Ceiling ( Log ( _number ) ) ;

    _precision = ( _ceiling * -1 ) + _digits ;

    _round = Round ( _number ; _precision )
  ] ;

  _round
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="235" name="math.RoundUpTo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.RoundUpTo ( _number; _precision )
// Purpose:		Rounds the number up to the nearest multiple of the precision.
// Parameters:		_number:		The number to round.
//				_precision:	The multiple to round to.
// Version:		1.0 - Mikhail Edoshin - 06-01-01
// Notes:			http://web.archive.org/web/20100122090742/
//				  http://edoshin.skeletonkey.com/2006/01/rounding_to_a_g.html
//				To round time use a precision that is the number of seconds you want to round to, for
//				example, a precision of 300 woiuld round to the nearest 15 minutes.
//				To round currency to the nearest quarter, use a precision of 0.25.
// Example:		( math.RoundUpTo ( 5; 2 ) = 2 )
//				  and ( math.RoundUpTo ( Time ( 1; 23; 45 ); 15 * 60 ) = Time ( 1; 30; 0 ) )

Ceiling( _number / _precision ) * _precision]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="236" name="math.StDev"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.StDev ( _list )
// Purpose:		Returns the standard deviation given a list of sampled data
// Parameters:		_list:	The list of sampled data
// Requirements:	lsts.RemoveBlanks
// Version:		1.0 written 15-09-12 by Charles Ross
// Example:		Round ( math.StDev ( List ( 5, 6, 7, 8 ) ) ; 2 ) = 1.29

Let (
  [
    _params = Substitute ( list.RemoveBlanks ( _list ) ; "¶" ; " ; " ) ;
    _calc = "StDev ( " & _params & " )" ;
    _stdev = Evaluate ( _calc ) ;

    _result = Case (
      ValueCount ( _list ) = 0 ;	0 ;
						_stdev
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="237" name="math.StDevP"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.StDevP ( _list )
// Purpose:		Returns the standard deviation given a list of population data
// Parameters:		_list:	The list of population data
// Requirements:	lsts.RemoveBlanks
// Version:		1.0 written 15-09-12 by Charles Ross
// Example:		Round ( math.StDevP ( List ( 5; 6; 7; 8 ) ) ; 2 ) = 1.12

Let (
  [
    _params = Substitute ( list.RemoveBlanks ( _list ) ; "¶" ; " ; " ) ;
    _calc = "StDevP ( " & _params & " )" ;
    _stdevp = Evaluate ( _calc ) ;

    _result = Case (
      ValueCount ( _list ) = 0 ;	0 ;
						_stdevp
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="238" name="math.Sum"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Sum ( _list )
// Purpose:		Returns the sum of a list of numbers.
// Parameters:		_list:	The list to produce the sum of.
// Requirements: 	lsts.First
//				lsts.Rest
// Version:		1.0 - Charles Ross - 15-03-06
// Notes:			Might it be better to write this as non-recursive, using Substitute to change the list to
//				something that could be passed to Evaluate?
// Example:		math.Sum ( List ( 1 ; 2 ; 3 ) ) = 6

Case (
  // Recursive exit condition.
  ValueCount ( _list ) = 0;	dev.Nil;

  Let (
    [
      _first = list.First ( _list );
      _rest = list.Rest ( _list );

      _result = GetAsNumber ( _first ) + math.Sum( _rest )
    ];

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="239" name="math.WeightedAverage"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.WeightedAverage ( _weights; _values )
//
// Purpose:		Given a list of weights and matching values, return the weighted average.
//
// Parameters:		_weights:	The weights that each member of the values list should have
//				_values:	The values to provide a weighted average of.
//
// Requirements: 	lsts.CustomList
//				lsts.Sum
//
// Author:			Charles Ross
// Version:		1.0 written 15-03-06
//
// Notes:			List sizes should match, but if they don't the longer one has zero values for excess
//				members.
//
//				Underlying math (LaTeX):
//				\bar{x} = \frac{ \sum_{i=1}^n w_i x_i}{\sum_{i=1}^n w_i}
//
// Example:
// math.WeightedAverage ( "10¶5¶"; "10¶40¶" ) = 20

Let (
  [
    _highest_count = Max ( ValueCount ( _weights ); ValueCount ( _values ) );

    // Create a list that multiplies each weight by its matching value.
    $_weighted_average_weights	= _weights;
    $_weighted_average_values		= _values;

    _code = "GetValue ( $_weighted_average_weights; %n ) * GetValue ( $_weighted_average_values; %n )";
    _products = list.CustomList ( 1; _highest_count; _code );

    _product_sum	= math.Sum( _products );
    _weight_sum		= math.Sum( _weights );

    $_weighted_average_weights	= dev.Nil;
    $_weighted_average_values		= dev.Nil;

    _result = _product_sum / _weight_sum
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="240" name="mode_____ Mode Constants ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Named constants for Get ( WindowMode ) return values]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="241" name="mode.Browse"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Browse
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate browse mode.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in browse mode...
//				Get ( WindowMode ) = mode.Browse

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="242" name="mode.Find"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Find
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate find mode.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in find mode...
//				Get ( WindowMode ) = mode.Find

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="243" name="mode.Layout"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Layout
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate layout mode.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in layout mode...
//				Get ( WindowMode ) = mode.Layout

4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="244" name="mode.Preview"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Preview
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate preview mode.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in preview mode...
//				Get ( WindowMode ) = mode.Preview

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="245" name="mode.Printing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Printing
//
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate printing mode.
//
// Author:			Charles Ross
// Version:		1.0 written 15-03-11
//
// Example:
// // When evaluated while the window is in printing mode...
// Get ( WindowMode ) = mode.Printing

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="246" name="modifier_____ Modifier Key Functions _______________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that make testing for modifier keys more readable.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="247" name="modifier.Alt"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Alt
// Purpose:		Returns the constant for the bit that is set when the alt (option) key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or option key is pressed...
//				modifier.Alt = 4
//				  and modifier.KeyActive ( modifier.Alt )

4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="248" name="modifier.BitIsSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.BitIsSet ( _number ; _bit )
// Purpose:		Returns True if the binary bit of the number is on.
// Parameters:		_number:	The number whose bit we are checking
//				_bit:		Which bit to check
// Version:		1.0 - Mikhail Edoshin - 05-11-01
// Notes:			http://web.archive.org/web/20100919220414/http://edoshin.skeletonkey.com/2005/11/custom_function.html
// Example:		mkey.BitIsSet ( 16; 5 ) = 1 // 16 = 10000 in binary
//				  and mkey.BitIsSet ( 18; 2 ) = 1 // 18 = 10010 oin binary
//				  and mkey.BitIsSet ( 18; 3 ) = 0

Mod ( Div ( _number ; 2 ^ ( _bit - 1 ) ) ; 2 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="249" name="modifier.CapsLock"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.CapsLock
// Purpose:		Returns the constant for the bit that is set when the caps lock key is on.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the caps lock key is active…
//				modifier.CapsLock = 2
//				  and modifier.KeyActive ( mkey.CapsLock )

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="250" name="modifier.Command"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Command
// Purpose:		Returns the constant for the bit that is set when the command (apple) key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or command key is pressed...
//				modifier.Command = 5
//				  and modifier.KeyActive ( modifier.Command )

5]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="251" name="modifier.Control"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Control
// Purpose:		Returns the constant for the bit that is set when the control key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or control key is pressed...
//				modifier.Control = 3
//				  and modifier.KeyActive ( modifier.Control )

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="252" name="modifier.KeyActive"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.KeyActive ( _key )
// Purpose:		Returns true when passed the custom function constant for the specified key.
// Parameters:		_key:		An integer from 1 to 5, can be encapsulated with appropriate custom
//						functions.
// Requirements:	mkey.BitIsSet
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When the shift and alt (or option) key is pressed...
//				modifier.KeyActive ( modifier.Shift )
//					and modifier.KeyActive ( modifier.Alt )

modifier.BitIsSet ( Get ( ActiveModifierKeys ) ; _key )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="253" name="modifier.Shift"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Shift
// Purpose:		Returns the constant for the bit that is set when the shift key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or shift key is pressed...
//				modifier.Shift = 1
//				  and modifier.KeyActive ( modifier.Shift )

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="254" name="msg_____ Messages __________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that generally are only useful to the developer, making his or her life a bit easier, hopefully.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="255" name="msg.ContactAdmin"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.ContactAdmin
// Purpose:		Returns the message to contact the administrator
// Version:		19-12-13 - Charles Ross
// Notes:			Used to store the string in only one place and to enable syntax checking
// Example:		msg.ContactAdmin = "Please contact an administrator."

"Please contact an administrator."]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="256" name="msg.ContactDev"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.ContactDev
// Purpose:		Returns the message to contact the developer
// Version:		19-12-13 - Charles Ross
// Notes:			Used to store the string in only one place and to enable syntax checking
// Example:		msg.ContactDev = "Please contact the developer."

"Please contact the developer."]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="257" name="msg.InsufficientPrivileges"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.InsufficientPrivileges
// Purpose:		Provides a single place to calculate the invalid parameters message
// Version:		1.0 - Charles Ross - 19-08-16
// Example:		sample = result

"You do not have sufficient privileges to " & dev.Default ( _action ; "perform that action" ) & "."]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="258" name="msg.InvalidConfigMessage"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.InvalidConfigMessage ( _module ; _reasons )
// Purpose:		Provides a single place to calculate the invalid parameters message
// Version:		1.0 - Charles Ross - 19-08-15
// Example:		msg.InvalidConfigMessage ( "accounts" ; "reasons" ) = "The accounts module is not properly cnfigured: reasons"

"The " & _module & " module is not properly cnfigured: " & _reasons]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="259" name="msg.InvalidParamsMessage"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.InvalidParamsMessage
// Purpose:		Provides a single place to calculate the invalid parameters message
// Version:		1.0 - Charles Ross - 19-08-15
// Example:		sample = result

"Invalid parameters were sent to " & Quote ( Get ( ScriptName ) ) & ". Pleasee contact the developer.¶¶" & Get ( ScriptParameter )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="260" name="path_____ File Paths _______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that manipulate file paths from one format to another.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="261" name="path.DesktopFilepath"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.DesktopFilepath ( _filename )
// Purpose:		Returns a platform-specific path to a filename on the desktop.
// Parameters:		_filename:		The name of the file to calculate a path to.
// Requirements: 	path.ProtocolPlatform
// Version:		1.0 - Charles Ross - 18-12-18
// Example:		sample = result

path.ProtocolPlatform & Get ( DesktopPath ) & _filename]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="262" name="path.DocumentsFilepath"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.DocumentsFilepath ( _filename )
// Purpose:		Returns a platform-specific path to a filename in the documents directory.
// Parameters:		_filename:		The name of the file to calculate a path to.
// Requirements: 	path.ProtocolPlatform
// Version:		1.0 - Charles Ross - 18-05-14
// Example:		sample = result

path.ProtocolPlatform & Get ( DocumentsPath ) & _filename]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="263" name="path.FileExtension"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.FileExtension ( _name )
// Purpose:		Given a file name, returns the extension, if any.
// Parameters:		_name:	The name of the file to get the extension from.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			An empty string is returned if there is no extension and the function works
//				correctly even if there are multiple periods in the file name and regardless
//				or the length of the extension.
// Example:		path.FileExtension ( "filename.txt" ) = "txt"

Let (
  [
    _dot_count		= PatternCount ( _name; "." );
    _last_dot_pos	= Position ( _name; "." ; 1; _dot_count );
    _ext_len		= Length ( _name ) - _last_dot_pos
  ];

  Case (
    _dot_count = 0;	dev.Nil;
				Right ( _name; _ext_len )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="264" name="path.FileMaker"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.FMPath ( _os_path )
// Purpose:		Converts an operating system specific path to a FileMaker format.
// Parameters:		_os_path:	The operating system specific path to convert.
// Requirements: 	The BaseElements plugin
//				txtp.TrimStart
//				path.ProtocolPlatform
//				sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Nicholas Orr - 11-06-03
// Notes:			http://www.goya.com.au/blog/guide-filemaker-import-paths
// Example:		sample = result

Let (
  [ 
    _users			= "/Users" ; 
    _users_len		= Length ( _users ) ; 
    _username		= text.TrimStart ( _os_path ; _users_len + 1 ) ; 
    _username		= Left ( _username ; Position ( _username ; "/" ; 1 ; 1 ) - 1 ) ; 
    _system_drive	= dev.SystemDrive ;
    _system_drive	= Left ( _system_drive ; Length ( _system_drive ) - 1 ) ; 
    _volume		= "/Volumes" ; 
    _volume_len		= Length ( _volume ) ; 
    _path_len		= Length ( _os_path ) ; 

    _is_filevault = platform.IsMac
      and ( Left ( _os_path ; _users_len ) = _users )
      and BE_FileExists ( _users &"/." & _username ) ; 

    _is_external_drive = ( Left ( _os_path ; _volume_len ) = _volume ) ;

    _external_path	= Right ( _os_path ; _path_len - _volume_len ) ; 
    _filevault_path	= Right ( _os_path ; _path_len - _users_len ) ; 

    _mac_path = Case (
      _is_external_drive ;	_external_path ;
      _is_filevault ;		_filevault_path ;
					_system_drive & _os_path
    ) ; 

    _win_path = _system_drive & Substitute ( _os_path ; "\\" ; "/" );

    _result = path.ProtocolPlatform & Case (
	platform.IsMac ;	_mac_path ;
        platform.IsWin ;	_win_path
    )
  ] ; 

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="265" name="path.Filename"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.Filename
// Purpose:		Return the filename given a file path
// Parameters:		_path:	The path to the file
//				_include_ext:	Boolean value, if True, return the extension as well.
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street
// Todo:			Extend funcitonality to work with Windows-based file paths
// Example:		sample = result

/* Copyright 2012 Magellan's Law Corporation

FUNCTION */

 Let (
  [ 
    _len = Length ( _path ) ; 
 
    // Get the location of the rightmost slash in the path -- this marks the end of the directory that encloses the file
    _pos = Position ( _path ; "/" ; _len ; -1 ) ; 
 
    // Calcuate the length of the filename and extension
    _len = _len - _pos ; 
 
    // Extract the rightmost characters of the path that contain the filename and extension
    _name = Right ( _path ; _len ) ;

    // Depending on the boolean, we either return the filename ( fn ) or return the result after removing the extension
    _result = Case (
      _include_ext	; _name
				; Left ( _name ; Position ( _name ; "." ; 1 ; 1 ) - 1 )
    )

  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="266" name="path.OperatingSystem"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.OSPath ( _fm_path )
// Purpose:		Converts a FileMaker style path into one native to the current OS.
// Parameters:		_fm_path:	The native FileMaker path to convert.
// Requirements: 	The BaseElements plugin
//				txtp.TrimStart
//				txtp.StartsWith
//				path.ProtocolFile
//				path.ProtocolPlatform
//				sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Nicholas Orr - 11-06-03
// Notes:			http://www.goya.com.au/blog/guide-filemaker-import-paths
// Example:		sample = result

Let (
  [ 
    _desktop			= text.TrimStart ( Get ( DesktopPath ) ; 1 ) ; 
    _users				= "/Users" ; 
    _username			= Left ( _desktop ; Position ( _desktop ; "/" ; 1 ; 1 ) - 1 ) ; 
    _system_drive		= Get ( SystemDrive ) ; 
    _system_drive_len		= Length ( _system_drive ) ; 
    _volumes			= "/Volumes" ; 

    _path = Case ( 
      text.StartsWith ( _fm_path ; path.ProtocolFile ) ;
      text.TrimStart ( _fm_path ; Length ( path.ProtocolFile ) ) ; 

      text.StartsWith ( _fm_path ; path.ProtocolPlatform ) ;
      text.TrimStart ( _fm_path ; Length ( path.ProtocolPlatform ) ) ; 

      _fm_path
    ) ; 

    _is_system	= text.StartsWith ( _path ; _system_drive ) ; 
    _is_filevault	= text.StartsWith ( _path ; "/" & _username )
      and BE_FileExists ( _users & "/." & _username ) ; 

    _system_path	= text.TrimStart ( _path ; _system_drive_len - 1 ) ; 
    _filevault_path	= _users & _path ; 

    _mac_path = Case (
      _is_filevault ;	_filevault_path ;
      _is_system ;	_system_path ;
				_volumes & _path
    ) ; 

    _win_path = text.TrimStart ( _path ; 1 );

    _result = Case (
      platform.IsMac ;	_mac_path ;
      platform.IsWin ;	_win_path
    )
  ] ; 

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="267" name="path.ParentFolder"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ParentFolder
// Purpose:		Return the parent folder of the supplied path
// Parameters:		_path:	The path to return the parent folder of
// Version:		1.0 - Charles Ross
// Notes:			This function does not query to operating system to determine whether the path is a
//				file or folder it can only use information within the path - such as the existence of a
//				trailing path separator
// Example:		path.ParentFolder ( "/Volumes/Macintosh HD/Users/" ) = "/Volumes/Macintosh HD/"

Let (
  [
    _mac_sep	= PatternCount ( _path ; "/" ) ;
    _win_sep	= PatternCount ( _path ; "\\" ) ;

    _sep = Case (
        _mac_sep > 0		; "/"
					; "\\"
    ) ;

    _ends_with_sep = ( Right ( _path ; 1 ) = _sep ) ;

    _parts = Substitute ( _path ; _sep ; ¶ ) ;

    _count = ValueCount ( _parts ) ;
    _count = Case (
      _ends_with_sep	; _count
				; _count - 1
    )
  ] ;

  Substitute ( LeftValues ( _parts ; _count - 1 ) ; ¶ ; _sep )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="268" name="path.POSIX"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.POSIX
// Purpose:		Returns the POSIX path given a path returned by FileMaker.
// Parameters:		_path:	The FileMaker path returned by one of the `Get` functions.
// Version:		1.0    - Charles Ross - 17-06-16
//				1.0.1 - Charles Ross - 17-10-20 - Update to work properly with FileMaker paths and on FMS
// Example:		path.POSIX ( Get ( DesktopPath ) ) = "/Users/chuck/Desktop/"

Substitute (
  _path ;
  [ dev.SystemDrive	; "/"		] ;
  [ "filemac:"		; dev.Nil	] ;
  [ "filewin:"		; dev.Nil	] ;
  [ "file:"			; dev.Nil	]
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="269" name="path.ProtocolFile"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolFile
// Purpose:		Returns the constant string that represents the protocol for file paths.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		path.ProtocolFile = "file:"

"file:"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="270" name="path.ProtocolMac"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolMac
// Purpose:		Returns the constant string that represents the protocol for Mac file paths.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		path.ProtocolMac = "filemac:"

"filemac:"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="271" name="path.ProtocolPlatform"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolPlatform
// Purpose:		Returns the constant string that represents the path protocol for the current platform.
// Requirements:	sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		// When running under OS X…
//				path.ProtocolPlatform = "filemac:"

Case (
  platform.IsMac ; path.ProtocolMac ;
  platform.IsWin ; path.ProtocolWin
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="272" name="path.ProtocolWin"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolWin
// Purpose:		Returns the constant string that represents the protocol for Windows file paths.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		path.ProtocolWin = "filewin:"

"filewin:"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="273" name="path.TemporaryFilepath"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.TemporaryFilepath ( _filename )
// Purpose:		Returns a platform-specific path to a filename in the temporary directory.
// Parameters:		_filename:		The name of the file to calculate a path to.
// Requirements: 	path.ProtocolFilePlatform
// Version:		1.0 - Charles Ross - 15-06-01
// Example:		sample = result

path.ProtocolPlatform & Get ( TemporaryPath ) & _filename]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="274" name="platform_____ Platform Functions ___________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for determining the current platform.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="275" name="platform.ArchitectureIs32"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.ArchitectureIs32
// Purpose:		Returns true when executed on a 32-bit intel-based system.
// Requirements: 	platform.Intel32
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		// When running on a Mac Core Duo…
//				plat.ArchitectureIs32 = True

Get ( ApplicationArchitecture ) = platform.Intel32]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="276" name="platform.Go"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.Go
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate iOS.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Go...
//				Get ( SystemPlatform ) = plat.Go

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="277" name="platform.Intel32"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.Intel32
// Purpose:		A constant of what is returned by Get ( ApplicationARchitecture ) when running on
//				Intel 32-bit.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		plat.Intel32 = "i386"

"i386"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="278" name="platform.IsDesktop"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsDesktop
// Purpose:		Returns true if the system is running on a traditional computer.
// Requirements: 	sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When the system is running on OS X or Windows...
//				plat.IsDesktop = 1

platform.IsMac or platform.IsWin]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="279" name="platform.IsGo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsGo
// Purpose:		Returns true if the system is running under FileMaker Go.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLATFORM_OVERRIDE_IPAD and
//				$$_PLATFORM_OVERRIDE_IPHONE to allow the developer to override the return
//				value during development and testing.
// Example:		// While running the system on an iPad or iPhone...
//				plat.IsGo = 1

( Get ( SystemPlatform ) = platform.Go )
  or $$_PLATFORM_OVERRIDE_IPAD
  or $$_PLATFORM_OVERRIDE_IPHONE]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="280" name="platform.IsiPad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsiPad
// Purpose:		Returns true if the system is running under on an iPad.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLATFORM_OVERRIDE_IPAD and to allow the
//				developer to override the return value during development and testing.
// Example:		// While running the system on an iPad...
//				plat.IsiPad = 1

( platform.VersionName = platform.VersioniPad )
  or $$_PLATFORM_OVERRIDE_IPAD]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="281" name="platform.IsiPhone"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsiPhone
// Purpose:		Returns true if the system is running under on an iPhone or iPod Touch.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLAT_OVERRIDE_IPHONE and to allow the
//				developer to override the return value during development and testing.
// Example:		// While running the system on an iPhone or iPod Touch...
//				sysk.PlatformIsiPhone = 1

( platform.VersionName = platform.VersioniPhone )
  or $$_PLATFORM_OVERRIDE_IPHONE]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="282" name="platform.IsLinux"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.IsLinux
// Purpose:		Returns True if the system is running under OS X.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLAT_OVERRIDE_IPAD and
//				$$_PLAT_OVERRIDE_IPHONE to allow the developer to override the return
//				value during development and testing.
// Example:		// While running the system on a Mac...
//				plat.IsMac = 1

( Get ( SystemPlatform ) = platform.Linux )
  and ( not $$_PLATFORM_OVERRIDE_IPAD )
  and ( not $$_PLATFORM_OVERRIDE_IPHONE )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="283" name="platform.IsMac"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsMac
// Purpose:		Returns True if the system is running under OS X.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLAT_OVERRIDE_IPAD and
//				$$_PLAT_OVERRIDE_IPHONE to allow the developer to override the return
//				value during development and testing.
// Example:		// While running the system on a Mac...
//				plat.IsMac = 1

( Get ( SystemPlatform ) = platform.Mac )
  and ( not $$_PLATFORM_OVERRIDE_IPAD )
  and ( not $$_PLATFORM_OVERRIDE_IPHONE )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="284" name="platform.IsServer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsServer
// Purpose:		Returns true if the system is running under on FileMaker Server.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// While running the system on FileMaker Server...
//				plat.IsServer = 1

platform.VersionName = platform.VersionServer]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="285" name="platform.IsWeb"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsWeb
// Purpose:		Returns true if the system is running under on CWP or WebDirect.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// While running the system on CWP or Webdirect...
//				plat.IsWeb = 1

platform.VersionName = platform.VersionWeb]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="286" name="platform.IsWin"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsWin
// Purpose:		Returns True if the system is running under Windows.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLAT_OVERRIDE_IPAD and
//				$$_PLAT_OVERRIDE_IPHONE to allow the developer to override the return
//				value during development and testing.
// Example:		// While running the system on Windows...
//				plat.IsWin = 1

( Get( SystemPlatform ) = platform.Win )
  and ( not $$_PLATFORM_OVERRIDE_IPAD )
  and ( not $$_PLATFORM_OVERRIDE_IPHONE )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="287" name="platform.Linux"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.Linux
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate Linux.
// Version:		1.0 - Charles Ross - 19-09-22
// Example:		// When evaluated while running under OS X...
//				Get ( SystemPlatform ) = plat.Mac

5]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="288" name="platform.Mac"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.Mac
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate OS X.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under OS X...
//				Get ( SystemPlatform ) = plat.Mac

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="289" name="platform.VersionAdvanced"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.VersionAdvanced
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Pro Advanced.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Pro Advanced...
//				Get ( ApplicationVersion ) = plat.VersionAdvanced

"ProAdvanced"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="290" name="platform.VersioniPad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.VersioniPad
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Go on an iPad.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Go on an iPad...
//				Get ( ApplicationVersion ) = plat.VersioniPad

"Go_iPad"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="291" name="platform.VersioniPhone"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.VersioniPhone
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Go on an iPhone or iPod Touch.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Go on an iPhone or iPod Touch
//				Get ( ApplicationVersion ) = plat.VersioniPhone

"Go"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="292" name="platform.VersionName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionName
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate Windows.
// Version:		1.0 - Charles Ross - 15-03-11
//				1.1 edited 15-07-12 corrected bug that caught underscore as word separator
// Example:		// When evaluated while running on the server…
//				platform.VersionName = platform.VersionName

GetValue ( Substitute ( Get ( ApplicationVersion ) ; " " ; "¶" ) ; 1 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="293" name="platform.VersionPro"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionPro
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Pro.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Pro...
//				Get ( ApplicationVersion ) = platform.VersionPro

"Pro"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="294" name="platform.VersionRuntime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionRuntime
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Runtime.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Runtime...
//				Get ( ApplicationVersion ) = platform.VersionRuntime

"Runtime"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="295" name="platform.VersionServer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionServer
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Server.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Server...
//				Get ( ApplicationVersion ) = platform.VersionServer

"Server"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="296" name="platform.VersionWeb"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionWeb
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate a web client.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under a web client...
//				Get ( ApplicationVersion ) = platform.VersionWeb

"Web"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="297" name="platform.Win"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.Win
//
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate Windows.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:
// // When evaluated while running under Windows...
// Get ( SystemPlatform ) = plat.Win

-2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="298" name="plugin_____ Plugin Functions _______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that deal with plugins in general.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="299" name="plugin.Attribute"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.Attribute ( _name; _attribute )
// Purpose:		Returns the plugin attribute at the given position.
// Parameters:		_name:	The name of the plugin to get the attribute of
//				_attribute:	Which attribute to return, "name", "version", or "status"
// Requirements:	list.CreateList
//				dev.Nil
// Version:		1.0.0 - Charles Ross - 15-04-19
//				1.1.0 - Charles Ross - 17-12-11 - Changed position parameter to attribute parameter
// Todo:			See if there's a way to make this function compatible with 11-.
// Example:		// Assuming ScriptMaster is installed and at version 4.32...
//				plugin.Attribute ( "360Works ScriptMaster"; "version" ) = 4.32

Let(
  [
    _position = list.ValuePosition ( _attribute ; List ( "name" ; "version" ; "status" ) ; 1 ) ;
    _plugins = Get ( InstalledFMPlugins ) ;

    _plugin_pos		= Position ( _plugins; _name; 1; 1 ) ;
    _before_name	= Left ( _plugins; _plugin_pos ) ;
    _pos_in_list		= PatternCount ( _before_name; "¶" ) + 1 ;
    _line			= GetValue ( _plugins; _pos_in_list ) ;
    _list			= list.CreateList ( _line ; ";" ) ;

    _result = GetValue ( _list; _position )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="300" name="plugin.Installed"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.Installed ( _name )
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-22
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

PatternCount ( Get ( InstalledFMPlugins ) ; _name ) > 0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="301" name="plugin.IsReady"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.IsReady ( _name )
// Purpose:		Returns True if the named plugin is installed and enabled.
// Parameters:		_plugin_name:	The name of the plugin to check for
// Requirements:	plugin.Attribute
// Version:		1.0 - Charles Ross - 15-03-08
//				1.1 - Charles Ross - 15-04-19 abstracted out plug.Attribute.
//				1.2 - Charles Ross - 19-09-22 - Use new plugin.Installed function
// Todo:			See if there's a way to make this function compatible with 11-.
// Example:		// Assuming ScriptMaster is installed and enabled...
//				plugin.IsReady ( "360Works ScriptMaster" ) = 1

plugin.Installed ( _name ) and ( plugin.Attribute ( _name; "status" ) = "Enabled" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="302" name="plugin.RegisterScriptMasterFunction"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[/*// plugin.RegisterScriptMasterFunction ( _signature; _code; _debug )
// Purpose:		Returns true the ScriptMaster function with the specified signature is already registered,
//				or gets successfully registered by this function. Returns false otherwise.
// Parameters:		_signature:	The signature of the function to register.
//				_code:		The Groovy code to execute for the function.
//				_debug:		Whether to force re-regerstering the function.
// Requirements: 	The ScriptMaster plugin, written with version 4.32.
// Version:		1.0 - Charles Ross - 15-04-19
// Example:		// See rgex.Match for an example of the use of this function.

Case (
  not plugin.IsReady ( "ScriptMaster" ) ;
  False ;

  // Register the function if it hasn't been already or if we're in debug mode.
  Case (
    not PatternCount ( <Function Missing> ; _signature ) or _debug ;
    <Function Missing> ( _signature ; _code ) ;

    // Return True if the function is already registered.
    True
  )
)*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="303" name="plugin.Version"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.Version ( _plugin_name )
// Purpose:		Returns True if the named plugin is installed and enabled.
// Parameters:		_plugin_name:	The name of the plugin to check for
// Requirements:	plugin.Attribute
// Version:		1.0.0 - Charles Ross - 15-04-16
//				1.1.0 - Charles Ross - 15-04-19 abstracted out plug.Attribute.
//				1.1.1 - Charles Ross - 17-12-11 - Updated for new version of plugin.Attribute.
// Todo:			See if there's a way to make this function compatible with 11-.
// Example:		// Assuming ScriptMaster is installed and at version 4.32...
//				plugin.Version ( "360Works ScriptMaster" ) = 4.32

Let(
  [
    _plugins = Get ( InstalledFMPlugins );

    _installed = PatternCount (
      _plugins;
      _name
    );

    _version = plugin.Attribute ( _name; "version" );

    _result = Case (
      _installed;	_version;
			0
    )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="304" name="psos_____ Perform Script on Server _________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that ease working with and debugging Perform Script on Server steps.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="305" name="psos.ConditionalOverride"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.ConditionalOverride
// Purpose:		Allows the developer to turn off performing scripts on the server by holding down the
//				shift key.
// Requirements: 	devp.IsDeveloper
//				modifier.KeyActive
//				modifier.KeyActive
//				psos.TurnOverrideOn
//				psos.TurnOverrideOff
// Version:		1.0 - Charles Ross - 15-04-22
// Example:		// Assuming a developer is logged in and holds down the shift key...
//				psos.ConditionalOverride and psos.IsOverridden

Case (
  dev.IsDeveloper
    and modifier.KeyActive ( modifier.Shift );
  psos.TurnOverrideOn;

  psos.TurnOverrideOff
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="306" name="psos.IsOverridden"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.IsOverridden
// Purpose:		Provides a syntax checkable way to see if performing scripts on the server should be
//				overridden.
// Requirements: 	Makes use of $$_OVERRIDE_PSOS global variable
// Version:		1.0 - Charles Ross - 15-04-10
// Notes:			The developer may override performing scripts on the server in order to step through a
//				script using the debugger. In production this should never return true.
// Example:		// If the developer has overridden performing scripts on the server...
//				psos.IsOverridden = 1

GetAsBoolean ( $$_OVERRIDE_PSOS )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="307" name="psos.ShouldPerformOnServer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.ShouldPerformOnServer
// Purpose:		Returns true if a script intended to run on the server can do so. Allows a script to
//				execute locally if needed or desired.
// Requirements: 	platform.IsServer
//				psos.IsOverridden
// Version:		1.0 - Charles Ross - 15-04-22
// Notes:			Three things must be true for this function to return true overall:
//				- The script this is called from is not currently running on the server
//				- The developer hasn't overridden performing scripts on the server
// Example:		// When all three conditions are true...
//				psos.ShouldPerformOnServer = 1

( not platform.IsServer )
  and
( not psos.IsOverridden )
  and
( Get ( MultiUserState ) = system.MultiUserStateClient )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="308" name="psos.TurnOverrideOff"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.TurnOverrideOff
// Purpose:		Turns overridding of performing scripts on server off.
// Requirements: 	Makes use of $$_OVERRIDE_PSOS global variable
//				dev.SetVarByName
// Version:		1.0 - Charles Ross - 15-04-10
// Notes:			The developer may override performing scripts on the server in order to step through a
//				script using the debugger. In production this should never return true.
// Example:		psos.TurnOverrideOff and ( not psos.IsOverridden )

dev.SetVarByName ( "$$_OVERRIDE_PSOS" ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="309" name="psos.TurnOverrideOn"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.TurnOverrideOn
// Purpose:		Turns overridding of performing scripts on server on.
// Requirements: 	Makes use of $$_OVERRIDE_PSOS global variable
//				dev.SetVarByName
// Version:		1.0 - Charles Ross - 15-04-10
// Notes:			The developer may override performing scripts on the server in order to step through a
//				script using the debugger. In production this should never return true.
// Example:		psos.TurnOverrideOn and psos.IsOverridden

dev.SetVarByName ( "$$_OVERRIDE_PSOS" ; True )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="310" name="random_____ Randomizers ____________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that will generate random data to be filled into fields.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="311" name="random.ListItem"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.ListItem ( _list )
// Purpose:		Return a random item from the given list.
// Parameters:		_list:	The list to return a random item from.
// Requirements: 	random.Number
// Version:		1.0 - Charles Ross - 19-01-23
// Example:		sample = result

GetValue ( _list ; random.Number ( 1 ; ValueCount ( _list ) ; 0 ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="312" name="random.Number"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.Number ( _min; _max; _precision )
// Purpose:		Returns a random number between low and high to the set precision.
// Parameters:		_min:		the low end of the number range
//				_max:		the high end of the number range
//				_precision:	similar to precision in Round ( number ; precision )
// Requirements:	data.Digits
// Author:			Mislav Kos <mkos@soliantconsulting.com>
// Version:		1.0 - Mislav Kos <mkos@soliantconsulting.com> - 14-10-15
//				1.1 - Charles Ross - 15-05-22
// Example:		random.Number ( 5; 10; 2 ) ≥ 5

Let (
  [ 
    // _low will be empty if low is not a valid number
    _min = GetAsNumber ( Filter ( _min ; data.Digits & "-." ) ) ;

    // _high will be empty if low is not a valid number
    _max = GetAsNumber ( Filter ( _max ; data.Digits & "-." ) ) ;  

    // default to 0 if precision is not a valid number
    _precision = GetAsNumber ( Filter ( _precision ; data.Digits & "-." ) ) ; 
    _precision = Case (
      not IsEmpty ( _precision ) ;	_precision ;
						0
    ) ; 
	
    _number = Round ( Random * ( _max - _min ) + _min ; _precision );

    _result = Case (
      not IsEmpty ( _min ) and not IsEmpty ( _max ) and _max ≥ _min ;
      _number
    )
  ] ; 

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="313" name="random.Password"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.Password
// Purpose:		Returns a randomly generated password of the given length.
// Parameters:		_len:		The length of the returned password
// Requirements: 	random.PasswordChar
// Version:		1.0 - Jim Feuerstein
// Example:		sample = result

Case (
  _len > 0 ;
  random.PasswordChar & random.Password ( _len - 1 ) 
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="314" name="random.PasswordChar"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.PasswordChar
// Purpose:		Returns a random alphanumeric character excluding "O" and "I"
// Requirements: 	data.Alphabet
//				data.Digits
//				random.Number
// Version:		1.0 - Charles Ross - 17-03-13
// Notes:			"O" and "I" are excluded to prevent abmiguity with "0" and "1"
// Example:		sample = result

Let (
  [
    _chars = Upper ( data.Alphabet ) & data.Digits ;
    _chars = Substitute (
      _chars ;
      [ "O" ; dev.Nil ] ;
      [ "I" ; dev.Nil ]
    ) ;

    _pos = random.Number ( 1 ; Length ( _chars ) ; 0 ) ;
    _result = Middle ( _chars; _pos ; 1 )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="315" name="range_____ Ranges __________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions dealing with the range data structure, which is an item a separator and another item greater
// than or equal to the first.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="316" name="range.Dates"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.Dates ( _date_1; _date_2 )
// Purpose:		Return a list of dates between the first and last date, inclusive.
// Parameters:		_date_1: The earlier date (will be corrected if not earlier)
//				_date_2: The later date (will be corrected if not later)
// Version:		1.0 - Charles Ross - 15-03-06
// Notes:			Check into generalizing this so that the data type isn't needed to be known.
// Example:		rang.Dates ( Date ( 3; 31; 2015 ); Date ( 4; 2; 2015 ) ) = "3/31/2015¶4/1/2015¶4/2/2015"

Let (
  [
    _date_1 = GetAsDate ( _date_1 );
    _date_2 = GetAsDate ( _date_2 );

    _earlier	= Min ( _date_1; _date_2 );
    _later	= Max ( _date_1; _date_2 )
  ];

  GetAsText ( _earlier ) &
  Case (
    _earlier = _later;	dev.Nil;
				"¶" & range.Dates ( _earlier + 1; _later )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="317" name="range.DatesYYYYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.DatesYYYYMMDD ( _date_1 ; _date_2 )
// Purpose:		Return a list of dates between the first and last date, inclusive, with each date in YYYYMMDD format.
// Parameters:		_date_1: The earlier date (will be corrected if not earlier)
//				_date_2: The later date (will be corrected if not later)
// Requirements: 	timestamp.Format
//				list.CustomList
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

Let (
  [
    $_range_dateyyyymmdd_list = range.Dates ( _date_1 ; _date_2 ) ;

    _code = "date.YYYYMMDD ( GetValue ( $_range_dateyyyymmdd_list ; %n ) )" ;

    _result = list.CustomList ( 1 ; ValueCount ( $_range_dateyyyymmdd_list ) ; _code ) ;

    $_range_dateyyyymmdd_list = dev.Nil
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="318" name="range.Integers"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.Integers ( _start ; _end )
// Purpose:		Returns a list of numbers from _start to _end, inclusive
// Parameters:		_start:	The start of the range of integers
//				_end:	The end of the range
// Version:		1.0 - Charles Ross - 17-07-23
// Notes:			No correct is made if start exceeds end, empty string returned.
// Example:		sample = result

Case (
  _start > _end	; dev.Nil ;
  _start = _end	; _start
			; List ( _start ; range.Integers ( _start + 1 ; _end ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="319" name="range.Weekdays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.Weekdays ( _date_1 ; _date_2 )
// Purpose:		Returns a list of the dates between the start and end dates (includsive) that are weekdays.
// Parameters:		_start:	The earlier date (will be corrected if not earlier)
//				_end:	The later date (will be corrected if not later)
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

list.Subtract ( range.Dates ( _start ; _end ) ; _ignore )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="320" name="range.WeekdaysYYYYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.WeekdaysYYYYMMDD ( _date_1 ; _date_2 ; _ignore )
// Purpose:		Return a list of weekdays between the first and last date, inclusive, with each date in YYYYMMDD format
//				excluding those in the ignore list.
// Parameters:		_start:	The earlier date (will be corrected if not earlier)
//				_end:	The later date (will be corrected if not later)
//				_ignore:	The list of dates to exclude.
// Requirements: 	timestamp.Format
//				list.CustomList
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

Let (
  [
    $_range_weekdaysyyyymmdd_list = range.Weekdays ( _start ; _end ; _ignore ) ;

    _code = "date.YYYYMMDD ( GetValue ( $_range_weekdaysyyyymmdd_list ; %n ) )" ;

    _result = list.CustomList ( 1 ; ValueCount ( $_range_weekdaysyyyymmdd_list ) ; _code ) ;

    $_range_weekdaysyyyymmdd_list = dev.Nil
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="321" name="repeat_____ Repeat Module Functions ________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions dealing with the range data structure, which is an item a separator and another item greater
// than or equal to the first.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="322" name="repeat.DateInAbsMonthlyDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInAbsMonthlyDef ( _date ; _start ; _freq ; _days )
// Purpose:		Return `True` if the date conforms to the absolute monthly repeating definition
// Parameters:		_date:	The date to check against the repeating defintion
//				_start:	The start date of the repeating definition
//				_freq:	The repeating definition's frequency
//				_days:	A list of the month day numbers the event should repeat on
// Requirements: 	list.IsMember
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

( Mod ( repeat.MonthDiff ( _start ; _date ) ; _freq ) = 0 )
  and list.IsMember ( Day ( _date ) ; _days )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="323" name="repeat.DateInAbsYearlyDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInAbsYearlyDef ( _date ; _start ; _freq )
// Purpose:		Return `True` if the date conforms to the absolute monthly repeating definition
// Parameters:		_date:	The date to check against the repeating defintion
//				_start:	The start date of the repeating definition
//				_freq:	The repeating definition's frequency
// Requirements: 	list.IsMember
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

( Mod ( Year ( _date ) - Year ( _start ) ; _freq ) = 0 )
  and Day ( _date ) = Day ( _start )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="324" name="repeat.DateInDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInDef ( _timestamp ; _repeat_def )
// Purpose:		Return `True` if the date of the timestamp satisfies the repetition definition
// Parameters:		_timestamp:	The timestamp to check for inclusion in the definition
//				_repeat_def:	The defintion of the event's repetition
// Requirements: 	let.Assign
//				repeat.DateInWeeklyDef
//				repeat.DateInAbsMonthlyDef
//				repeat.DateInRelMonthlyDef
//				repeat.DateInAbsYearlyDef
//				repeat.DateInRelYearlyDef
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

Let (
  [
    _ = let.Assign ( _repeat_def ) ;
    _ts_date = GetAsDate ( _timestamp ) ;
    _start_date = GetAsDate ( $start ) ;
    _diff = _ts_date - _start_date ;

    _result = Case (
      _timestamp < $start ;
      False ;

      $type = "continuous" ;
      True ;

      $type = "daily" ;
      Mod ( _diff ; $freq ) = 0 ;

      $type = "weekly" ;
      repeat.DateInWeeklyDef ( _ts_date ; _start_date ; $freq ; $weekdays ) ;

      $type = "abs monthly" ;
      repeat.DateInAbsMonthlyDef ( _ts_date ; _start_date ; $freq ; $days ) ;

      $type = "rel monthly" ;
      repeat.DateInRelMonthlyDef ( _ts_date ; _start_date ; $freq ; $ordinal ; $day ) ;

      $type = "abs yearly" ;
      repeat.DateInAbsYearlyDef ( _ts_date ; _start_date ; $freq ) ;

      $type = "rel yearly" ;
      repeat.DateInRelYearlyDef ( _ts_date ; _start_date ; $freq ; $ordinal ; $day ) ;
    ) ;
    
    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="325" name="repeat.DateInLastDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInLastDef ( _date ; _ordinal )
// Purpose:		Return `True` if the given datee conforms the the lasst description
// Parameters:		_date:		The date to confirm conformance to the ordinal description
//				_day_desc:	A description of the day the event should repeat on, either a weekday name or, "weekday",
//							"weekend day", or "day". 
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

Let (
  [
    _in_last_week = _date ≥ ( date.EndOfMonth ( _date ) - 6 ) ;

    _is_valid_day_name = list.IsMember ( _day_desc ; data.Weekdays )
      and ( DayName ( _date ) = _day_desc ) ;

    _is_valid_day = ( _day_desc = "day" )
      and ( _date = date.EndOfMonth ( _date ) ) ;

    _is_valid_weekday = ( _day_desc = "weekday" )
      and ( Day ( _date ) > 1 )
      and ( Day ( _date ) < 7 ) ;

    _is_valid_weekend_day = ( _day_desc = "weekend day" )
      and (
        ( Day ( _date ) = 1 )
          or ( Day ( _date ) = 7 )
      ) ;

    _ = ""
  ] ;

  _in_last_week and
  (
    _is_valid_day_name
      or _is_valid_day
      or _is_valid_weekday
      or _is_valid_weekend_day
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="326" name="repeat.DateInOrdinalDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInOrdinalDef ( _date ; _ordinal ; _day_desc )
// Purpose:		Return `True` if the given date conforms the the ordinal description
// Parameters:		_date:		The date to confirm conformance to the ordinal description
//				_ordinal:		One of the first five ordinal words or the word "last"
//				_day_desc:	A description of the day the event should repeat on, either a weekday name or, "weekday",
//							"weekend day", or "day". 
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

Case (
  _ordinal = "last" ;
  repeat.DateInLastDef ( _date ; _day_desc ) ;

  Let (
    [
      _pos = list.ValuePosition ( _ordinal ; data.Ordinals ; 1 ) ;
      _day = Day ( _date ) ;

      _month = Month ( _date ) ;
      _year = Year ( _date ) ;

      _is_valid_weekday_name = list.IsMember ( _day_desc ; data.Weekdays )
        and ( DayName ( _date ) = _day_desc )
        and ( _day ≥ ( ( _pos - 1 ) * 7 ) + 1 )
        and ( _day ≤ ( _pos * 7 ) ) ;

      _is_valid_day = ( _day_desc = "day" )
        and ( _day = _pos ) ;

      _is_valid_weekday = ( _day_desc = "weekday" )
        and ( list.ValuePosition ( _date ; repeat.Weekdays ( _month ; _year ) ; 1 ) = _pos ) ;

      _is_valid_weekend_day = ( _day_desc = "weekend day" )
        and ( list.ValuePosition ( _date ; repeat.WeekendDays ( _month ; _year ) ; 1 ) = _pos ) ;

      _ = ""
    ] ;

    _is_valid_weekday_name
      or _is_valid_day
      or _is_valid_weekday
      or _is_valid_weekend_day
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="327" name="repeat.DateInRelMonthlyDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInRelMonthlyDef ( _date ; _ordinal ; _day_desc )
// Purpose:		Return `True` if the given date conforms the the ordinal description
// Parameters:		_date:		The date to confirm conformance to the ordinal description
//				_start:		The timestamp when the event begins to repeat
//				_freq:		The frequency in months that the event repeatss
//				_ordinal:		One of the first five ordinal words or the word "last"
//				_day_desc:	A description of the day the event should repeat on, either a weekday name or, "weekday",
//							"weekend day", or "day". 
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

( Mod ( repeat.MonthDiff ( _start ; _date ) ; _freq ) = 0 )
  and
Case (
  _day_desc = "last" ;
  repeat.DateInLastDef ( _date ; _day_desc ) ;

  repeat.DateInOrdinalDef ( _date ; _ordinal ; _day_desc )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="328" name="repeat.DateInRelYearlyDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInRelMonthlyDef ( _date ; _ordinal ; _day_desc )
// Purpose:		Return `True` if the given date conforms the the ordinal description
// Parameters:		_date:		The date to confirm conformance to the ordinal description
//				_start:		The timestamp when the event begins to repeat
//				_freq:		The frequency in months that the event repeatss
//				_ordinal:		One of the first five ordinal words or the word "last"
//				_day_desc:	A description of the day the event should repeat on, either a weekday name or, "weekday",
//							"weekend day", or "day". 
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

( Mod ( Year ( _start ) - Year ( _date ) ; _freq ) = 0 )
  and
Case (
  _day_desc = "last" ;
  repeat.DateInLastDef ( _date ; _day_desc ) ;

  repeat.DateInOrdinalDef ( _date ; _ordinal ; _day_desc )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="329" name="repeat.DateInWeeklyDef"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.DateInWeeklyRepeatDef
// Purpose:		Return `True` if the given date is part of the weekly repeating definition
// Parameters:		_date:		The date to check against the repeating defintion
//				_start:		The start date of the repeating definition
//				_freq:		The repeating definition's frequency
//				_weekdays:	Optional: A list of the weekday numbers the event should repeat on
// Requirements: 	dev.IsSet
//				list.IsMember
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

Case (
  dev.IsSet ( _weekdays ) ;
  Let (
    [
      _new_start = _start + ( _freq * 7 )
    ] ;

    ( _date ≥ _new_start )
      and ( _date < ( _new_start + 7 ) )
      and list.IsMember ( DayOfWeek ( _date ) ; _weekdays )
  ) ;

  Mod ( _date - _start ; _freq * 7 ) = 0
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="330" name="repeat.MonthAsNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.MonthAsNumber ( _date )
// Purpose:		Represent a month as the number of months since 1/1/1
// Parameters:		_date:	The date to convert ass a number
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

Month ( _date ) + ( ( Year ( _date ) - 1 ) * 12 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="331" name="repeat.MonthDiff"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.MonthDiff ( _date_1 ; _date_2 )
// Purpose:		Return the number of months between the two dates regardless of the days of each one.
// Parameters:		_date_1:	The first date
//				_date_2:	The second date
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-02
// Example:		sample = result

repeat.MonthAsNumber ( _date_2 ) - repeat.MonthAsNumber ( _date_2 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="332" name="repeat.Ordinal"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.Ordinal ( _ordinal ; _day ; _month ; _year )
// Purpose:		Return the date described by the ordinal and day type for the given month and year
// Parameters:		_ordinal:	An ordinal description, "first" through "fifth" or "last"
//				_day:		A weekday name or "day", "weekday", or "weekend day"
//				_month:	The name of a month
//				_year:	The year
// Requirements: 	list.ValuePosition
//				date.MonthNumber
//				date.WeekdayNumber
// Version:		1.0 - Charles Ross - 19-08-27
// Notes:			If the ordinal is "last" and the last weekday doesn't exist in the month, an empty string
//				is returned
// Todo:			To dos
// Example:		date.Ordinal ( "first" ; "Sunday" ; "August" ; 2019 ) = Date ( 8 ; 4 ; 2019 )

Let (
  [
    _pos = list.ValuePosition ( _ordinal ; List ( data.Ordinals ; "last" ) ; 1 ) ;
    _month_num = date.MonthNumber ( _month )
  ] ;

  Case (
    not list.IsMember ( _day ; List ( "day" ; "weekday" ; "weekend day" ) ) ;
    Let (
      [
        _day = date.WeekdayNumber ( _day ) ;
        _month = date.MonthNumber ( _month ) ;

        _earliest = Case (
            _pos = 6	; date.EndOfMonth ( Date ( _month ; _day ; _year ) ) - 6
				; Date ( _month ; ( ( _pos - 1 ) * 7 ) + 1 ; _year )
         ) ;

        _weekdays = list.Rotate ( list.Reverse ( list.Range ( 0 ; 6 ) ) ; _day ) ;
        _adjustment = GetValue ( _weekdays ; DayOfWeek ( _earliest ) ) ;
        _prelim = _earliest + _adjustment ;

        _result = Case (
          Month ( _prelim ) = _month	; _prelim
							; dev.Nil
        )
      ] ;

      _result
    ) ;

    _day = "day" ;
    Case (
      _pos = 6	; date.EndOfMonth ( Date ( _month_num ; 1 ; _year ) )
			; Date ( _month_num ; _pos ; _year )
    ) ;

    _day = "weekday" ;
    Let (
      [
        _weekdays = repeat.Weekdays ( _month_num ; _year ) ;
        _result = Case (
          _pos = 6	; GetValue ( _weekdays ; ValueCount ( _weekdays ) - 1 )
			; GetValue ( _weekdays ; _pos )
        )
      ] ;

      _result
    ) ;

    _day = "weekend day" ;
    Let (
      [
        _weekend_days = repeat.WeekendDays ( _month_num ; _year ) ;
        _result = Case (
          _pos = 6	; GetValue ( _weekend_days ; ValueCount ( _weekend_days ) - 1 )
			; GetValue ( _weekend_days ; _pos )
        )
      ] ;

      _result
    ) ;
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="333" name="repeat.Weekdays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.Weekdays ( _month ; _year )
// Purpose:		List the days of the weekdays in the given month and year
// Parameters:		_month:	The month number to list the dates of
//				_year:	The year number to list the dates of
// Version:		1.0 - Charles Ross - 19-08-28
// Example:		sample = result

While (
  [
    _date = Date ( _month ; 1 ; _year ) ;
    _result = dev.Nil ;
    _ = ""
  ] ;

  Month ( _date ) = _month ;

  [
    _result = List (
      _result ;
      Case (
        DayOfWeek ( _date ) > 1 and DayOfWeek ( _date ) < 7 ;
        _date ;
        dev.Nil
      )
    ) ;
    _date = _date + 1 ;
    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="334" name="repeat.WeekendDays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// repeat.WeekendDays ( _month ; _year )
// Purpose:		List the days of the weekend days in the given month and year
// Parameters:		_month:	The month number to list the dates of
//				_year:	The year number to list the dates of
// Version:		1.0 - Charles Ross - 19-08-28
// Example:		sample = result

While (
  [
    _date = Date ( _month ; 1 ; _year ) ;
    _result = dev.Nil ;
    _ = ""
  ] ;

  Month ( _date ) = _month ;

  [
    _result = List (
      _result ;
      Case (
        DayOfWeek ( _date ) = 1 or DayOfWeek ( _date ) = 7 ;
        _date ;
        dev.Nil
      )
    ) ;
    _date = _date + 1 ;
    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="335" name="rgb_____ RGB Extracts ______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that deal with RGB values.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="336" name="rgb.Blue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// rgb.Blue ( _rgb )
// Purpose:		Returns the blue value (0-255) of a given RGB value.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		rgb.Blue ( RGB ( 1; 2; 3 ) ) = 3

Mod( _rgb; 256 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="337" name="rgb.Green"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// rgb.Green ( _rgb )
// Purpose:		Returns the green value (0-255) of a given RGB value.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		rgb.Green ( RGB ( 1; 2; 3 ) ) = 2

Int( ( _rgb - ( rgb.Red( _rgb ) * 65536 ) ) / 256 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="338" name="rgb.Red"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// rgb.Red ( _rgb )
// Purpose:		Returns the red value (0-255) of a given RGB value.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		rgb.Red ( RGB ( 1; 2; 3 ) ) = 1

Int( _rgb / 65536 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="339" name="schema_____ Schema Introspection ___________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that deal with the file schema.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="340" name="schema.BaseTableNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.BaseTableNames
// Purpose:		Returns the base table names, as opposed to `TableNames`, which returns TO names
// Version:		1.0 - Charles Ross - 17-07-24
//				1.1 - Charles Ross - 17-07-29 - Restrict to local base tables
//				1.2 - Charles Ross - 17-08-09 - Added logic to correctly return results when file is served
// Example:		sample = result

Let (
  [
    _sql = "SELECT DISTINCT BaseTableName FROM FileMaker_Tables WHERE BaseFileName = ?" ;

    // When the file is served, the `BaseFileName` field stores the actually filename followed by the host name
    // in parentheses.
    _host = Case (
      Get ( MultiUserState ) = system.MultiUserStateClient ;
      " (" & Get ( HostName ) & ")" ;
      dev.Nil
    ) ;

    _criteria = Get ( FileName ) & _host ;

    _result = ExecuteSQL (
      _sql ;
      dev.Nil ; dev.Nil ;
      _criteria
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="341" name="schema.DataFieldNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.DataFieldNames ( _table )
// Purpose:		Returns the names of the fields in the given table that store data, i.e., excluding
//				calculations, summaries, globals, etc.
// Parameters:		_table:	The name of the table to return the data fields of
// Requirements:	list.CustomList
//				schema.FieldNames
//				schema.FieldStorageType
//				dev.ClearVars
// Version:		1.0 - Charles Ross - 17-07-24
//				1.1 - Charles Ross - 17-08-01 - Updated to remove use of list.CustomList, recursive instead.
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  // ========================================
  // Step 0: Setup
  IsEmpty ( $_schema_datafieldnames_step ) ;
  Let (
    [
      $_schema_datafieldnames_debug = False ;
      $_schema_datafieldnames_step = 1 ;

      $_schema_datafieldnames_fieldnames = schema.FieldNames ( _table )
    ] ;

    schema.DataFieldNames ( _table )
  ) ;

  // ========================================
  // Step 1: Recursion
  $_schema_datafieldnames_step = 1 ;
  Let (
    [
      _valid_storage_types = List (
        "Standard" ;
        "External(Open)" ;
        "External(Secure"
      ) ;

      _field_name = list.Pop ( "$_schema_datafieldnames_fieldnames" ) ;
      _qualified_field_name = _table & "::" & _field_name ;
      _storage_type = schema.FieldStorageType ( _qualified_field_name ) ;

      $_schema_datafieldnames_result = Case (
        dev.IsSet ( _field_name ) and list.IsMember ( _storage_type ; _valid_storage_types ) ;
        List ( $_schema_datafieldnames_result ; _field_name ) ;
        $_schema_datafieldnames_result
      ) ;

      $_schema_datafieldnames_step = Case (
        IsEmpty ( _field_name )	; 2
						; 1
      )
    ] ;

    schema.DataFieldNames ( _table )
  ) ;

  // ========================================
  // Step 2: Cleanup
  $_schema_datafieldnames_step = 2 ;
  Let (
    [
      _result = $_schema_datafieldnames_result ;

      _ = Case (
        not $_schema_datafieldnames_debug ;
        dev.ClearVars ( List (
          "$_schema_datafieldnames_debug" ;
          "$_schema_datafieldnames_fieldnames" ;
          "$_schema_datafieldnames_result"
        ) )
      ) ;

      // Step is always cleared regardless of debug mode.
      $_schema_datafieldnames_step = dev.Nil ;

      _ = ""
    ] ;
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="342" name="schema.FieldDataType"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldDataType ( _field )
// Purpose:		Returns a text string describing the field's data type ( "Date", "Text", etc.)
// Parameters:		_field_name:	The name of the field to return the data type of (use `GetFieldName`)
// Version:		1.0 - Charles Ross - 17-07-18
// Example:		sample = result

Let (
  [
    _field_type = FieldType ( dev.Nil ; _field_name ) ;
    _list = list.CreateList ( _field_type ; " " ) ;
    _data_type = GetValue ( _list ; 2 )
  ] ;

  _data_type
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="343" name="schema.FieldNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldNames ( _table )
// Purpose:		Return all of the fields in the table, as opposed to `FieldNames` which only works with
//				fields ona particular layout.
// Parameters:		_table:	The name of the table (occurrence) to return the fields of
// Version:		1.0 - Charles Ross - 17-07-24
// Example:		sample = result

ExecuteSQL (
  List (
    "SELECT FieldName" ;
    "FROM FileMaker_Fields" ;
    "WHERE TableName = ?"
  ) ;
 dev.Nil ; dev.Nil ; _table
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="344" name="schema.FieldRepCount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldRepCount ( _field )
// Purpose:		Returns the number of repeitions the field is defined to have.
// Parameters:		_field:	The fully-qualified field name.
// Version:		1.0.0 - Will M. Baker - 11-10-29
//				1.0.1 - Charles Ross - 18-08-04 - Change _field parameter to expect the qualified field name
// Example:		// Assuming the field is defined to have 4 repetitions…
//				schema.FieldReps ( Table::field ) = 4

GetAsNumber ( FieldType ( Get ( FileName ) ; _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="345" name="schema.FieldStorageType"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldStorageType ( _field )
// Purpose:		Returns a text string describing the field's storage type ( "Standard", "External(Open)", etc.)
// Parameters:		_field_name:	The name of the field to return the data type of (use `GetFieldName`)
// Version:		1.0 - Charles Ross - 17-07-24
// Example:		sample = result

Let (
  [
    _field_type = FieldType ( dev.Nil ; _field_name ) ;
    _list = list.CreateList ( _field_type ; " " ) ;
    _storage_type = list.First ( _list )
  ] ;

  _storage_type
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="346" name="script_____ Script Parameter Results _______________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for assigning to variables script parameters and results.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="347" name="script._CharPosOrLen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._CharPosOrLen ( _text ; _char ; _start )
// Purpose:		Returns the position of the char in the text or the length of the text if char is absent.
// Parameters:		_text:	The text to search within
//				_char:	The character to look for
//				_start:	Where to start looking
// Version:		1.0 written 15-11-26 by Charles Ross
// Example:		sample = result

Let (
  [
    _length	= Length ( _text ) ;
    _pos	= Position ( _text ; _char ; _start ; 1 ) ;

    _result = Case (
      _pos = 0	; _length
			; _pos
    )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="348" name="script._OptParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._OptParams ( _script )
// Purpose:		Returns a list of optional script parameters according to the script name and the
//				FileMakerStandards.org convention for listing parameters in script names
// Parameters:		_script:	The name of a script, optional, `Get ( ScriptName )` used when blank
// Version:		1.0 written 12-12-07 by Jeremy Bante
//				1.1 edited 13-06-29 by Jeremy Bante to append a trailing return to non-empty results
//					to support direct concatenation with other lists
// Notes:			http://filemakerstandards.org/display/cs/Script+naming
//				Scripts should be named as follows:
//				"Script Name ( Req1 ; Req2 {; Opt1 ; Opt2 } )"
// Example:		sample = result

Case (
  // ========================================
  // Step 0, set-up
  not $scpm.OptionalParams.step ;
  Let (
    [
      _params = script._RawParams ( _script ; "optional" ) ;

      $scpm.OptionalParams.count = ValueCount ( _params ) ;

      $scpm.OptionalParams.step = Case (
        IsEmpty ( _params )	; 2
					; 1
      )
    ] ;

    script._OptParams ( _params )
  ) ;

  // ========================================
  // Step 1, trim whitespace
  $scpm.OptionalParams.step = 1 ;
  Let (
    [
      $scpm.OptionalParams.i = $scpm.OptionalParams.i + 1 ;
      _param = Trim ( GetValue ( _script ; $scpm.OptionalParams.i ) ) ;
      $scpm.OptionalParams.result = List ( $scpm.OptionalParams.result ; _param ) ;

      $scpm.OptionalParams.step = Case (
        $scpm.OptionalParams.i < $scpm.OptionalParams.count	; 1
												; 2
      )
    ] ;

    script._OptParams ( _script )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  $scpm.OptionalParams.step = 2 ;
  Let (
    [
      _result = Case (
        not IsEmpty ( $scpm.OptionalParams.result ) ;
        $scpm.OptionalParams.result & ¶
      ) ;

      // purge variables
      $scpm.OptionalParams.i		= dev.Nil ;
      $scpm.OptionalParams.count	= dev.Nil ;
      $scpm.OptionalParams.result	= dev.Nil ;
      $scpm.OptionalParams.step	= dev.Nil
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="349" name="script._RawParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._RawParams ( _script ; _type )
// Purpose:		Abstracts out the common logic found in scpm.RequiredParams and scpm.OptionalParams
// Parameters:		_script:	The name of the script
//				_type:	The type of parameters, should be either "required" or "optional"
// Version:		1.0 written 15-11-26 by Charles Ross
// Example:		sample = result

Let (
  [
    _start_char = Case (
      _type = "required"	; "("
					; "{"
    ) ;

    _end_opt_char = Case (
      _type = "required"	; "{"
					; "}"
    ) ;

    _end_req_char = ")" ;

    _script = Case (
      IsEmpty ( _script )	; Get ( ScriptName )
					; _script
    ) ;

    _length	= Length ( _script ) ;
    _start	= Position ( _script ; _start_char ; _length ; -1 ) + 1 ;

    _end_opt = script._CharPosOrLen ( _script ; _end_opt_char ; _start ) ;
    _end_req = script._CharPosOrLen ( _script ; _end_req_char ; _start ) ;

    _end = Min ( _end_opt ; _end_req ) ;

    _params = Case (
      _start = 1	; dev.Nil
			; Middle ( _script ; _start ; _end - _start )
    ) ;

    _result = Substitute ( _params ; ";" ; ¶ )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="350" name="script._ReqParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._ReqParams ( _script )
// Purpose:		Returns a list of required script parameters according to the script name and the
//				FileMakerStandards.org convention for listing parameters in script names
// Parameters:		_script:	The name of a script, optional, `Get ( ScriptName )` used when blank
// Version:		1.0 written 12-12-07 by Jeremy Bante
//				1.1 edited 13-06-29 by Jeremy Bante to append a trailing return to non-empty results
//					to support direct concatenation with other lists
// Notes:			http://filemakerstandards.org/display/cs/Script+naming
//				Scripts should be named as follows:
//				"Script Name ( Req1 ; Req2 {; Opt1 ; Opt2 } )"
// Example:		scpm.RequiredParams ( "Script Name ( Req1 ; Req2 {; Opt1 } )" ) = List ( "Req1" ; "Req2" ) & ¶

Case (
  // ========================================
  // Step 0, set-up
  not $scpm.RequiredParams.step ;
  Let (
    [
      _params = script._RawParams ( _script ; "required" ) ;

      $scpm.RequiredParams.count = ValueCount ( _params ) ;

      $scpm.RequiredParams.step = Case (
        IsEmpty ( _params )	; 2
					; 1
      )
    ];

    script._ReqParams ( _params )
  ) ;

  // ========================================
  // Step 1, trim whitespace
  $scpm.RequiredParams.step = 1 ;
  Let (
    [
      $scpm.RequiredParams.i = $scpm.RequiredParams.i + 1 ;
      _param = Trim ( GetValue ( _script ; $scpm.RequiredParams.i ) ) ;
      $scpm.RequiredParams.result = List ( $scpm.RequiredParams.result ; _param ) ;

      $scpm.RequiredParams.step = Case (
        $scpm.RequiredParams.i < $scpm.RequiredParams.count	; 1
												; 2
      )
    ] ;

    script._ReqParams ( _script )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  $scpm.RequiredParams.step = 2 ;
  Let (
    [
      _result = Case (
        not IsEmpty ( $scpm.RequiredParams.result ) ;
        $scpm.RequiredParams.result & ¶
      ) ;

      // purge variables
      $scpm.RequiredParams.i		= dev.Nil ;
      $scpm.RequiredParams.count	= dev.Nil ;
      $scpm.RequiredParams.result	= dev.Nil ;
      $scpm.RequiredParams.step	= dev.Nil
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="351" name="script.AssignParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.AssignParams
// Purpose:		Assume the current script parameter contains let notation and assign the variables defined therein.
// Requirements: 	let.Assign
// Version:		1.0 written 17-03-06 by Charles Ross
// Example:		sample = result

let.Assign ( Get ( ScriptParameter ) )
  and script.ConfirmVars ( script._ReqParams ( dev.Nil ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="352" name="script.AssignResults"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.AssignResults
// Purpose:		Assume the current script result contains let notation and assign the variables defined therein.
// Requirements: 	let.Assign
// Version:		1.0 written 17-03-06 by Charles Ross
// Example:		sample = result

let.Assign ( Get ( ScriptResult ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="353" name="script.ConfirmVars"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.ConfirmVars ( _names )
// Purpose:		Returns True (1) if the names passed each have non-empty values in local variables.
// Parameters:		_names:	A return-delimited list of names to check, do not need to be prefixed with $
// Version:		1.0 written 12-12-07 by Jeremy Bante
//				1.1 edited 13-07-05 by Jeremy Bante to support one trailing return in the nameList
//					parameter.
//				1.2 edited 13-07-10 by Jeremy Bante to correct a bug with support for trailing returns.
// Notes:			Names containing "$" or "$$" prefixes will be treated as identical to names not
//				beginning with those prefixes — this function only checks for local $variables.
// Example:		sample = result

Case (
  IsEmpty ( _names ) ;
  True ;

  Let (
    [
      // Provide sentinels at for the beginning and end of the list.
      _start	= Get ( UUID ) ;
      _end	= Get ( UUID ) ;

      // normalize _names so all values begin with "$"
      _names = Substitute (
        _start & ¶ & _names & _end ;
        [ ¶ & _end		; dev.Nil	] ;
        [ _end		; dev.Nil	] ;
        [ "¶$$"		; "¶"		] ;
        [ "¶$"		; "¶"		] ;
        [ "¶"			; "¶$"	] ;
        [ _start & ¶	; dev.Nil	]
      ) ;

      // Separate multiple names with additional tests
      _names = Substitute (
        _names ;
        [ "¶" ; " )¶and not IsEmpty ( " ]
      ) ;

      _code = "not IsEmpty ( " & _names & " ) " ;

      _result = IsValidExpression ( _code ) and Evaluate ( _code )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="354" name="script.Param"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.Param
// Purpose:		A convenience wrapper that only calls let.Set.
// Parameters:		_name:	The name of the parameter to send
//				_value:	The value to assign to the parameter
// Requirements: 	let.Set
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

let.Set ( _name ; _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="355" name="sortable_____ Sortable Text ________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for converting the various non-text data types into text that will sort the same as the original.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="356" name="sortable.Date"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Date ( _date )
// Purpose:		Returns a textual version of a date that will sort property as text.
// Parameters:		_date:	The date to convert.
// Requirements:	timestamp.Format
// Version:		1.0 - Charles Ross - 15-03-11
//				1.1 - Charles Ross - 17-03-07 - Leverage timestamp.Format.
// Example:		sortable.Date ( Date ( 10; 1; 2008 ) ) = "20081001"

timestamp.Format ( GetAsTimestamp ( Date ( 3; 27; 15 ) ) ;"20%Y%m%d" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="357" name="sortable.Number"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Number ( _number )
// Purpose:		Returns a textual version of a number that will sort property as text.
// Parameters:		_number:	The number to convert.
// Requirements:	padd.Zeros
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		sortable.Number ( 123.456 ) = "00000001234560000000"

Right ( text.PadZeros ( _number * ( 10 ^ 10 ); 20 ); 20 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="358" name="sortable.Time"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Time ( _time )
// Purpose:		Returns a textual version of a time that will sort property as text.
// Parameters:		_time:	The time to convert.
// Version:		1.0 - Charles Ross - 15-03-11
//				1.1 - Charles Ross - 17-03-07 - Leverage timestamp.Format
// Example:		sortable.Time ( Time ( 3; 4; 15 ) ) = "030415"

timestamp.Format ( GetAsTime ( _time ) ;"%H%m%S" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="359" name="sortable.Timestamp"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Timestamp ( _timestamp )
// Purpose:		Returns a textual version of a timestamp that will sort property as text.
// Parameters:		_timestamp:	The timestamp to convert.
// Requirements:	sortable.Date
//				sortable.Time
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		sortable.Timestamp ( Timestamp ( Date ( 10; 1; 2008 ); Time ( 3; 4; 15 )  ) ) = "20081001030415"

sortable.Date( GetAsDate( _timestamp ) ) &
  sortable.Time( GetAsTime( _timestamp ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="360" name="sql_____ ExecuteSQL ________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for easing the use of ExecuteSQL.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="361" name="sql.ConvertDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.ConvertDate ( _sql_date )
// Purpose:		Converts a date returned by `ExecuteSQL` into a FileMaker date.
// Parameters:		_sql_date:	A date string returned by `ExecuteSQL`
// Requirements: 	timestamp.FromISO8601
// Version:		1.0 - Charles Ross - 17-12-04
// Example:		sql.ConvertDate ( 2017-12-04 ) = Date ( 12 ; 4 ; 2017 )

Case (
  IsEmpty ( _sql_date )	; dev.Nil
					; GetAsDate ( timestamp.FromISO8601 ( _sql_date ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="362" name="sql.Debug"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.Debug ( _execute_sql_results )
// Purpose:		Permits the viewing of SQL error messages. Must be used in the Data Viewer.
// Parameters:		_execute_sql:	The results of an ExecuteSQL call.
// Requirements: 	FileMaker Pro Advanced's Data Viewer
// Version:		2.2 edited 12-07-28 by Andries Heylen
// Notes:			All of the following must be true for this function to be useful:
//				- ExecuteSQL returns a quesiton mark (indicating an error)
//				- The results of the ExecuteSQL call are passed to this function
//				- The results of this function are added to the Data Viewer's Watch tab.
//				- The results of the Watch tab's calculation are monitored (not simply evaluated).
//				When all of that is true, this function will reveal the error message generated by the
//				SQL that was passed to ExecuteSQL.
//				http://www.fmfunctions.com/fid/335
// Example:		// When monitored in the Data Viewer (but this isn't a unit test, calc below will return 0)…
//				sql.Debug ( ExecuteSQL ( "SELECT unexistingfield from table" ; "" ; "" ) )
//				  = "There is an error in the syntax of the query."

Case ( 
						// Return an empty string to reveal the error if there is one.
  _execute_sql_results = "?"	; ""
						// Otherwise return the valid results

  						; _execute_sql_results
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="363" name="sql.FormatListForIn"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.FormatListForIn ( _list )
// Purpose:		Generates a comma-delimited list, with each list item wrapped in single quotes to be
//				used with the SQL "IN" operator when the field you are querying is a TEXT field
// Parameters:		_list:	The list to convert.
// Requirements:	list.CreateList
// Version:		1.0 written 12-05-08
// Todo:			Find original author's name.
// Example:		sql.FormatListForIn ( "A¶B¶C" ) = "('A','B','C')"

"('" & list.ReplaceSeparator ( _list ; "','" ) & "')"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="364" name="sql.QuotedFieldName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.QuotedFieldName ( _field )
// Purpose:		Returns only the field name, i.e., without the table occurrence name
// Parameters:		_field: The field to return the name of.
// Requirements:	dev.GetFieldName
// Version:		1.0 written 15-05-03 by Charles Ross
// Notes:			GetFieldName() returns the relationship plus the field name. This function
//				is to be used in SQL queries to protect the table occurrence references
//				from breaking if the TO is renamed.
//
//				The Quote() funciton "escapes" problematic characters and SQL reserved
//				words, if any — otherwise, no harm done.
//
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				sql.QuotedFieldName ( TableOccurrence::field_name ) = "\"field_name\""

Quote ( dev.GetFieldName ( _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="365" name="sql.QuotedQualified"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.QuotedQualified ( _field )
// Purpose:		Returns a quoted, fully qualified field reference, `"Table"."field"`
// Parameters:		_field:	The field to return in quoted qualified format
// Requirements: 	sql.QuotedTableName
//				sql.QuotedFieldName
// Version:		1.0 - Charles Ross - 17-03-13
// Example:		sample = result

sql.QuotedTableName ( _field ) & "." & sql.QuotedFieldName ( _field )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="366" name="sql.QuotedTableName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.QuotedTableName ( _field )
// Purpose:		Returns only the table name, i.e., without the field name
// Parameters:		_field: The field to return the table name for
// Requirements:	dev.GetTableName
// Version:		1.0 written 15-05-03 by Charles Ross
// Notes:			GetFieldName() returns the relationship plus the field name. This function
//				is to be used in SQL queries to protect the table occurrence references
//				from breaking if the TO is renamed.
//
//				The Quote() funciton "escapes" problematic characters and SQL reserved
//				words, if any — otherwise, no harm done.
//
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				sql.QuotedTableName ( TableOccurrence::field_name ) = "\"TableOccurrence\""

Quote ( dev.GetTableName ( _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="367" name="sql.SelectCountWhereValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.SelectCountWhereValue ( _from_table ; _where_field ; _value )
// Purpose:		Builds the simplest COUNT query for the given fields, table and value.
// Parameters:		_from_table:	The table to select from
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 19-09-19
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _sql = List (
      "SELECT	COUNT(*)" ;
      "FROM		_from_table" ;
      "WHERE	_where_field = ?"
    ) ;

    _from_table	= sql.QuotedTableName ( _from_table ) ;
    _where_field	= sql.QuotedFieldName ( _where_field ) ;

    _sql = Substitute (
      _sql ;
      [ "_from_table" ; _from_table ] ;
      [ "_where_field" ; _where_field ]
    ) ;

    _ = ""
  ] ;

  ExecuteSQL ( _sql ; dev.Nil ; dev.Nil ; _value )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="368" name="sql.SelectFromWhereValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.SelectFromWhereValue ( _select_field ; _from_table ; _where_field ; _value )
// Purpose:		Builds the simplest SELECT query for the given fields, table and value.
// Parameters:		_select_field:	The field whose contents should be selected
//				_from_table:	The table to select from
//				_where_field:	The field to search against
//				_value:		The valut to search for within the field
// Requirements: 	sql.QuotedFieldName
//				sql.QuotedTableName
// Version:		1.0 - Charles Ross - 18-02-20
// Example:		sample = result

Let (
  [
    _sql = List (
      "SELECT	_select_field" ;
      "FROM		_from_table" ;
      "WHERE	_where_field = ?"
    ) ;

    _select_field	= sql.QuotedFieldName ( _select_field ) ;
    _from_table	= sql.QuotedTableName ( _from_table ) ;
    _where_field	= sql.QuotedFieldName ( _where_field ) ;

    _sql = Substitute (
      _sql ;
      [ "_select_field" ; _select_field ] ;
      [ "_from_table" ; _from_table ] ;
      [ "_where_field" ; _where_field ]
    ) ;

    _ = ""
  ] ;

  ExecuteSQL ( _sql ; dev.Nil ; dev.Nil ; _value )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="369" name="sql.SubstituteQuotedVariables"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.SubstituteQuotedVariables ( _text )
// Purpose:		Substitutes variables found in text with the quoted values of those variables.
// Parameters:		_text:	The text to substitute the variables found within
// Requirements: 	text.WhitespacePosition
// Version:		1.0 - Charles Ross - 18-08-04
// Notes:			Assumes no whitespace in variable names
//				Assumes all dollar signs are variables
//				Assumes _text does not end in a variable name
// Todo:			Fix the above assumptions
// Example:		Let (
//				  [
//				    $_substitution = "foo" ;
//				    $$_variables = "bar" ;
//				    _text = "some text with $_substitution $$_variables in it"
//				  ] ;
//				  sql.SubstituteQuotedVariables ( _text ) = "some text with \"foo\" \"bar\" in it"
//				)


Case (
  PatternCount ( _text ; "$" ) = 0 ;
  _text ;

  Let (
    [
      _pos			= Position ( _text ; "$" ; 1 ; 1 ) ;
      _next_space	= text.WhitespacePosition ( _text ; _pos ) ;

      _var_name = Case (
        _next_space = 0 ;
        Right ( _text ; Length ( _text ) - _pos + 1 ) ;
        Middle ( _text ; _pos ; _next_space - _pos )
      ) ;

      _value			= Evaluate ( _var_name ) ;
      _new_text		= Substitute ( _text ; _var_name ; Quote ( _value ) ) ;
      _ = ""
    ] ;

    sql.SubstituteQuotedVariables ( _new_text )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="370" name="system_____ System Constants _______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that offer named constants of various FileMaker Get functions or named tests that depend on
// them.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="371" name="system.AllowAbortStateOn"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.AllowAbortStateOn
// Purpose:		A constant representing what Get ( AllowAbortState ) returns.
// Version:		1.0 - Charles Ross - 15-06-21
// Example:		// When evaluated after a script has turned on Allow User Abort…
//				Get ( AllowAbortState ) = system.AllowAbortStateOn

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="372" name="system.ErrorCaptureOff"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.ErrorCaptureOff
// Purpose:		A constant representing what Get ( ErrorCaptureState ) returns.
// Version:		1.0 - Charles Ross - 15-06-21
// Example:		// When evaluated after a script has turned off error capture
//				Get ( ErrorCaptureState ) = system.ErrorCaptureOff

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="373" name="system.IsLandscape"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.IsLandscape
// Purpose:		Returns True if an interface is in landscape mode, meant for use on iOS.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When executed on an iPad that is being held in landscape mode...
//				system.IsLandscape = 1

Get( WindowContentWidth ) > Get( WindowContentHeight )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="374" name="system.IsPortrait"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.IsPortrait
// Purpose:		Returns True if an interface is in portrait mode, meant for use on iOS.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When executed on an iPad that is being held in portrait mode...
//				system.IsPortrait = 1

Get ( WindowContentWidth ) < Get ( WindowContentHeight )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="375" name="system.MultiUserStateClient"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.MultiUserStateClient
// Purpose:		A constant representing what Get ( MultiUserState ) returns to indicate accessing a
//				database from a client computer.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while accessing the database from a client computer...
//				Get ( MultiUserState ) = system.MultiUserStateClient

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="376" name="system.MultiUserStateHost"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.MultiUserStateHost
// Purpose:		A constant representing what Get ( MultiUserState ) returns to indicate accessing a
//				database from the host computer.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while accessing the database from the host computer...
//				Get ( MultiUserState ) = system.MultiUserStateHost

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="377" name="system.MultiUserStateOff"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.MultiUserStateOff
// Purpose:		A constant representing what Get ( MultiUserState ) returns to indicate sharing is off.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while sharing is off...
//				Get ( MultiUserState ) = sysk.MultiUserStateOff

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="378" name="system.RecordStateClosed"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.RecordStateClosed
// Purpose:		Returns the value returned by `Get ( RecordOpenState )` when the record is closed.\
// Version:		1.0 - Charles Ross - 17-07-23
// Example:		sample = result

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="379" name="system.RecordStateEditedOpen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.RecordStateEditedOpen
// Purpose:		Returns the constant value indicating modified record is uncommitted
// Version:		1.0 - Charles Ross - 17-03-20
// Example:		// The current record is being edited and is uncommited…
//				Get ( RecordOpenState ) = system.RecordStateEditedOpen

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="380" name="system.RecordStateNewOpen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.RecordStateNewOpen
// Purpose:		Returns the constant value indicating modified record is uncommitted
// Version:		1.0 - Charles Ross - 17-03-20
// Example:		// The current record is new and is uncommited…
//				Get ( RecordOpenState ) = system.RecordStateNewOpen

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="381" name="text_____ Text Processing __________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that manipulate text in various ways.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="382" name="text._PhoneFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// txtf.PhoneFormat_ ( _phone; _format )
// Purpose:		Formats a phone number to the given format using pound signs as digit placeholders.
// Parameters:		_phone:	The phone number to format.
//				_format:	The format to apply.
// Version:		1.0 - Jesse Swensen - 15-03-11
// Notes:			https://www.briandunning.com/cf/1459
//				Will format the number according to the given format. Fills in the format from right to
//				left and if the number is longer than the format, the extra numbers will be prepended
//				to the front of the formatted phone number. Any non-numeric characters in the phone
//				number are ignored.
//				Recursive wrapper for text.FormatPhone
// Example:		( txtf.PhoneFormat_ ( "5551212"; "### (###) ###-####" ) = "555-1212" )
//				  and ( txtf.PhoneFormat_ ( "55b51.2-12"; "### (###) ###-####" ) = "555-1212" )
//				  and ( txtf.PhoneFormat_ ( "8005551212"; "### (###) ###-####" ) = "(800) 555-1212" )
// 				 and ( txtf.PhoneFormat_ ( "18005551212"; "### (###) ###-####" ) = "1 (800) 555-1212" )

Case (
  not IsEmpty ( _format );
  Let (
    [
      _numbers = Filter ( _phone; data.Digits );
      _new_format = Left ( _format; Length ( _format ) - 1);
      _new_number = Left ( _numbers; Length ( _numbers ) - 1)
    ];

    Case (
      Right ( _format; 1 ) = "#";	text._PhoneFormat ( _new_number; _new_format ) & Right ( _numbers; 1 ); 
						text._PhoneFormat ( _numbers; _new_format ) & Right ( _format; 1 ) 
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="383" name="text.BOMPad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.BOMPad ( _text ; _length )
// Purpose:		Pads _text at the beginning of the string with the _length number of byte order marks.
// Parameters:		_text:	The text to pad.
//				_length:	How many byte order marks to pad.
// Version:		1.0 - Matt Petrowsky - 12-09-18 - inspired by Marcelo Piñeyro of Soliant consulting
// Notes:			This is used to provide a custom sort order which can be based on the number of byte
//				order marks that appear at the start of a string.
// Example:		sample = result

text.Pad ( _text ; Char ( 65279 ) ; _length ; "left" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="384" name="text.CamelToSnake"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CamelToSnake
// Purpose:		Convert a camel-case name to a snake-case name
// Parameters:		_text: The text to convert
// Version:		1.0 - Charles Ross - 17-12-18
// Notes:			Takes account of special words that are all caps for `Get` parameters, as that was the original imputus of this function.
// Todo:			To dos
// Example:		text.CamelToSnake ( "MyVarName" ) = "my_var_name"

Case (
  IsEmpty ( _text ) ;
  Let (
    [
      _result = $_text_camel_to_snake_result ;
      $_text_camel_to_snake_result = dev.Nil ;

      _result = Substitute (
        _result ;
        [ "n_i_c"		; "nic"		] ;
        [ "file_maker"	; "filemaker"	] ;
        [ "f_m_p"		; "fmp"		] ;
        [ "_i_d"		; "_id"		] ;
        [ "_i_p"		; "_ip"		]
      )
    ] ;
    _result
  ) ;

  Let (
    [
      _char = Left ( _text ; 1 ) ;
      _text = Right ( _text ; Length ( _text ) - 1 ) ;

      _prev_char = Right ( $_text_camel_to_snake_result ; 1 ) ;

      _code = Code ( _char ) ;
      _is_cap = ( _code ≥ 65 ) and ( _code ≤ 90 ) ;

      $_text_camel_to_snake_result = $_text_camel_to_snake_result & Case (
        IsEmpty ( _prev_char )	; Lower ( _char ) ;
        _is_cap				; "_" & Lower ( _char )
						; _char
      )
    ] ;

    text.CamelToSnake ( _text )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="385" name="text.Clean"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Clean ( _text ; _clear_pilcrows ; _trim ; _clear_font ; _clear_size ; _clear_color ; _clear_styles )
// Purpose:		Conditionally clear formatting and carriage returns from passed text.
// Parameters:		_text:
//				_clear_pilcrows:	Clear pilcrows (carriage returns) if True
//				_trim:			Trim spaces if True.
//				_clear_font:		Use TextFontRemove if True.
//				_clear_size:		Use TextSizeRemove if True
//				_clear_color:		Use TextColorRemove if True
//				_clear_styles:		Use TextStyleRemove if True
// Requirements: 	text.TrimPilcrows
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

Let (
  [

    _text = Case ( _clear_pilcrows	; Substitute ( _text ; "¶" ; "" )
							; _text
    ) ; 

    _text = Case ( _trim	; Trim ( text.TrimPilcrows ( _text ) )
					; _text
    ) ;

    _text = Case ( _clear_font	; TextFontRemove ( _text )
						; _text
    ) ;
    _text = Case ( _clear_size	; TextSizeRemove ( _text )
						; _text
    ) ;

    _text = Case ( _clear_color	; TextColorRemove ( _text )
						; _text
    ) ;

    _text = Case ( _clear_styles	; TextStyleRemove ( _text ; AllStyles )
						; _text
    )
  ] ;

  _text
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="386" name="text.CleanAll"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanAll ( _text )
// Purpose:		Remove formatting and trip whitespace
// Parameters:		_text:	The text to clean
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-10-16
// Example:		sample = result

TextFormatRemove ( text.Supertrim ( _text ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="387" name="text.CleanFormatWithTrim"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanColorStyled ( _text )
// Purpose:		Clear the colors and styles from the passed text.
// Parameters:		_text:	The text to reformat.
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

TextFormatRemove  ( Trim ( _text ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="388" name="text.CleanRetainColorStylesReturns"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanColorStyled ( _text )
// Purpose:		Clear the colors and styles from the passed text.
// Parameters:		_text:	The text to reformat.
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

text.Clean ( _text ; 0 ; 1 ; 1 ; 1 ; 0 ; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="389" name="text.CleanRetainStylesReturns"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanRetainStylesReturns ( _text )
// Purpose:		Clear the formatting while retaining leading and trailing returns and the text style.
// Parameters:		_text:	The text to clean.
// Requirements: 	text.Clean
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

text.Clean ( _text ; 0 ; 1 ; 1 ; 1 ; 1 ; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="390" name="text.Color"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Color ( _text ; _color )
// Purpose:		Retunr the passed text colord with the named color or the word "remove"
// Parameters:		_text:	The text to color
//				_color:	The color to use.
// Requirements: 	data.Colors
//				let.Get
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
//				The remove/none options are for use in auto-enter fields where we may set
//				the color under some conditions ( e.g. red for errors ) and don't want error
//				color preserved when the condition is removed ( e.g. when the error is fixed )
// Example:		text.Color ( "black" ) = 0 and text.Color ( "green" ) = 35600

Case (
  _color = "remove" or _color = "none" ;
  TextColorRemove ( _text ) ;

  TextColor ( _text ; let.Get ( data.Colors ; _color ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="391" name="text.CSVField"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CSVField ( _text ; _append_comma )
// Purpose:		Prepares the text for inclusion in a CSV export.
// Parameters:		_text:			The text to prepare
//				_append_comma:	If True, a comma is appended to the end of the text
// Requirements: 	text.EscapeDoubleQuotes
// Version:		1.0 - Jim Feuerstein
// Example:		sample = result

"\"" & text.EscapeDoubleQuotes ( _text ) & "\"" &
Case ( _append_comma ; "," )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="392" name="text.E164PhoneFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.E164PhoneFormat ( _phone )
// Purpose:		Returns a phone number formatted to the E.164 Standard.
// Parameters:		_phone:	The phone number to format.
// Requirements: 	data.Digits
// Version:		1.0 - Charles Ross - 17-12-10
// Notes:			https://support.twilio.com/hc/en-us/articles/223183008-Formatting-International-Phone-Numbers
// Example:		text.E164PhoneFormat ( "(951) 370-5596" ) ="+19513705596"

Let (
  [
    _digits = Filter ( _phone ; data.Digits )
  ] ;

  Case (
    ( Left ( _phone ; 2 ) = "+1" ) and ( Filter ( _phone ; data.Digits & "+" ) = _phone ) ;
    _phone ;
    "+1" & _digits
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="393" name="text.EndsWith"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.EndsWith ( _text; _search_string )
// Purpose:		Returns True if the text ends with the search string.
// Parameters:		_text:		The text to test.
//				_search_string:	The search string to test the presence of at the end of text.
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		( not text.StartsWith ( "Four score"; "Four" ) ) and text.StartsWith ( "Seven years"; "years" )

Right ( _text;  Length ( _search_string ) ) = _search_string]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="394" name="text.EscapedEmail"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.EscapedEmail ( _email )
// Purpose:		Escapes the `@` character in email addresses to overcome it being a special character in FileMaker finds.
// Parameters:		_email:	The address to escape
// Version:		1.0 - Charles Ross - 19-12-12
// Example:		text.EscapedEmail ( "email@example.com" ) = "email\@example.com"

Substitute ( _email ; "@" ; "\@" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="395" name="text.EscapeDoubleQuotes"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.EscapeDoubleQuotes ( _text )
// Purpose:		Replace each individual double quote with a pair of double quotes.
// Parameters:		_text:	The text to perform the replacement upon
// Version:		1.0 - Jim Feuerstein
// Notes:			This function is used in the creation of properly formatted csv files to
//				convert any double-quote characters into a pair of double-quote characters.
//				Copyright © 2017 Labor Street
// Todo:			To dos
// Example:		sample = result

Substitute ( _text ; "\"" ; "\"\"" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="396" name="text.FormatAddress"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// txtf.FormatAddress ( _com; _con; _addr_1; _addr_2; _city; _state; _zip; _country )
// Purpose:		Returns a formatted address given the provided parameters.
// Parameters:		_com:	The company name.
//				_con:	The contact name.
//				_addr_1:	The first address line.
//				_addr_2:	The second address line.
//				_city:		The city.
//				_state:	The state.
//				_zip:		The postal code.
//				_country:	The country.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Slide any content that is missing from the full address. This will display the address
//				formatting without carriage returns for empty content in the fields. It will also remove
//				unwanted leading and trailing spaces with the Trim function. The only thing it won't
//				accomodate is an empty field with a carriage returns.
// Example:
// txtf.FormatAddress ( "Chivalry Software" ; "Charles Ross" ; "123 Main St." ; "Ste. 10" ; "Los Angeles" ; "CA" ; 
//   "90024" ; "USA" ) = "Chivalry Software¶Charles Ross¶123 Main St.¶Ste. 10¶Los Angeles, CA 90024¶USA"

Case( IsEmpty( _com );		dev.Nil ;		   Trim( _com ) ) &
Case( IsEmpty( _con );		dev.Nil ;	"¶"	& Trim( _con ) ) &
Case( IsEmpty( _addr_1 );		dev.Nil ;	"¶"	& Trim( _addr_1 ) ) &
Case( IsEmpty( _addr_2 );		dev.Nil ;	"¶"	& Trim( _addr_2 ) ) &
Case( IsEmpty( _city );		dev.Nil ;	"¶"	& Trim( _city ) ) &
Case( IsEmpty( _state );		dev.Nil ;	", "	& Trim( _state ) ) &
Case( IsEmpty( _zip );		dev.Nil ;	" "	& Trim( _zip ) ) &
Case( IsEmpty( _country );		dev.Nil ;	"¶"	& Trim( _country ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="397" name="text.FullName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.FullName ( _prefix; _first; _middle; _last; _suffix )
// Purpose:		Return a person's full name from the piece fields.
// Parameters:		_prefix:	Mr, Mrs, Dr, etc.
//				_first:	The first name.
//				_middle:	The middle name.
//				_last:		The last name.
//				_suffix:	Ph.D., etc.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		txtf.FullName ( "Mr."; "Charles"; "Edward"; "Ross"; "Ph.D" ) = "Mr. Charles Edward Ross, Ph.D."

Let (
  [
    // List function will not create blank members if entries are empty string.
    _before_suffix = List (
      _prefix ;
      _first ;
      _middle ;
      _last
    ) ;

    _before_suffix	= list.ReplaceSeparator ( _before_suffix ; " " ) ;
    _suffix			= Case ( dev.IsSet ( _suffix ) ; ", " & _suffix ) ;
    _result			= _before_suffix & _suffix
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="398" name="text.GetAsURLEncoded"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.GetAsURLEncoded
// Purpose:		Encoded additional characters than the built-in GetAsURLEncoded
// Parameters:		_text:	The text to encode
// Version:		1.0 - Charles Ross - 15-12-31
// Notes:			For some reason, although the documentation for GetAsURLEncoded says it will encode
//				non alphanumeric characters, it doesn't cover them all. As characters are found that need
//				encoding, they'll be added to this function.
// Example:		text.GetAsURLEncoded ( "12:34:56" ) = "12%3A34%3A56"

Substitute (
  GetAsURLEncoded ( _text ) ;

  [ ":" ; "%3A" ]
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="399" name="text.Oxfordize"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Oxfordize ( _items )
// Purpose:		Return a string with the Oxford comma separate for three or more items.
// Parameters:		_items:		The items to return as Oxfordized
//				_conjunction:	The conjunction to place between the last and second to last
//							items, should be "and" or "or".
//				_quote:		A boolean value, if `True`, place each item in quotes (with
//							comma also in quotes).
// Requirements: 	list.CustomList
//				list.ReplaceSeparator
// Version:		1.0 - Charles Ross - 17-03-16
// Example:		sample = result

Case (
  ValueCount ( _items ) = 0 ;
  dev.Nil ;

  ValueCount ( _items ) = 1 and _quote ;
  Quote ( _items ) ;

  ValueCount ( _items ) = 1 ;
  _items ;

  ValueCount ( _items ) = 2 and _quote ;
  Quote ( GetValue ( _items ; 1 ) ) & " " & _conjunction & " " & Quote ( GetValue ( _items ; 2 ) ) ;

  ValueCount ( _items ) = 2 ;
  GetValue ( _items ; 1 ) & " " & _conjunction & " " & GetValue ( _items ; 2 ) ;

  Let (
    [
      $_tailless_items = LeftValues ( _items ; ValueCount ( _items ) - 1 ) ;

      _tailless_items = Case (
        _quote	; list.CustomList ( 1 ; ValueCount ( $_tailless_items ) ; "Quote ( GetValue ( $_tailless_items ; %n ) & \",\" ) " )
			; list.ReplaceSeparator ( $_tailless_items ; ", " )
      ) ;

    $_tailless_items = dev.Nil ;

    _tailless_items = Case (
      _quote	; list.ReplaceSeparator ( _tailless_items ; " " ) & " "
			; _tailless_items
    ) ;

    _last_item = GetValue ( _items ; ValueCount ( _items ) ) ;
    _result = _tailless_items & _conjunction & " " & Case (
      _quote	; Quote ( _last_item )
			; _last_item
    ) ;

      _ = ""
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="400" name="text.Pad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Pad ( _text; _char; _counter; _side )
// Purpose:		Pads the text string with the char string the count number of times on the indicated
//				side.
// Parameters:		_text:	The text to pad with the char.
//              		_char:	The char to repeatedly pad.
//				_counter:	How many times to pad the char.
//				_side:	On which side of the string to pad the char.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.Pad ( "text"; "*"; 5; "left" ) = "*****text"

Let (
  [
    _decr = _counter - 1
  ] ;

  Case (
    _counter < 0 ;		"error" ;
    _counter = 0 ;		_text ;

    _side = "left" ;		_char & text.Pad ( _text ; _char ; _decr ; _side ) ;
					text.Pad ( _text ; _char ; _decr ; _side ) & _char
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="401" name="text.PadSpaces"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.PadSpaces ( _text; _space_count )
// Purpose:		Pads the given string with the specified number of spaces.
// Parameters:		_text:	The text to pad with spaces.
//				_count:	How many times to pad the spaces.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.PadSpaces ( "text"; 5 ) = "     text"

text.Pad ( _text; " "; _count; "left" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="402" name="text.PadZeros"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.PadZeros ( _text; _length )
// Purpose:		Pads zeroes to the limit that the returned text is of the length specified.
// Parameters:		_text:	The text to pad
//				_length:	How long the return string should be.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.PadZeros ( 13; 5 ) = "00013"

Right( text.Pad( _text; "0"; _length; "left" ); _length )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="403" name="text.ParseAddress"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.ParseAddress
// Purpose:		Parses an address into components using let-notation
// Parameters:		_address:	The address to parse.
// Requirements: 	requirements
// Version:		1.0.0 - Charles Ross - 18-03-28
// Notes:			Only works with Cognito formatted addresses
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _list = list.Reverse ( list.CreateList ( _address ; ", " ) ) ;

    _line_1 = text.Supertrim ( RightValues ( _list ; ValueCount ( _list ) - 2 ) ) ;
    _line_1 = Proper ( _line_1 ) ;

    _city = GetValue ( _list ; 2 ) ;
    _city = Proper ( _city ) ;

    _state_zip = GetValue ( _list ; 1 ) ;
    _state = LeftWords ( _state_zip ; WordCount ( _state_zip ) - 1 ) ;
    _state = Case (
      _state = "Oklahoma"	; "OK" ;
      _state = "Texas"		; "TX"
					; _state
  ) ;

    _zip = RightWords ( _state_zip ; 1 )
  ] ;

  let.Set ( "~line_1" ; _line_1 ) &
  let.Set ( "~city" ; _city ) &
  let.Set ( "~state" ; _state ) &
  let.Set ( "~zip" ; _zip )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="404" name="text.ParseName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.ParseName
// Purpose:		Parse a full name into components using a let-notation dictionary.
// Parameters:		_name:	The name to parse
// Requirements: 	requirements
// Version:		1.0.0 - Charles Ross - 18-03-28
// Notes:			Only parses into first and last names for now. No real intelligence yet.
// Todo:			Update to parse prefixes, suffixes, middle names and multi-word last names.
// Example:		text.ParseName ( "Charles Edward Ross" ) = let.Set ( "~first" ; "Charles Edward" ) & let.Set ( "~last" ; "Ross" )

Let (
  [
    _first = LeftWords ( _name ; WordCount ( _name ) - 1 ) ;
    _last = RightWords ( _name ; 1 )
  ] ;

  let.Set ( "~first" ; _first ) & let.Set ( "~last" ; _last )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="405" name="text.PhoneFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.PhoneFormat ( _phone; _country )
// Purpose:		Formats the provided phone number for the passed country code.
// Parameters:		_phone:	The phone number to format.
//				_country:	The country code to use in formatting.
// Requirements: 	txtf.PhoneFormat_
// Version:		1.0 - Charles Ross - 15-03-11
// Todo:			Only US supported so far, add more country formats.
// Example:		text.PhoneFormat ( "1235551212"; "us" ) = "(123) 555-1212"

Case(
  Filter( _phone; data.Digits ) = dev.Nil;	dev.Nil;
  _country = "us";					text._PhoneFormat( _phone; "(###) ###-####" );
    								_phone
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="406" name="text.Pluralize"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Pluralize ( _text ; _count )
// Purpose:		A static list of word that includes their singular and plural versions.
// Parameters:		_word:	The word to be shown as either singular or plural, based on the count
//				_count:	The number that determins whether a word should be singular or plural
// Requirements: 	requirements
// Version:		1.0 - Charles 19-08-12
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  _count = 1 ;
  _word ;

  Let (
    [
      _irregulars =	let.Set ( "child" ; "children" ) &
				let.Set ( "criteron" ; "criteria" ) ;

    _is_title_case = Exact ( Left ( _word ; 1 ) ; Upper ( Left ( _word ; 1 ) ) ) ;

    _provisional = let.Get ( _irregulars ; _word ) ;

    _result = Case (
      dev.IsSet ( _provisional )	; _provisional
						; _word & "s"
    ) ;

    _result = Case (
      _is_title_case	; Upper ( Left ( _result ; 1 ) ) & Right ( _result ; Length ( _result ) - 1 )
      				; _result
    ) ;

      _ = ""
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="407" name="text.PrependByteOrderMark"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.PrependByteOrderMark ( _text ; _count )
// Purpose:		Prepend the byte order mark character to the string count number of times
// Parameters:		_text:	The text to prepend the byte order mark to
//				_count:	The number of times to prepend the character
// Requirements: 	key.ByteOrderMark
// Version:		20-01-11 - Charles Ross
// Example:		sample = result

Case (
  _count = 0 ;
  _text ;

  key.ByteOrderMark & text.PrependByteOrderMark ( _text ; _count - 1 )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="408" name="text.QuoteIfUnquoted"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.QuoteIfUnquoted
// Purpose:		Returns the quoted string if it isn't already quoted.
// Parameters:		_text:	The text to quote if needed.
// Version:		1.0 - Charles Ross - 17-05-06
// Example:		text.QuoteIfUnquoted ( "text" ) = "\"text\""
//				  and text.QuoteIfUnquoted ( "\"text\"" ) = "\"text\""

Case (
  text.StartsWith ( _text ; "\"" ) and text.EndsWith ( _text ; "\"" )	; _text
												; Quote ( _text )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="409" name="text.RemoveByteOrderMarks"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.RemoveByteOrderMarks ( _text )
// Purpose:		Return the given text with all byte order marks removed
// Parameters:		_text:	The text to remove the byte order marks from
// Requirements: 	requirements
// Version:		20-01-11 - Charles Ross
// Notes:			Notes
// Todo:			To dos
// Example:		PatternCount ( text.RemoveByteOrderMarks ( text.PrependByteOrderMark ( "text" ; 3 ) ) ; key.ByteOrderMark ) = 0

Substitute ( _text ; key.ByteOrderMark ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="410" name="text.ReplaceTokens"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.ReplaceTokens ( _text ; _tokens )
// Purpose:		Replace each token in the text with the correponding text from the list.
// Parameters:		_text:	The text to perform replacements on.
//				_list:		The list of replacements.
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-08
// Notes:			Tokens are identified by the string "{}".
// Todo:			To dos
// Example:		text.ReplaceTokens ( "Some {} to {}." ; List ( "text" ; "replace" ) ) = "Some text to replace."

Case (
  not PatternCount ( _text ; "{}" ) ;
  _text ;

  Let (
    [
      _token_pos = Position ( _text ; "{}" ; 1 ; 1 ) ;
      _replacement_text = list.First ( _list ) ;
      _new_list = list.Rest ( _list ) ;
      _new_text = Replace ( _text ; _token_pos ; 2 ; _replacement_text )
    ] ;

    text.ReplaceTokens ( _new_text ; _new_list )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="411" name="text.StartsWith"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.StartsWith ( _text; _search_string )
// Purpose:		Returns True if the text begins with the search string.
// Parameters:		_text:		The text to test.
//				_search_string:	The search string to test the presence of at the beginning of text.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.StartsWith ( "Four score"; "Four" ) and ( not text.StartsWith ( "Seven years"; "years" )

Left ( _text;  Length ( _search_string ) ) = _search_string]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="412" name="text.SubstituteVariables"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.SubstituteVariables ( _text )
// Purpose:		Substitutes local variables found in text with the values of those variables.
// Parameters:		_text:	The text to substitute the variables found within
// Requirements: 	text.WhitespacePosition
// Version:		1.0 - Charles Ross - 18-04-13
// Notes:			Assumes no whitespace in variable names
//				Assumes all dollar signs are variables
//				Assumes _text does not end in a variable name
// Todo:			Fix the above assumptions
// Example:		Let (
//				  [
//				    $_substitution = "foo" ;
//				    $$_variables = "bar" ;
//				    _text = "some text with $_substitution $$_variables in it"
//				  ] ;
//				  text.SubstituteVariables ( _text ) = "some text with foo bar in it"
//				)


Case (
  PatternCount ( _text ; "$" ) = 0 ;
  _text ;

  Let (
    [
      _pos			= Position ( _text ; "$" ; 1 ; 1 ) ;
      _next_space	= text.WhitespacePosition ( _text ; _pos ) ;

      _var_name = Case (
        _next_space = 0 ;
        Right ( _text ; Length ( _text ) - _pos + 1 ) ;
        Middle ( _text ; _pos ; _next_space - _pos )
      ) ;

      _value			= Evaluate ( _var_name ) ;
      _new_text		= Substitute ( _text ; _var_name ; _value ) ;
      _ = ""
    ] ;

    text.SubstituteVariables ( _new_text )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="413" name="text.Supertrim"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Supertrim ( _text )
// Purpose:		Removes all whitespace from the beginning and end of a string.
// Parameters:		_text:	The text to trim.
// Requirements:	dev.Nil
// Version:		1.0 - Debi Fuchs, debi@aptworks.com - 15-03-11
// Notes:			Speedily (and with no recursion) remove leading and trailing white space, including
//				spacing, tabs and returns, from a text string.
// Example:		text.Supertrim ( " ¶	text	" ) = "text"

Let(
  [
    // Determine value of original string with ALL whitespace removed.  
    _normalized = Substitute(
      _text;
      [ " ";		dev.Nil ];
      [ " ";		dev.Nil ];
      [ "	";	dev.Nil ];
      [ "¶";		dev.Nil ]
    );
    
    // Determine position of first non-ws character in original string.
    _first_char = Position( _text; Left( _normalized; 1 ); 0; 1 );
    
    // Determine position of last non-ws character in original string.
    _last_char = Position( _text; Right( _normalized; 1 ); Length( _text ); -1 )
  ];
  
  // If any non-whitespace characters exist return appropriate middle portion of
  // original Text.
  Case(
    _first_char;	Middle( _text; _first_char; _last_char - _first_char + 1 )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="414" name="text.TrimPilcrows"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.TrimPilcrows ( _text )
// Purpose:		Remove pilcrow characters from the start and end of the text.
// Parameters:		_text:	The text to remove the pilcrows from.
// Requirements: 	text.StartsWith
//				text.EndsWith
// Version:		1.0 Jim Feuerstein
// Notes:			This function may be unnecessary given the presence of text.SuperTrim
// 				Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

Let (
  [
    _new_len = Length ( _text ) - 1
  ] ;

  Case (
    text.StartsWith ( _text ; "¶" ) ;
    text.TrimPilcrows ( Right ( _text ; _new_len ) ) ;

    text.EndsWith ( _text ; "¶" ) ;
    text.TrimPilcrows ( Left ( _text ; _new_len ) ) ;

    _text
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="415" name="text.TrimStart"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// txtp.TrimStart ( _text ; _chars )
// Purpose:		Removes the specified number of characters from the beginning of the text.
// Parameters:		_text:	The text to trim
//				_chars:	The number of characters to remove
// Version:		1.0 - Nicholas Orr - 11-06-03
// Notes:			http://www.goya.com.au/blog/guide-filemaker-import-paths
// Example:		txtp.TrimStart ( "some text"; 5 ) = "text"

Right ( _text ; Length ( _text ) - _chars )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="416" name="text.WhitespacePosition"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.WhitespacePosition ( _text ; _start )
// Purpose:		Returns the position of whitespace (space, return or tab)
// Parameters:		_text:	The text to search
//				_start:	Where to start looking for whitespace
// Version:		1.0 - Charles Ross - 18-04-13
// Example:		sample = result

Let (
  [
    _space	= Position ( _text ; " " ; _start ; 1 ) ;
    _return	= Position ( _text ; "¶" ; _start ; 1 ) ;
    _tab	= Position ( _text ; Char ( 9 ) ; _start ; 1 ) ;

    _space = Case (
      _space = 0	; 1.0e+100
			; _space
    ) ;

    _return = Case (
      _return = 0	; 1.0e+100
			; _return
    ) ;

    _tab = Case (
      _tab = 0	; 1.0e+100
			; _tab
    ) ;

    _result = Case (
      ( _space = 1.0e+100 )
        and ( _return = 1.0e+100 )
        and ( _tab = 1.0e+100 ) ;
     0 ;
    Min ( _space ; _return ; _tab )
  ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="417" name="timestamp_____ Timestamp Processing ________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// One function that deals with formatting timestamps.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="418" name="timestamp.ClockTime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.HoursMinutes
// Purpose:		Return the time formatted for standard display.
// Parameters:		_time:	The time to format
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		timestamp.HoursMinutes ( Time ( 15 ; 6 ; 1 ) ) = "3:06 pm"

Let (
  [
    _time = GetAsTime ( _time )
  ] ;

  timestamp.Format ( _time ; "%l:%M %p" )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="419" name="timestamp.ConvertUnix"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ConvertUnix ( _unix_timestamp )
// Purpose:		Given a timestamp in standard Unix format, return a FileMaker timestamp.
// Parameters:		_unix_timestamp: A string representing a standard Unix timestamp.
// Requirements: 	list.CreateList
//				date.ConvertUnixDate
// Version:		1.0 written 15-08-24 by Charles Ross
// Notes:			Standard Unix timestamp is "YYYY-MM-DD HH:MM:SS.SS". Fractional seconds are
//				discarded.
// Example:		timestamp.ConvertUnix ( "2015-08-24 10:47:42" )
//				  = Timestamp ( Date ( 8 ; 24 ; 2015 ) ; Time ( 10 ; 47 ; 42 ) )

Let (
  [
    _list		= list.CreateList ( _unix_timestamp ; " " ) ;
    _date_string	= GetValue ( _list ; 1 ) ;
    _time_string	= GetValue ( _list ; 2 ) ;

    _date = date.ConvertUnixDate ( _date_string ) ;

    _time_list	= list.CreateList ( _time_string ; ":" ) ;
    _hour		= GetValue ( _time_list ; 1 ) ;
    _minute	= GetValue ( _time_list ; 2 ) ;
    _second	= Int ( GetValue ( _time_list ; 3 ) ) ;
    _time		= Time ( _hour ; _minute ; _second ) ;

    _timestamp = Timestamp ( _date ; _time ) ;

    _result = Case (
      IsEmpty ( _unix_timestamp ) or ( _timestamp = "?" ) ;	dev.Nil ;
											_timestamp
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="420" name="timestamp.Format"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.Format ( _timestamp; _format_string )
// Purpose:		Uses the Unix date command tool flags to take a date and format it by the provided
//				string.
// Parameters:		_timestamp:	The timestamp to format.
//				_format_string:	The string to use for formatting.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 06-06-14
//				1.1 - Charles Ross - 08-12-12
//				1.2 - Charles Ross - 14-12-16
//				1.3 - Charles Ross - 15-10-07 Updated `l` format option to have no leading zero
// Notes:			Uses the same formatting option as the `date` command line tool in Unix
//				(`man date`).
//				https://developer.apple.com/library/mac/documentation/Darwin/Reference/
//				ManPages/man1/date.1.html
//
//				The format options are documented in the `strftime` C function man page
//				(`man strftime`).
//				https://developer.apple.com/library/mac/documentation/Darwin/Reference/
//				ManPages/man3/strftime.3.html
// Example:		timestamp.Format ( Timestamp ( Date ( 3; 27; 15 ); Time ( 14; 3; 6 ) ) ;"%D %H:%m %p" )
//				  = "03/27/15 14:03 PM"

Let(
  [
    _timestamp	= GetAsTimestamp( _timestamp );
    _month		= Month( _timestamp );
    _day		= Day( _timestamp );
    _year		= Year( _timestamp );
    _hour		= Hour( _timestamp );
    _low_hour	= Mod( _hour; 12 ) + ( ( Mod ( _hour ; 12 ) = 0 ) * 12 );
    _minute	= Minute( _timestamp );
    _second	= Seconds( _timestamp );

    //  D - Date in mm/dd/yy format (06/14/06)
    _D = Right( "0" & _month; 2 ) & "/" &
      Right( "0" & _day; 2 ) & "/" &
      Right( _year; 2 );
    //  x - Date in standard format for locale, for this solution just the same
    //   as D
    _xx = _D;

    //  C - Century (20 for 2006)
    _C = Left( _year; 2 );
    //  Y - Year in 4-digit format (2006)
    _Y = _year;
    //  y - Year in 2-digit format (06)
    _yy = Right( _year; 2 );
    //  G - Same as Y
    _G = _Y;
    //  g - Same as y
    _g = _yy;

    //  b - Month name - abbreviated (Jan)
    _bb = Left( MonthName( _timestamp ); 3 );
    //  B - Month name - full (January)
    _B = MonthName( _timestamp );
    //  h - Same as b
    _hh = _bb;
    //  m - Month number (06)
    _mm = Right( "0" & _month; 2 );

    //  W - Week of the year (00-52)
    _W = WeekOfYear( _timestamp ) - 1;
    //  V - Week of the year (01-51)
    _V = _W + 1;
    //  U - Same as W
    _U = _W;

    //  A - Day of the week - full name (Monday)
    _A = DayName( _timestamp );
    //  a - Day of the week - abbreviated name (Mon)
    _aa = Left( _A; 3 );
    //  u - Day of the week - number (Sunday = 1, although date tool has Monday
    //   = 1)
    _uu = DayOfWeek( _timestamp );
    //  d - Day of the month - 2 digits (05)
    _dd = Right( "0" & _day; 2 );
    //  e - Day of the month - digit preceded by a space ( 5)
    _ee = " " & _day;
    //  j - Day of the year - (1-366)
    _jj = DayOfYear( _timestamp );
    //  w - Same as u
    _ww = _uu;

    //  p - AM or PM
    _pp = Case( _hour < 12; "AM"; "PM" );
    //  r - Time in 12-hour format (09:15:36 AM)
    _rr = Right( "0" & _low_hour; 2 ) & ":" &
      Right( "0" & _minute; 2 ) & ":" &
      Right( "0" & _second; 2 ) & " " &
      _pp;
    //  R - Time in 24-hour format - no seconds (17:45)
    _R = Right( "0" & _hour; 2 ) & ":"  &
      Right( "0" & _minute; 2 );
    //  T - Time in 24-hour format (17:45:52)
    _T = _R & ":" & Right( "0" & _second; 2 );
    //  X - Same as T
    _X = _T;
    //  Z - Time zone offset from UTC (-07), NOT SUPPORTED

    //  H - Hour in 24-hour format (17)
    _H = Right( "0" & _hour; 2 );
    //  I - (upper case i) Hour in 12-hour format (05)
    _I = Right( "0" & _low_hour; 2 );
    //  k - Same as H
    _k = _H;
    //  l - (lower case L) Hour in 12-hour format (5)
    _ll = _low_hour;

    //  M - Minutes (35)
    _M = Right( "0" & _minute; 2 );
    //  S - Seconds (05)
    _S = Right( "0" & _second; 2 );
    //  s - Seconds elapsed since 1/1/1970
    _ss = GetAsNumber(
      _timestamp - Timestamp( Date( 1; 1; 1970 ); Time( 0; 0; 0 ) )
    )
  ];

  Substitute( _format_string;
    [ "%%";		"%"	];
    [ "%D";		_D	];
    [ "%x";		_xx	];
    [ "%C";		_C	];
    [ "%Y";		_Y	];
    [ "%y";		_yy	];
    [ "%G";		_G	];
// [ "%g";		_gg	]; Unsupported Unix flag
    [ "%b";		_bb	];
    [ "%B";		_B	];
    [ "%h";		_hh	];
    [ "%m";		_mm	];
    [ "%W";		_W	];
    [ "%V";		_V	];
    [ "%U";		_U	];
    [ "%a";		_aa	];
    [ "%A";		_A	];
    [ "%u";		_uu	];
    [ "%d";		_dd	];
    [ "%e";		_ee	];
    [ "%j";		_jj	];
    [ "%w";		_ww	];
    [ "%p";		_pp	];
    [ "%r";		_rr	];
    [ "%R";		_R	];
    [ "%T";		_T	];
    [ "%X";		_X	];
    [ "%H";		_H	];
    [ "%I";		_I	];
// [ "%k";		_kk	]; Unsupported Unix flag
    [ "%l"; 		_ll	];
    [ "%M";		_M	];
    [ "%S";		_S	];
    [ "%s";		_ss	]
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="421" name="timestamp.FromISO8601"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.FromISO8601 ( _iso )
// Purpose:		Converts an ISO8601 timestamp into a FileMaker timestamp.
// Parameters:		_iso:		Text of an ISO8601 timestamp.
// Requirements: 	lsts.CreateList
// Version:		1.0 - Charles Ross - 15-12-22
// Example:		timestamp.FromISO8601 (  "2015-12-01T20:34:56Z" ) = Timestamp ( Date ( 12 ; 1; 2015 ) ; Time ( 20 ; 34 ; 56 ) )

Let (
  [
    _list = list.CreateList ( _iso ; "T" ) ;

    _date_list = list.CreateList ( GetValue ( _list ; 1 ) ; "-" ) ;

    _date = Date (
      GetValue ( _date_list ; 2 ) ;
      GetValue ( _date_list ; 3 ) ;
      GetValue ( _date_list ; 1 )
    ) ;

    _time_list = list.CreateList ( GetValue ( _list ; 2 ) ; ":" ) ;

    _time = Time (
      GetValue ( _time_list ; 1 ) ;
      GetValue ( _time_list ; 2 ) ;
      GetAsNumber ( GetValue ( _time_list ; 3 ) )
    )

  ] ;

  Timestamp ( _date ; _time )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="422" name="timestamp.FromRFC2822"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.FromRFC2822 ( _rfc_2822 )
// Purpose:		Parses an RFC2822 timestamp into a FileMaker timestamp
// Parameters:		_rfc_2822: The RFC2822 formatted string
// Version:		1.0 - Charles Ross - 17-07-09
// Example:		sample = result

Let (
  [
   _list = list.CreateList ( _rfc_2822 ; " " ) ;

    _month = date.MonthNumber ( GetValue ( _list ; 3 ) ) ;
    _day = GetAsNumber ( GetValue ( _list ; 2 ) ) ;
    _year = GetValue ( _list ; 4 )
  ] ;

  Timestamp ( Date ( _day ; _month ; _year ) ; GetAsTime ( GetValue ( _list ; 5 ) ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="423" name="timestamp.ICSFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ICSFormat ( _date ; _start ; _end ; _summary ; _description ; _location )
// Purpose:		Return the ICS file format version of the parameters passed.
// Parameters:		_date:		The date of the appointment
//				_start:		The start time of the appointment
//				_end:		The end time for the appointment
//				_summary:	The summary of the appointment
//				_description:	The details of the appointment
//				_location:		The location of the appointment
// Requirements: 	timestamp.ToiCalFormat
// Version:		1.0 - Charles Ross - 18-11-08
// Notes:			Inspired by work of Douglas Alder
// Example:		sample = result

Let (
  [
    _start_ts = Timestamp ( _date ; _start ) ;
    _start_ts = timestamp.ToiCalFormat ( _start_ts ) ;

    _end_ts = Timestamp ( _date ; _end ) ;
    _end_ts = timestamp.ToiCalFormat ( _end_ts ) ;

    _result = List (
      "BEGIN:VCALENDAR" ;
      "VERSION 2.0" ;
      "PRODID:-//FileMaker Pro//NONSGML Demo//EN" ;
      "BEGIN:VEVENT" ;
      "SUMMARY:" & _summary ;
      "UUID:" & Get ( UUID ) ;
      "DTSTAMP:" & _start_ts ;
      "DTSTART:" & _start_ts ;
      "DTEND:" & _end_ts ;
      "DESCRIPTION:" & _description ;
      "LOCATION:" & _location ;
      "END:VEVENT" ;
      "END:VCALENDAR"
    ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="424" name="timestamp.LocalMilliseconds"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.LocalMilliseconds
// Purpose:		Return the current timestamp accurate to milliseconds.
// Requirements: 	timestamp.UTCDifference
// Version:		1.0 - Charles Ross - 17-02-10

GetAsTimestamp ( ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) + GetAsNumber ( timestamp.UTCDifference ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="425" name="timestamp.MonDDYYYYHHMMP"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.MonDDYYYYHHMMP ( _timestamp )
// Purpose:		Return a formatted timestamp in the form }Mon DD, YYYY, HH:MM pm"
// Parameters:		_timestamp:	The timestamp to format.
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 18-06-27
// Notes:			Notes
// Todo:			To dos
// Example:		timestamp.MonDDYYYYHHMMP ( Timestamp ( Date ( 6 ; 27 ; 2018 ) ; Time ( 12 ; 30 ; 0 ) ) ) = "Jun 27, 2018, 12:30 pm"

timestamp.Format ( _timestamp ; "%b%e, %Y, %l:%M %p" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="426" name="timestamp.PeriodicDays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.PeriodicDays ( _start ; _frequency ; _after )
// Purpose:		Return the next date after a give timestamp's date that is the a multiple of frequency days away from the start date
// Parameters:		_start:		The date at which the periodic dates start
//				_frequency:	The frequency of the period, 1 would be every day, 7 would be once a week
//				_after:		The result must be after this date
// Requirements: 	date.PeriodicDays
// Version:		1.0 - Charles Ross - 19-08-29
// Example:		sample = result

Timestamp ( date.PeriodicDays ( GetAsDate ( _start ) ; _frequency ; _after ) ; GetAsTimestamp ( _start ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="427" name="timestamp.TextualTime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.TextualTime ( _time )
// Purpose:		Returns the time with words for units.
// Parameters:		_time:	The time to format
// Requirements: 	math.RoundTo
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		timestamp.TextualTime ( Time ( 3 ; 4; 5 ) ; False ) = "3 hours, 4 minutes and 5 seconds"

Let (
  [
    _time = GetAsTime ( Case (
      _round_seconds	; math.RoundTo ( _time ; 60 )
				; _time
    ) ) ;

    _hours		= Hour ( _time ) ;
    _minutes	= Minute ( _time ) ;
    _seconds	= Seconds ( _time ) ;

    _hour_metric = Case (
      _hours = 0	; dev.Nil ;
      _hours = 1	; "1 hour"
      			; _hours & " hours"
    ) ;

    _minute_metric = Case (
      _minutes = 0	; dev.Nil ;
      _minutes = 1	; "1 minute"
				; _minutes & " minutes"
    ) ;

    _second_metric = Case (
      _seconds = 0	; dev.Nil ;
      _seconds = 1	; "1 second"
				; _seconds & " seconds"
    ) ;

    _metrics = List ( _hour_metric ; _minute_metric ; _second_metric ) ;

    _result = Choose ( ValueCount ( _metrics ) ;
      "0 seconds" ;
      _metrics ;
      GetValue ( _metrics ; 1 ) & " and " & GetValue ( _metrics ; 2 ) ;
      GetValue ( _metrics ; 1 ) & ", " & GetValue ( _metrics ; 2 ) & " and " & GetValue ( _metrics ; 3 )
    ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="428" name="timestamp.ToiCalFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ToiCalFormat ( _timestamp )
// Purpose:		Converts a FileMaker timestamp into that used in the iCal file format.
// Parameters:		_timestamp:	The timestamp to convert
// Requirements: 	timestamp.FormatTimestamp
//				timestamp.UTCDifference
// Notes:			Converts to the version that uses UTC time instead of providing the time zone offset.
// Version:		1.0 - Charles Ross - 18-11-08
// Example:		timestamp.ToiCalFormat ( Timestamp ( Date ( 12 ; 1; 2015 ) ; Time ( 12 ; 34 ; 56 ) ) ) = "20151201T203456Z"

timestamp.Format ( _timestamp - timestamp.UTCDifference ; "%Y%m%dT%H%M%SZ" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="429" name="timestamp.ToISO8601"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ToISO8601 ( _timestamp )
// Purpose:		Converts a FileMaker timestamp into the ISO8601 format.
// Parameters:		_timestamp:	The timestamp to convert
// Requirements: 	timestamp.FormatTimestamp
//				timestamp.UTCDifference
// Notes:			Converts to the version that uses UTC time instead of providing the time zone offset.
// Version:		1.0 - Charles Ross - 15-12-22
// Example:		timestamp.ToISO8601 ( Timestamp ( Date ( 12 ; 1; 2015 ) ; Time ( 12 ; 34 ; 56 ) ) ) = "2015-12-01T20:34:56Z"

timestamp.Format ( _timestamp - timestamp.UTCDifference ; "%Y-%m-%dT%TZ" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="430" name="timestamp.UTCDifference"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.UTCDifference
// Purpose:		Returns the time difference between the current timezone and UTC. 
// Version:		1.0 - Jeremy Bante - 14-05-18
// Notes:			https://www.briandunning.com/cf/1442
//				Adding the results to UTC time should give the local time, while subtracting this from the
//				local time should give UTC time.
// Example:		// When run in California…
//				timestamp.UTCDifference = "-8:00:00"

Get ( CurrentTimestamp ) - GetAsTimestamp ( Floor ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="431" name="triggers_____ Trigger Control ______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that allow for the control of script trigger execution.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="432" name="triggers._ScriptKey"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers._ScriptKey
// Purpose:		A convenience function that is used by both trig.Disable and trig.Enable.
// Requirements: 	$_triggers_disabled_key
// Version:		1.0 - Charles Ross - 15-06-20

Char ( 9 ) & $_triggers_disabled_key & ¶]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="433" name="triggers.Active"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Active
// Purpose:		Checks a global variable to determine if script triggers should be allowed to run.
// Requirements: 	$$_TRIGGERS_DISABLED
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
// Example:		// Assuming triggers have been disabled…
//				not triggers.Active

not $$_TRIGGERS_DISABLED]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="434" name="triggers.Disable"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Disable
// Purpose:		Sets global variables to indicate that the current script is suppressing triggers.
// Requirements: 	$$_TRIGGERS_DISABLED
//				$$_TRIGGERS_DISABLED_SCRIPTS
//				$_triggers_disabled_key
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
//				This function must be called from within a script. Otherwise it will not supress
//				triggers and will return False.
// Example:		// When called within a script…
//				triggers.Disable = True

Let (
  [
    _script_name		= Get ( ScriptName ) ;
    _script_is_running		= not IsEmpty ( _script_name ) ;

    // Has this script already disabled triggers?
    _disable_is_running	= not IsEmpty ( $_triggers_disabled_key ) ;

    // If this script already disabled triggers, use the existing key, otherwise generate a new one.
    $_triggers_disabled_key = Case (
      _disable_is_running	; $_triggers_disabled_key ;
      _script_is_running	; Get ( UUID )
    ) ;

    // If this is the first time this script is disabling triggers, add it to the list.
    $$_TRIGGERS_DISABLED_SCRIPTS = Case (
      _script_is_running and not _disable_is_running ;		_script_name & triggers._ScriptKey ;
      											dev.Nil
    ) & $$_TRIGGERS_DISABLED_SCRIPTS;

    $$_TRIGGERS_DISABLED = _script_is_running or $$_TRIGGERS_DISABLED
  ] ;

  _script_is_running
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="435" name="triggers.Enable"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Enable
// Purpose:		Sets global variables to indicate that the current script is no longer suppressing
//				triggers.
// Requirements: 	$$_TRIGGERS_DISABLED
//				$$_TRIGGERS_DISABLED_SCRIPTS
//				$_triggers_disabled_key
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
//				This function checks to see if there are other scripts that are suppressing triggers
//				before enabling them, preventing subscripts for enabling triggers that calling
//				scripts have disabled.
// Example:		// When called within a script but a calling script has already disabled triggers…
//				triggers.Enable = False

Case (
  not IsEmpty ( $_triggers_disabled_key ) ;
  Let (
    [
      // Remove this script's entry from the list of scripts that have disabled triggers.
      _scripts_len		= Length ( $$_TRIGGERS_DISABLED_SCRIPTS ) ;
      _script_pos		= Position ( $$_TRIGGERS_DISABLED_SCRIPTS ; triggers._ScriptKey ; _scripts_len ; -1 ) ;

      _break_pos = Case (
        _script_pos > 0 ;	Position ( $$_TRIGGERS_DISABLED_SCRIPTS ; ¶ ; _script_pos ; 1 ) ;
					0
      ) ;

      $$_TRIGGERS_DISABLED_SCRIPTS =
        Right ( $$_TRIGGERS_DISABLED_SCRIPTS ; _scripts_len - _break_pos ) ;

      // Only enable the triggers if no other calling scripts have disabled them.
      $$_TRIGGERS_DISABLED = Case (
        not IsEmpty ( $$_TRIGGERS_DISABLED_SCRIPTS ) and $$_TRIGGERS_DISABLED ;	True ;

        dev.Nil
      ) ;

      $_triggers_disabled_key = dev.Nil
    ] ;

    dev.Nil
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="436" name="triggers.Force"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Force
// Purpose:		Forces triggers to enable. Should always be accompanied by triggers.Restore
// Version:		1.0 - Charles Ross - 17-04-27
// Notes:			Execute this, with triggers.Retore, when a script step absolutely *must* have
//				triggers turned on.
// Example:		sample = result

Let (
  [
    $$_TRIGGERS_SCRIPTS_STORE = $$_TRIGGERS_DISABLED_SCRIPTS ;
    $$_TRIGGERS_DISABLED_SCRIPTS = dev.Nil ;
    $$_TRIGGERS_DISABLED = dev.Nil
  ] ;

  ""
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="437" name="triggers.Reset"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Reset
// Purpose:		Forces any existing trigger suppression to be halted regardless of calling script
//				trigger suppression state.
// Requirements: 	$$_TRIGGERS_DISABLED
//				$$_TRIGGERS_DISABLED_SCRIPTS
//				$_triggers_disabled_key
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
//				This may be useful to recover from a situation where a script forgot to call
//				TriggersEnable at the end of operation. In order to be suppressed, a script called
//				via trigger should use the TriggersAreActive function to decide whether or not to run.
// Example:		// Completely halts the suppression of triggers…
//				trig.Reset

dev.ClearVars ( List (
  "$$_TRIGGERS_DISABLED_SCRIPTS" ;
  "$$_TRIGGERS_DISABLED" ;
  "$_triggers_disabled_key"
) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="438" name="triggers.Restore"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Restore
// Purpose:		Restores triggers to their previous state after a force enable.
// Version:		1.0 - Charles Ross - 17-04-27
// Example:		sample = result

Let (
  [
    $$_TRIGGERS_DISABLED_SCRIPTS = $$_TRIGGERS_SCRIPTS_STORE ;
    $$_TRIGGERS_SCRIPTS_STORE = dev.Nil ;
    $$_TRIGGERS_DISABLED = not IsEmpty ( $$_TRIGGERS_DISABLED_SCRIPTS )
  ] ;

  ""
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="439" name="url_____ URL Builders ______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that assist with building URL strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="440" name="url._LetNotationToURLVars"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[/*// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-10
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  ValueCount ( _let_notation ) = 0 ;
  dev.Nil ;

  Let (
    [
      _name = <Function Missing> ( _let_notation ) ;
      _value = let.Get ( _let_notation ; _name ) ;

      _let_notation = let.Remove ( _let_notation ; _name )
    ] ;

    url.Param ( _name ; _value ) & url._LetNotationToURLVars ( _let_notation )
  )
)*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="441" name="url.Auth"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.Auth ( _user ; _password )
// Purpose:		Adds a user's name and password to a URL, replaces one if it already exists.
// Parameters:		_user:		The user's account name
//				_password:	The password string
// Requirements: 	url.Bookend
//				url.ProtocolEnd
//				dev.Nil
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			The authorization string comes after the protocol but before the "@" symbol.
//				http://www.modularfilemaker.org/module/urlbuilder/
// Example:		sample = result

Let (
  [
    _auth_end = "@" ;

    _new_url = $$_URLB_CURRENT_URL ;

    // Clear out any existing authorization.
    _pos_1		= Position ( _new_url ; "://" ; 1; 1 ) + Length ( "://" ) ;
    _pos_2		= Position ( _new_url ; _auth_end ; _pos_1 ; 1 ) + Length ( _auth_end ) ;
    _size		= _pos_2 - _pos_1 ;
    _old_auth	= Middle ( _new_url ; _pos_1 ; _size );

    _new_url = Case (
      IsEmpty ( _old_auth ) ;		_new_url ;
						Substitute ( _new_url ; _old_auth ; dev.Nil )
    ) ;

    // Calculate and insert the new authorization
    _new_auth = Case (
      IsEmpty ( _user & _password ) ;	dev.Nil ;
							_user & ":" & _password & _auth_end
    ) ;

    _new_url = Substitute(
      _new_url	; "://"
      			; "://" & _new_auth
    )

  ];

  // This will assign the updated URL to the global variable.
  url.Bookend ( _new_url )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="442" name="url.Bookend"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.URL ( _value )
// Purpose:		Gets or sets the current URL
// Parameters:		_value:	Optional, if passed, gets the current URL
// Requirements:	devp.Nil
//				text.StartsWith
// Version:		1.0 - Todd Geist - 15-06-20
//				1.1 - Charles Ross - 17-07-06 - Added httppost as valid protocol
// Notes:			Start and END all chains with this function, EXCEPT fmp URLs - use urlb.FMP for that.
//				http://www.modularfilemaker.org/module/urlbuilder/
// Example:		url.Bookend ( "http://www.geistinteractive.com" ) & 
//				  url.Auth ( "admin" ; "password" ) & 
//				  url.Path ( "contacts" ) &
//				  url.Path ( "23345" ) &
//				  url.Param ( "max" ; "100" ) &
//				  url.Param ( "skip" ; "100" ) &
//				  url.Bookend ("")
//				= "http://admin:password@www.geistinteractive.com/contacts/23345?max=100&skip=100"

Let (
  [
    // If no value is passed, return the final URL in the chain.
    _result = Case (
      IsEmpty ( _value )	; $$_URLB_CURRENT_URL
					; dev.Nil
    ) ;

    // Remove the trailing slash if there is one.
    _value = Case (
      Right ( _value ; 1 ) = "fmp://"	; Left ( _value ; Length ( _value ) - 1 )
							; _value
    ) ;

    _starts_with_protocol = text.StartsWith ( _value ; "http://" )
      or text.StartsWith ( _value ; "https://" )
      or text.StartsWith ( _value ; "httppost://" )
      or text.StartsWith ( _value ; "fmp://" ) ;

    // If the value already starts with a protocol, keep it, otherwise add a default protocol (http). If the value
    // is blank because we're at the end of the chain, retain that, which will next clear out the global variable.
    _value = Case(
      _starts_with_protocol		; _value;
      not IsEmpty( _value ) 		; "http://" & _value
						; _value
    ) ;

    $$_URLB_CURRENT_URL = _value

  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="443" name="url.FMP"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.FMP ( _filename ; _host )
// Purpose:		special chain starter for building fmp URLs.
// Parameters:		_filename:		optional name of the target file, defaults to current file
//				_host:		optional address of the target host, defaults to current file's host
// Requirements: 	urlb.Bookend
//				urlb.VariableStart
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			If you don't pass in the two optional parameters, you get a URL that targets the current
//				file.
//				The format for FMP URLs is
//				fmp://[[users:pw@]addr]/file[?script=name[&param=value][&$param=value]]
//				http://www.modularfilemaker.org/module/urlbuilder/
// Example:		// When called within "File.fmp12"…
//				( url.FMP ( "" ; "" ) & 
//				  url.Param ( "script" ; "New Contact" ) & 
//				  url.Param ( "firstName" ; "Todd" ) & 
//				  url.Param ( "lastName" ; "Geist" )  & 
//				  url.Bookend ( "" )
//				= "fmp://$/File?script=New%20Contact&%24firstName=Todd&%24lastName=Geist" )
//				  and
//				( url.FMP ( "Contacts" ; "192.168.45.1" ) &
//				  url.Param ( "script" ; "New Contact" ) & 
//				  url.Param ( "firstName" ; "Todd" ) & 
//				  url.Param ( "lastName" ; "Geist" )  & 
//				  url.Bookend ( "" )
//				= "fmp://192.168.45.1/Contacts?script=New%20Contact&%24firstName=Todd&%24lastName=Geist" )

Let (
  [
    _default_filename	= Get ( FileName ) ;
    _default_host	= Case (
      Get ( MultiUserState ) = system.MultiUserStateOff	; "$"
											; Get ( HostIPAddress ) 
    ) ;

    _host = Case (
      IsEmpty ( _host ) and IsEmpty ( _default_host )	; "://" ;
      IsEmpty ( _host )							; _default_host
										; _host
    ) ;

    _filename = Case(
      IsEmpty ( _filename )	; _default_filename
					; _filename
    ) ;

    _fmp = "fmp://" & _host & "/" & _filename

  ];

  // Assign this to the global variable for the chain.
  url.Bookend ( _fmp ) 
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="444" name="url.Param"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// urlb.Param ( _name ; _value )
// Purpose:		Adds a name/value pair to the URL query, where the query starts after the "?"
// Parameters:		_name:	The name of the value
//				_value:	The value assigned to the name
// Requirements: 	urlb.Bookend
//				text.StartsWith
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			http://www.modularfilemaker.org/module/urlbuilder/
// Example:		sample = result

Let (
  [
    _old_url	= $$_URLB_CURRENT_URL  ;
    _is_fmp_url	= text.StartsWith ( _old_url ; "fmp://" ) ;

    // If working with an FMP URL, if the name isn't script and doesn't already have a variable indicator,
    // insert it.
    _name = Case (
      _is_fmp_url
        and ( not text.StartsWith ( _name ; "$" ) )
        and ( _name ≠ "param" )
        and ( _name ≠ "script" )							; "$" & _name
												; _name
    );

    _param  = GetAsURLEncoded ( _name ) &"=" & GetAsURLEncoded ( _value );

    // If this is the first parameter, use the "?", otherwise use the "&".
    _sep = Case (
      PatternCount( _old_url; "?" )	; "&"
						; "?"
    )
  ];

  url.Bookend ( _old_url & _sep & _param )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="445" name="url.Path"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.Path ( _segment )
// Purpose:		Adds a segment to the path of a URL, the path is the string after the domain and before
//				the query.
// Parameters:		_segment:		a segment is a string between path separators ("/")
// Requirements: 	urlb.Bookend
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			http://www.modularfilemaker.org/module/urlbuilder/
// Example:		sample = result

Let (
  [
    _new_url = $$_URLB_CURRENT_URL ;

    _pos_1 = Position ( _new_url ; "https://" ; 1 ; 3 ) ;
    _base = Left ( _new_url ; _pos_1 ) ;

    _pos_2 = Position ( _new_url ; "?" ; 1 ; 1 ) ;

    _query = Case (
      _pos_2 = 0		; dev.Nil
				; Middle(_new_url ; _pos_2 ; 1000000 )
    ) ;

    _pos_2 = Case (
      _pos_2 = 0		; Length ( _new_url )
				; _pos_2
    ) ;

    _old_path = Middle ( _new_url ; _pos_1 + 1 ; _pos_2 - _pos_1 )

  ];

  url.Bookend ( _base & _old_path & "https://" & _segment & _query )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="446" name="url.PerformScriptByName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-10
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _ = url.FMP ( "" ; "" ) ;

    _ = Case (
      dev.IsSet ( _script ) ;
      url.Param ( "script" ; _script )
    ) ;

    _ = Case (
      dev.IsSet ( _param ) ;
      url.Param ( "param" ; _param )
    ) ;

    _ = Case (
      ValueCount ( _vars ) > 0 ;
      url._LetNotationToURLVars ( _vars )
    ) ;

    _result = url.Bookend ( "" )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="447" name="url.TimestampedToken"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.TimestampedToken
// Purpose:		Return a token that expires one hour after being generated
// Version:		1.0 - Charles Ross - 19-08-19
// Example:		sample = result

Let (
  [
    _uuid = Lower ( Get ( UUID ) ) ;
    _timestamp = math.IntegerToHex ( GetAsNumber ( Get ( CurrentTimestamp ) ) ) ;
    _token = _uuid & "-" & _timestamp
  ] ;

  _token
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="448" name="window_____ Window Utility Functions _______________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that ease working with utility windows.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="449" name="window.CenterLeft"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.CenterLeft ( _parent_left; _parent_width )
// Purpose:		Returns the left coordinate that the current window should have to center within a
//				parent window of the given dimentions.
// Parameters:		_parent_left:	The left coordinate of the parent window.
//				_parent_width:	The width of the parent window.
// Version:		1.0 - Charles Ross - 15-04-09
//				1.1 - Charles Ross - 17-04-06 - Fixed bug that referenced incorrect dimension.
// Todo:			Provide examples.
// Example:		sample = result

Max( ( ( _parent_width - Get( WindowWidth ) ) / 2 ) + _parent_left; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="450" name="window.CenterTop"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.CenterTop ( _parent_top; _parent_height )
// Purpose:		Returns the top coordinate that the current window should have to center within a
//				parent window of the given dimentions.
// Parameters:		_parent_top:	The top coordinate of the parent window.
//				_parent_height:	The height of the parent window.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-04-09
// Todo:			Provide examples.
// Example:		sample = result

Max( ( ( _parent_height - Get( WindowHeight ) ) / 2 ) + _parent_top; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="451" name="window.HeightFromContent"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[_content_height + 37]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="452" name="window.Offscreen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.Offscreen
// Purpose:		Returns a large negative number for hiding offscreen utility windows, overriding this for
//				developers.
// Requirements:	devp.IsDeveloper
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-04-09
//				1.1 - Charles Ross - 17-04-11 - Added ability for dev to override on screen with shift key
//				1.2 - Charles Ross - 17-08-13 - Added ability for dev to override on screen with global variable
// Example:		// Assuming the current user is not a developer...
//				window.Offscreen = -9000

Let (
  [
    _on_screen = dev.IsDeveloper
      and ( not modifier.KeyActive ( modifier.Shift ) )
      and ( not $$_WINDOW_OFFSCREEN_FOR_DEVELOPER )
  ] ;

  Case (
    _on_screen	; 0
			; -9000
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="453" name="window.Utility"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.Utility ( _id )
// Purpose:		Returns a window name that can be referred to later, often with a Close Window step.
// Parameters:		_id:	The identifier to refer to the window with when a script works with multiple utility
//					windows.
// Version:		1.0.0 - Charles Ross - 15-04-09
//				1.0.1 - Charles Ross - 17-12-07 - Use UUID as default if no ID is given.
// Example:		window.Utility ( "entity" ) = "utility_window_entity"

"utility_window" & "_" & dev.Default ( _id ; Get ( UUID ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="454" name="window.WidthFromContent"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[_content_height + 15]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="455" name="xml_____ XML Parsing _______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for processing XML data.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="456" name="xml.ExtractData"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// xmlp.ExtractData ( _xml ; _tag ; _idx )
//
// Purpose:		Returns the contents of the instanceth attribute of the xml.
//
// Parameters:		_xml:	The XML data to parse
//				_tag:		The tag to get the data from
//				_idx:		Which instance of the tag to get.
//
// Requirements: 	requirements
//
// Version:		1.0 written 08-04-29 by Andy Knasinski
//
// Notes:			https://www.briandunning.com/cf/1
//
// Todo:			Debug edit in comments below that was made by Daniel A. Shockley which is supposed
//				to be able to handle tags with attributes (i.e., <InvNum attrb="value">123</InvNum>).
//
// Example:
// Let (
//   [
//     _xml = List (
//       "<xml>" ;
//       "  <InvNum>123</InvNum>" ;
//       "  <InvNum>456</InvNum>" ;
//       "  <InvNum>789</InvNum>" ;
//       "</xml>"
//     )
//   ] ;
// 
//   xmlp.ExtractData ( _xml ; "InvNum" ; 2 )
// ) = 456


// https://www.briandunning.com/cf/1

Let (
  [
    _xml_len = Length ( _xml ) ; 
    _tag_len = Length ( _tag ) ; 
    _idx = If ( IsEmpty ( _idx ) ; 1 ; _idx ) ;

    _open = "<" & _tag & ">" ;
    _close = "</" & _tag & ">" ;

    _open_pos = Position ( _xml ; _open ; 1 ; _idx ) ;
    _close_pos = Position ( _xml ; _close ; 1 ; _idx ) ;

    _start = _open_pos + _tag_len + 2 ;
    _len = _xml_len - ( _xml_len - _close_pos ) - ( _open_pos + _tag_len + 2 )
  ] ;

  Case(
    IsEmpty ( _xml )
      or IsEmpty ( _tag )
      or ( PatternCount ( _xml ; _open ) = 0 ) ;
    dev.Nil ;

    Middle ( _xml ; _start ; _len )
  )
)

/* //version 1.1, Daniel A. Shockley
Let ( [ 
XML_Length = Length ( _xml ) 
; Attribute_Length = Length ( _attribute ) 
; Get_Instance = If ( IsEmpty ( _instance ) ; 1 ; _instance ) 
; posOpenTagStart = Position ( _xml ; "<" & _attribute; 1; Get_Instance ) 
; posNextOpen = Position ( _xml ; "<"; posOpenTagStart + 1; 1 ) 
; posOpenTagFinish = Position ( _xml ; ">"; posOpenTagStart; 1 ) 
; posCloseTagStart = Position( _xml; "</" & _attribute & ">"; posOpenTagFinish; 1 )
]; 


Case(
IsEmpty ( _xml ) or IsEmpty ( _attribute ) 
or ( posOpenTagStart = 0 ) // Attribute not in XML at all
or ( posNextOpen>0 and posOpenTagFinish> posNextOpen ) // Attribute seems to start, but another tag starts before opening tag brackets close
; "" 
;
Middle ( 
_xml 
; posOpenTagFinish + 1 
; posCloseTagStart - posOpenTagFinish - 1
)
) 

)*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
				</ObjectList>
			</CalcsForCustomFunctions>
			<ScriptCatalog membercount="121">
				<Script id="1" name="Templates" isFolder="True">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">1</Options>
					<TagList>#^FMI%SCRPTACBFAFCA192565E0BED112E78841AA2FFCC24EFDB95008FA4A550C5944B339922465242A33D642E896975814D5C5FD1F </TagList>
				</Script>
				<Script id="2" name="Script Template">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT2247821B1CA2BFE0AC171F3A78B7C7B5C56BE087CE6F9F1FDEA3223552A2FBDC6A2EA4CA896344E3A90485DC78798561 </TagList>
				</Script>
				<Script id="3" name="PSoS Template">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT3E2B5837BC8C2B689A3597C69FA9D0FDBFE6DA5A2BB7ECCB6AAA8E692721B660AF8284A2271E4B4A90E7147A413C15DD </TagList>
				</Script>
				<Script id="4" name="funit testing code">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT57DDB790627EC28CA87A127B6E58741536CB338B0019FFB5B04926FFCE2DDD4F0FF55E4A81C5420E962740D373B7ADE9 </TagList>
				</Script>
				<Script id="5" name="Sandbox">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT9BECDD6EDCC66872563F33B0A3BB86747738D03F30BE553B4CCDA69D25817D9DC75303FCC1144F01880CE3BCA27B9A4F </TagList>
				</Script>
				<Script id="6" name="module" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT9FEDA9BDAE6E2EB3B05298BD23C120760CB425C2097C191E847315C25D591CFF1EE9A0A8E47547FEBD341052CA795534 </TagList>
				</Script>
				<Script id="7" name="module: README">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTC18A32EB915CA1342A74A1B9F753DB457A780C4007AD7319D9BB71273B40D465EDA8FB2B07E14A9EAE5B4CA08D7323DE </TagList>
				</Script>
				<Script id="8" name="module: Config" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT97014723D1673A67C67F653BC6FDEC5E919C157EECD7FF65DB519DD54EFC0595513EE65053644CEBA3C6C2DB899C341C </TagList>
				</Script>
				<Script id="9" name="module: Settings">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTA245212E14074C9343492D8178A665085C2BDE5DFE1192DA935DF122A79F698AAA67EEF85EC7485F80F173BB9CD92121 </TagList>
				</Script>
				<Script id="10" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AD3691A6561F44290BB17C47D2F990A98 </TagList>
				</Script>
				<Script id="11" name="module: Public" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTFE1F73856CDCF6CD9FE5BC810F4C6CA98428397949C75B1879087BCC378FB2464052FB9A96A1461C990D90C2C1C09F88 </TagList>
				</Script>
				<Script id="12" name="module: Public Template">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT74511FE070AA12C403B7302FD58489F5DCB7414B2587E34058EC27FB6138F550761664E22A654955B8E5BCF421C53688 </TagList>
				</Script>
				<Script id="13" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A7B65C2F2F0374E4894E455CD77CFBD8A </TagList>
				</Script>
				<Script id="14" name="module: Tests" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT43D7D8B61387A6CF1CD7667CAF9415051730C231D27A6D2DDF97A9DAC47CB8BEEBCFEB70FB294268A70FF0A84D711538 </TagList>
				</Script>
				<Script id="15" name="module: Something to Test">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTB56FDE7E46689E8081AB401FC860CE47DA2341AC253C4E401A586CC207225481631613E32D704EF2BA8ABE75F32FA59A </TagList>
				</Script>
				<Script id="16" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A818C1368B28B43539E043B94B038D021 </TagList>
				</Script>
				<Script id="17" name="module: Private" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT34F52E288BDA81EBF799DA8E89BCA34994905247211207624E404357E74F86FE8BC2F4012FEC4B98BE20C27B10E7EF96 </TagList>
				</Script>
				<Script id="18" name="module priv: Private Template">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT14B7172B523B38B528641F87E9EC7857B5CF4ADF1C3203B668F90ECF67E04393FEBB89BBE672467EA021BF188135F882 </TagList>
				</Script>
				<Script id="19" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AF600526328DD42A0A10C38D0F02E150E </TagList>
				</Script>
				<Script id="20" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AE9D0F418DCFD45EB805D32B4F44046AC </TagList>
				</Script>
				<Script id="21" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A136D76E8963D405FB20F29083A374E56 </TagList>
				</Script>
				<Script id="22" name="Modules" isFolder="True">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">1</Options>
					<TagList>#^FMI%SCRPT449BBE203B01F2B61085C8DECC18AFBFE08E215F119F5180CC13CF8BA5B25835DDFC032417CA414B81C5D8BB5C2D89F9 </TagList>
				</Script>
				<Script id="54" name="dialog" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT87A6F31BEF05390397A66A1411D609E4A6995ACD0E34F87626F8F96D801988379EF59D42577E4DA5899269113F742AB6 </TagList>
				</Script>
				<Script id="55" name="dialog: README">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT379F5E12A9FD5FFA005594973D196E3CC1DE99AE81F10C269A387C1AEC26DA16F0BF116D379B48EC805302AE3A4D7B0A </TagList>
				</Script>
				<Script id="56" name="dialog: Config" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">9</Options>
					<TagList>#^FMI%SCRPT8B4FC5ADC8D7A91F1F9AE3A69F695CA66D5DF5C58C2361009A3DDACEDF156A2340C93D809BD64860B2DF555FCEDE6196 </TagList>
				</Script>
				<Script id="57" name="dialog: Window Name ( Layout {; ID } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT9024B0DAF046A2307E2F6A6FF74BA27AB5A7DCDCFFEFFF25854C138987BCB38D494DF47B73AF46E58D0082511DD16457 </TagList>
				</Script>
				<Script id="58" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A612E400D71FF40F8BB24FFE722A724C5 </TagList>
				</Script>
				<Script id="59" name="dialog: Public" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT59AB757105CFCDED9E2B32C052644422E76AC6B47CDABA0D54E1DDBB16167C6CE76A0A07995344E59638D6C17CB1E989 </TagList>
				</Script>
				<Script id="60" name="dialog: Begin Loop ( Title ; BaseMsg ; Inputs ; Tests ; Msgs {; Btns ; Labels ; PWStart} )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT8B5FA6C39525F1F4D5D6D61CE22C43AA89EF4F74AAC752A9F32BF646C8EBF4A59D3621EC2BB2444DAF2EC74CA732472A </TagList>
				</Script>
				<Script id="61" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F4CE238128CAED479F8570F5887DCC8F69 </TagList>
				</Script>
				<Script id="62" name="dialog: Edit ( Auth ; Layout ; ID {; Callbacks } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTA696522ADA60E71F94C46EDD3DCA84E3338302BA87E7005E485C242CF37A03F3C434664D8C304572839585C2DEE44062 </TagList>
				</Script>
				<Script id="63" name="dialog: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT67CDAB0F47D4D8A90E7045D90EA891C8C506A247A698C34A9D6381775F371FB0DFCCE2BE57BF4CE1BC0802FC59C0D98A </TagList>
				</Script>
				<Script id="64" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F485871F6757D14EF59072A80F24F75E1F </TagList>
				</Script>
				<Script id="65" name="dialog: onRecordCommit ( IsValid )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTF0B29FB5F5F97BD6C3B9F9D2E022238350B6573EA98A36A29F61E9B23D38684FB0BCE858AC344123967A4CDA5F015373 </TagList>
				</Script>
				<Script id="66" name="dialog: Save">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT1DA2D71D8723A81B7133B277DA742B49CBEDE10411B15F1634AA445C485EFA8281D74A7407054B20A950FBF4F01C72E7 </TagList>
				</Script>
				<Script id="67" name="dialog: Cancel">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT3DE2A66E9E129AC9E62AB939DA56590C205B1A01BC1EBF93AFBF17C58BD4B5087216027CC69C4CFF826ED3A77022B83F </TagList>
				</Script>
				<Script id="68" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F48F20DAE5271C42D7A740BC77B8DB5113 </TagList>
				</Script>
				<Script id="69" name="dialog: onObjectKeystroke Layout">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT09EEB49247DD5653FADE23FB3D1628D15A370B2CF431690203744444FAC91A1DB333DFA04A8740D1A69C945BD8E2F015 </TagList>
				</Script>
				<Script id="70" name="dialog: onObjectKeystroke Long Text Field">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT836B5C4D78434265C6D7384C2A154D037E93E689F9DFAC9D2E99480D9F8D7B37905BE8D73414493993250F78B81602FB </TagList>
				</Script>
				<Script id="71" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A20FABBB986F34079894E25EB326EACD5 </TagList>
				</Script>
				<Script id="72" name="dialog: Tests" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT02778495717FB8BF66BC59E4AE7722E3B923A58070ACBF82C0F163CB267A38C8CB1CBD2DBE584DF89E06025436418AC9 </TagList>
				</Script>
				<Script id="73" name="dialog: Setup">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTF1BE747CCD75B4B6E53286BF8012EFA436C20704641096DD1F122673675A9B8A4FF0480C18D44FD79766D792334A64D2 </TagList>
				</Script>
				<Script id="74" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F4E3F7527A9B774C15AB8B2DC02D272EF9 </TagList>
				</Script>
				<Script id="75" name="dialog: Test New Dialog Save">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTEB75C1F26EE8EF1DED4C3574C1E382CB2EA348417519F89CAD390B95E850AEF69E5AF43253844169B09E055CDD6BCB41 </TagList>
				</Script>
				<Script id="76" name="dialog: Test New Dialog Cancel">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT86024EC19330C9B7BD3F4093239F494CDF2850A8A6F84D7E53A32B692017A00BB5E950C3CF3A49A796E4D8B81B16CF0C </TagList>
				</Script>
				<Script id="77" name="dialog: Test Edit Dialog Save">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTD8591B7F1CCC7B75BA35B9039FEF2C4EAF7DAD0341EE9902CDF2FB21F3552DB657D0D94EEE3E48F0903D31908F9547E5 </TagList>
				</Script>
				<Script id="78" name="dialog: Test Edit Dialog Cancel">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTA10F08EE81BC2E77C13FF7F2201E11A65A8EA740D323F8210F7E8E14518A93BA63545B476DED4A0EBAC46F3C9DF8B3F9 </TagList>
				</Script>
				<Script id="79" name="dialog: Test Callbacks">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTBB93BE071090AFD4D7193DE9596F8638710C7D8D03F7814E5B639FBFFAE59B8C3AA3E20F88504270BB1D5A3C84741A66 </TagList>
				</Script>
				<Script id="80" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F4855C86A1C9C7492BBEAAC568EDF2906A </TagList>
				</Script>
				<Script id="81" name="dialog: Create Test Record">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT9B748EF2DFFC2BB392C4357D75A3B1CC7984C88AC909D94A3CC82FB3A1A685E424556FDC90B64E07984B61D91DFE8C5B </TagList>
				</Script>
				<Script id="82" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F49CF43FAB1FBC4CA1BD1BADBD8A451ABD </TagList>
				</Script>
				<Script id="83" name="dialog: Pre Commit Callback">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTFC649F1B515FFAFD753F535AC06BCEB0DC6E14EDEF1554CA3DFD2C12D9CC7D27D6ADDB05BAD349C790AF5F378A8145F6 </TagList>
				</Script>
				<Script id="84" name="dialog: Post Commit Callback">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT040D9ADDF176C604738DD58CD4ADC54B8A188F679F391C8AC2C03D3CFE3B8F2919055C0C0A9D4C9798F8AC68E7BA4537 </TagList>
				</Script>
				<Script id="85" name="dialog: Post Close Callback">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTEB6C6C09819578A7FAF30D2960A1E8DF8535D5406305C74F070B6BA12788332061C28D226D8248B4A50FF09DADD8617B </TagList>
				</Script>
				<Script id="86" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F4682DCF0EFE3E415498D8968D841A5CCE </TagList>
				</Script>
				<Script id="87" name="dialog: Teardown">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT24D690BD8F5ED3D36B05A7E9E5343B7DA06F847B9F93CDCED6BA74F24374D69595582FA6940747A7A70D10753ACB267C </TagList>
				</Script>
				<Script id="88" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AB54AB62191E945D68CB0ED0176F11E0B </TagList>
				</Script>
				<Script id="89" name="dialog: Private" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT8114B179E5A6EAF10998A786BF64AB337143661994C3C2E8D65675CB48FB82D059AB48A81F054B59A2B95E91AE71633D </TagList>
				</Script>
				<Script id="90" name="dialog priv: Begin Loop ( Title ; BaseMsg ; Inputs ; Tests ; Msgs {; Btns ; Labels ; PWStart} )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTF32E55531F52D164E3147435008635F5C603092C3C4849E08926C97A2E9AD0CC1447935928A649AF84F2E6F53FE9F800 </TagList>
				</Script>
				<Script id="91" name="dialog priv: Show Dialog ( Title ; Msg ; Inputs {; Btns ; Labels ; PWStart} )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT1F251C4710FED07D29610F44A7591142CB5B8CC4560F7700F29A67A0AEF4DA1DB3B7138746804609AF477D763CD6C721 </TagList>
				</Script>
				<Script id="92" name="dialog priv: Validate Arrays ( Tests ; Msgs )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTE59533362D5C70D5555CBAFEB56CE63F04B1594B772EE56C110A9E8EC5B83DDF7B6C318764194DA4854565468CC4AE84 </TagList>
				</Script>
				<Script id="93" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F48AF8790EF55B4A26A275E8F33BA2C77C </TagList>
				</Script>
				<Script id="94" name="dialog priv: Edit ( Auth ; Layout ; ID {; Callbacks } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT76A3FCF027ED167B7CF3549BDAE0BF7B3B8DB39BB8DA5124F32A9508C723C84E9C610CC204464D37B59324C396A8E29B </TagList>
				</Script>
				<Script id="95" name="dialog priv: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT295B6076CCDDAC20F02BBB8CA74B65FEC35DB036A4F7BA9C343E52567CD2D136BAE9C93DDDA04FD3A626E5ACE0EABBD0 </TagList>
				</Script>
				<Script id="96" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F4488CEC9ED66447B7A28241952260ED9C </TagList>
				</Script>
				<Script id="97" name="dialog priv: Commit ( IsValid )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT54C45A4588FCF80978D8FF058C3266D5C51A7B6AE41908543ECBC05C354EB2ADC744FDCBE007485BBAC7B8F8ADCA6AAD </TagList>
				</Script>
				<Script id="98" name="dialog priv: Save">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT255F7CF3B4D8F823BD0C99417CED0523F30FCB955F56140253423B01BDB827ECF6E386CB14CB493CBE48AE1C8C59AC7D </TagList>
				</Script>
				<Script id="99" name="dialog priv: Cancel">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTBDDA729B38DC38F28A899ED6B09FAC4547C2FEFDBE17B91818E5AA4C9AAA721B18C1E05651264FE5B2E2193DC41F7E18 </TagList>
				</Script>
				<Script id="100" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F4C511359AC4EF4861935A173E81E47D97 </TagList>
				</Script>
				<Script id="101" name="dialog priv: Layout Keystroke ( Code )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTA2960C766D8C2459EBE7DA9357BC538AC70DC4F310C03560230DB139380F23C78FF06C8C93244EE0BD4765D0F4977984 </TagList>
				</Script>
				<Script id="102" name="dialog priv: Long Text Field Keystroke ( Code )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT5B5A6094E45D7E005BC4639D3BFA30758502D6DD3293C0057131C33716554A9C3493E6D04D974315B45FBE25D11398D6 </TagList>
				</Script>
				<Script id="103" name="-" isSeparatorItem="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT13C68584094EB150B971AC08665E733900FB5F46E4204BEB9299A8F2A793E3F434A783596E784F02B14FBA8C33E344B8 </TagList>
				</Script>
				<Script id="104" name="dialog priv: Save Callbacks ( { Callbacks } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT2D5143A2680A48DC2044ECA30DC618388CF8F6D0E5944C3AA00186E8D7520B1F84C6CADEAE424FA8ACC748055102B7ED </TagList>
				</Script>
				<Script id="105" name="dialog priv: Clear global variables">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTB3DE755D3C93DFE6B8AAC7457C8EEEA9B2A0BDC7B79E7608BA2D99D4921775ACB07B4E2ED8E44503A0452D8BA3C51DDD </TagList>
				</Script>
				<Script id="106" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AE61AF275739B44D9990B68A6E3450707 </TagList>
				</Script>
				<Script id="107" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AA1477CEC66D34BF3853F15EC484DC5E6 </TagList>
				</Script>
				<Script id="24" name="project" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTBA8386AF06ED2E2B525FC193D37F7D1577AC4DC56E402BFFA18C70C0AE346140FC58F84B4DAE4075BAD6DA3F909C63AE </TagList>
				</Script>
				<Script id="25" name="project: README">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT4B0CD9FB463F59C7DCB3C4D3143CC214259CBB44E1FA6A5B5872BAF4E8FAA6257CD088E7FF6547FB98AD085DE05AD546 </TagList>
				</Script>
				<Script id="26" name="project: Config" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTCA8640A2FDA47DAA568D2E1EC8138875FD5BD28258B4D164DB899D4857894D0CC4A26319C8F441DE806B4269E2BE1FEA </TagList>
				</Script>
				<Script id="27" name="project: Settings">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT5196C4B81CD23676C47F21B6268182EA967084BDDEB7A78753D272B729B43C15C7DE151E5E5B4A41A49C34C9B22CF869 </TagList>
				</Script>
				<Script id="28" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A9F3F2198C07A40BA95FF5796D8621CB2 </TagList>
				</Script>
				<Script id="29" name="project: Public" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT80F3CFB06B51D1A3A1716C2C212C677891D3AE8F4B700A58E662165B9898915CAB84E5C10ECA4EB589DE990FA001082B </TagList>
				</Script>
				<Script id="30" name="project: Public Template">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTB6DF0C7E1093AB82CF595646FC280650287A79D1EF3F69CCD0FD2B72909F0451CA598B407D19449DB52CBDE42A78D85D </TagList>
				</Script>
				<Script id="31" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A48C79C9F23E64633A644C18EF4AB5535 </TagList>
				</Script>
				<Script id="32" name="project: Tests" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT61ED3E62D63C89F1E8ED04E11EEA15357F2C5CBD409D7BB88C7A01B6471D2856446D359908364C27BBA9BB3AF04F6FBC </TagList>
				</Script>
				<Script id="33" name="project: Something to Test">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT3B3F398C06D3AB7FBCA97998A859E9F6A2620CB46032FBA95D175221968230C982A0E44497464FC28F5F3C687FF0B1BA </TagList>
				</Script>
				<Script id="34" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AD69539A40AF84430A2B75405C8C4663F </TagList>
				</Script>
				<Script id="35" name="project: Private" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTE6C412771A57781E182BF0FD433DE750111C38247A703A35AF0FCD27E055D525E38657391C004AA99C95EDBD30DB7B95 </TagList>
				</Script>
				<Script id="36" name="project priv: Private Template">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT8BB9D9B2B7F8421CDA758B3A9C48A5FB4650F2C2061B3F7497952A02C883325383F8A17F50D64A0898BA201B39AE91E2 </TagList>
				</Script>
				<Script id="37" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A8C6B7E10C5CE4401A761433FAFFA5CFF </TagList>
				</Script>
				<Script id="38" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AAF775FF524DA46C797B19A18780B9B01 </TagList>
				</Script>
				<Script id="39" name="primary-key" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTF0F689AC3BFE3AA3DA09114996242610B4CC0A7DAABE96D61BD5CAFE0BEBEFE5CABCE90E729F4841898E1D0D30D28A82 </TagList>
				</Script>
				<Script id="40" name="primary-key: README">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT6ACAA4E68E9D475CD22A377282D9407719B2A8661A601E50BB1093C77AC3360DF9F80B29EA294B9CA43AF0EC0B2605EC </TagList>
				</Script>
				<Script id="41" name="primary-key: Config" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTF401E73CB957E9139942A4BACFD58CA34148D52AF6A12302C29AC6FC7D0844D53159FA29216B4F5DBC9851590A51F9C9 </TagList>
				</Script>
				<Script id="42" name="primary-key: Settings">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT558A1C5E32B26AE10C951D02E4FD85FBB964BE2DD734FCC92A607111501A5F01496F1BB32B61448AB9A3F80CDEF76AB7 </TagList>
				</Script>
				<Script id="43" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A92D8BFFB2ECB47D3B8B86E9B18127AEE </TagList>
				</Script>
				<Script id="44" name="primary-key: Public" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT68957A738C5F24C98518A45DEEFC7871BA3FC2170DD4A266DEBBB7429733C9BE1D82B85E8C004191AD9CAC1387A1EE4E </TagList>
				</Script>
				<Script id="45" name="primary-key: Primary Key Name">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT7942D4B88D75011704B6BA221806A956C2B91B19D97FE13FC8F3F0CCA904BA433700B7EAC3C447498B8414B0B41FDCBF </TagList>
				</Script>
				<Script id="46" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A32896D6DAB3445F788E29F10ED99EFAC </TagList>
				</Script>
				<Script id="47" name="primary-key: Tests" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTBF295EF59CC71FD340603ED72253788E18475EE055A3C54639B61F4EB975A77990103D7A32224182A44479C5112E4114 </TagList>
				</Script>
				<Script id="48" name="primary-key: Test Primary Key Name">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT3FBA7EA71B09E15AE6A197FC2C46118F5D776CF5EAD569C56E9D92B8BFEEB34489EC5E83F27244F9BEC767B49F40A33B </TagList>
				</Script>
				<Script id="49" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A1AA265215C304439BEDB3452A1C8EBC2 </TagList>
				</Script>
				<Script id="50" name="primary-key: Private" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT8FE1DE288E26B4070B50B715023A57EDC4AA9DB2166FA402FE019A9ED6291871199D1FD9933E4972B09D382563B2F6E6 </TagList>
				</Script>
				<Script id="51" name="primary-key priv: Primary Key Name">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT4E771C0FEB1588F873FCC59C9C1C352A2B066F9ED52296E7342CDB6BFE3332A145934262AAB4494987B60E0B77526F44 </TagList>
				</Script>
				<Script id="52" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AC0799E03E8F04C59973C6629B7158B0A </TagList>
				</Script>
				<Script id="53" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A5BCD70011482406FB0840BBF627AC7B7 </TagList>
				</Script>
				<Script id="108" name="window" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTF8C7F985B21FD5C36E8FC71C987BDA9B85682CA04B2663122CE52BD41FB94425538752C1E01D4C128B96733B512E97E9 </TagList>
				</Script>
				<Script id="109" name="window: README">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT0C78C86FA27FF91D63D9B10A1A22B1B737B3ECB677176F022A0B67CC70F148E56D7513561C484B608D7AD221A94FCCB4 </TagList>
				</Script>
				<Script id="110" name="window: Public" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTCA01163A22C13FDEEBEBD7B3DE3F02B45D92977436B8A39BC80430CADFE41FDAE7820D6C3CFA47E0A454B10FA2C4EB09 </TagList>
				</Script>
				<Script id="111" name="window: New ( Layout ; Title {; Style ; Coords ; Size } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTA6E6CA22AF9E4A18C6F14DFBD83F52D45AD4A16CAC45BD907C0383F6340A8E46C1348246C1FA48848F061CE4853157CE </TagList>
				</Script>
				<Script id="112" name="window: New Utility ( Layout {; WindowID } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT1194F5F9CDB2FEA63AEDBE2525220F6EB615D084332F814A4E3C1B33748061FCE217FD4E1BE141CCA867D4AC986E5E30 </TagList>
				</Script>
				<Script id="113" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A84E3C51FB2BE42518CDCF3A8CB8A1298 </TagList>
				</Script>
				<Script id="114" name="window: Tests" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPTCAB20A0BD10B0EE0A036C7826BEAD5E8010CA5F07B7F2B71697792EF5F606D591985B0C3506A4A2AB06D30543838C173 </TagList>
				</Script>
				<Script id="115" name="window: Test New Window">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTBEF9DF71B40B28330475C096657777CE33DDAF8E3E38BA8CE86D5FBF236DB63F050250E08D2E4734842E9D449F1B4F44 </TagList>
				</Script>
				<Script id="116" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A118E7377442E4B16BFAE1CCD5BCDA8DA </TagList>
				</Script>
				<Script id="117" name="window: Private" isFolder="True">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">13</Options>
					<TagList>#^FMI%SCRPT6426E3B1615357DCA872B516390F78C664875E547F088EADD9289377DD75E2FB368FB5F41F654502AEC22B7291865577 </TagList>
				</Script>
				<Script id="118" name="window priv: New ( Layout ; Title {; Style ; Coords ; Size } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPTB1B46C5467ADBD0977101D8EB445C53FF73AA9301D298F6913D7B08B2A871A9E407950E13E6B454395EAD139F4B8A8D4 </TagList>
				</Script>
				<Script id="119" name="window priv: New Utility ( Layout {; WindowID } )">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT7D8D3DBB2363606359D85CA3B25F8D953679101CADB3079DB2C910F3BA83070CFA875A600FAF4BB7AAE9E945AE40167C </TagList>
				</Script>
				<Script id="120" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A7A8001F2AF1C4BB7BDCA81107B6516A0 </TagList>
				</Script>
				<Script id="121" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84AE8525F1A67224571AFED38515E79686D </TagList>
				</Script>
				<Script id="23" name="--" isFolder="Marker">
					<Options hidden="False" access="ReadWrite" runwithfullaccess="False" compatibility="0">2</Options>
					<TagList>#^FMI%SCRPT17FC43D981BA957629CD6BD913E4F3206ACAE9722A967072A6B27E158F6BD84A01CD2D5541E64C11BB78A93F074B7556 </TagList>
				</Script>
			</ScriptCatalog>
			<ThemeCatalog membercount="1">
				<Theme Display="Enlightened" Group="Aspire" version="6" locale="en" platform="1" name="com.filemaker.theme.enlightened" id="1">
					<Image type=".png"></Image>
					<CSS><![CDATA[/* Object Styles */
top_nav_part:normal .self
{
	background-color: rgba(0%,0%,0%,1);
	box-sizing: border-box;
}

button_bar_segment:normal .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(63.9216%,63.9216%,63.9216%,1);
	line-height: 1line;
	text-align: center;
	-fm-text-vertical-align: center;
}
button_bar_segment:hover .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(18.4314%,52.1569%,98.0392%,1);
}
button_bar_segment:pressed .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(13.3333%,36.4706%,67.451%,1);
}
button_bar_segment:checked .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(18.4314%,52.1569%,98.0392%,1);
}
button_bar_segment:focus .inner_border
{
	box-shadow: inset 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
button_bar_segment:normal .text
{
	width: 100%;
	height: 100%;
	box-sizing: border-box;
}
button_bar_segment:normal .icon
{
	-fm-icon-color: rgba(63.9216%,63.9216%,63.9216%,1);
	-fm-icon-padding: 0.33em;
}
button_bar_segment:hover .icon
{
	-fm-icon-color: rgba(18.4314%,52.1569%,98.0392%,1);
}
button_bar_segment:pressed .icon
{
	-fm-icon-color: rgba(13.3333%,36.4706%,67.451%,1);
}
button_bar_segment:checked .icon
{
	-fm-icon-color: rgba(18.4314%,52.1569%,98.0392%,1);
}

button_bar:normal .button_bar_divider
{
	border-top-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-right-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-bottom-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-left-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

radio_set:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1.2line;
	text-align: left;
}
radio_set:normal .text
{
	margin-left: 0.33em;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	left: 1em;
	position: absolute;
	box-sizing: border-box;
}
radio_set:normal .icon
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 50% 50%;
	border-bottom-right-radius: 50% 50%;
	border-bottom-left-radius: 50% 50%;
	border-top-left-radius: 50% 50%;
	padding-top: 0.17em;
	padding-right: 0.17em;
	padding-bottom: 0.17em;
	padding-left: 0.17em;
	width: 1em;
	height: 1em;
	top: 0.1em;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
radio_set:focus .icon
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
radio_set:checked .icon
{
	-fm-icon: radio;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

popover:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 2line;
	text-align: center;
	box-shadow: 1pt 1pt 3pt 0pt rgba(0%,0%,0%,0.2);
}
popover:normal .text
{
	height: 1.42em;
	top: 0.42em;
	right: 8pt;
	left: 8pt;
	position: absolute;
	box-sizing: border-box;
}
popover:normal .contents
{
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	top: 1.84em;
	right: 6pt;
	bottom: 6pt;
	left: 6pt;
	position: absolute;
	box-sizing: border-box;
}

edit_box:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
edit_box:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
edit_box:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
edit_box:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
edit_box:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}

portal:normal .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	-fm-use-portal-current-row-style: true;
}
portal:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
portal:normal .contents
{
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
portal:normal .row
{
	background-color: rgba(100%,100%,100%,1);
}
portal:normal .row_alt
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
}
portal:normal .scrollbar_track
{
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
}
portal:normal .row_active
{
	background-color: rgba(90.1961%,93.7255%,97.6471%,1);
}

chart:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
chart:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
chart:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.5em;
	padding-right: 0.5em;
	padding-bottom: 0.5em;
	padding-left: 0.5em;
}

header:normal .self
{
	background-color: rgba(20%,20%,20%,1);
	box-sizing: border-box;
}

oval:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

tab_panel:normal .self
{
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	-fm-tab-top-left-radius: 3pt 3pt;
	-fm-tab-top-right-radius: 3pt 3pt;
}
tab_panel:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(22.3529%,22.3529%,22.3529%,1)), to(rgba(20.7843%,20.7843%,20.7843%,1)));
}
tab_panel:checked .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
}
tab_panel:checkedfocus .self
{
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
tab_panel:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
tab_panel:normal .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:hover .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:checked .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:checkedfocus .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:normal .tab
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20%,20%,20%,1)), to(rgba(14.902%,14.902%,14.902%,1)));
	border-top-right-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
tab_panel:hover .tab
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(22.3529%,22.3529%,22.3529%,1)), to(rgba(20.7843%,20.7843%,20.7843%,1)));
}
tab_panel:focus .tab
{
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
tab_panel:checked .tab
{
	background-image: none;
}
tab_panel:normal .tab_inner_border
{
	padding-top: 0.17em;
	padding-right: 0.67em;
	padding-bottom: 0.17em;
	padding-left: 0.67em;
}

text_box:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
text_box:normal .text
{
	height: 100%;
	box-sizing: border-box;
}

rounded:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 5pt 5pt;
	border-bottom-right-radius: 5pt 5pt;
	border-bottom-left-radius: 5pt 5pt;
	border-top-left-radius: 5pt 5pt;
}
rounded:normal .inner_border
{
	border-top-right-radius: 4pt 4pt;
	border-bottom-right-radius: 4pt 4pt;
	border-bottom-left-radius: 4pt 4pt;
	border-top-left-radius: 4pt 4pt;
}

tab_control:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(100%,100%,100%,1);
	line-height: 1line;
	text-align: left;
	-fm-tab-spacing: 0;
}
tab_control:checked .self
{
	color: rgba(0%,0%,0%,1);
}

title_footer:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	box-sizing: border-box;
}

text_area:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
text_area:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
text_area:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
text_area:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
text_area:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
text_area:normal .scrollbar_track
{
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
}

container:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
container:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
container:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
container:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.5em;
	padding-right: 0.5em;
	padding-bottom: 0.5em;
	padding-left: 0.5em;
}

dot_control:normal .self
{
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
}
dot_control:normal .inner_border
{
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
}
dot_control:normal .contents
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	top: 0pt;
	right: 0pt;
	bottom: 21pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
dot_control:normal .dot
{
	background-color: rgba(79.2157%,80.7843%,81.9608%,1);
	border-top-right-radius: 50% 50%;
	border-bottom-right-radius: 50% 50%;
	border-bottom-left-radius: 50% 50%;
	border-top-left-radius: 50% 50%;
	margin-left: 0.33em;
	width: 9pt;
	height: 9pt;
}
dot_control:checked .dot
{
	background-color: rgba(0%,0%,0%,1);
}
dot_control:normal .dot_container
{
	height: 15pt;
	right: 0pt;
	bottom: 0.25em;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}

footer:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(94.5098%,94.5098%,94.5098%,1)));
	border-top-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: solid;
	border-right-style: none;
	border-bottom-style: none;
	border-left-style: none;
	border-top-width: 1pt;
	box-sizing: border-box;
}

calendar:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
calendar:pressed .self
{
	border-top-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-right-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-bottom-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-left-color: rgba(84.7059%,84.7059%,84.7059%,1);
}
calendar:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
calendar:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
calendar:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
calendar:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
calendar:normal .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
	-fm-icon: calendar;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
calendar:hover .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
calendar:pressed .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-left-color: rgba(84.7059%,84.7059%,84.7059%,1);
	box-shadow: inset 0pt 0pt 3pt 0pt rgba(0%,0%,0%,0.2);
}
calendar:focus .icon
{
	border-left-color: rgba(20%,20%,20%,1);
}

scrollbar:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 17pt;
}
scrollbar:disabled .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
}
scrollbar:normal .scrollbar_top_button
{
	background-color: rgba(100%,100%,100%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-style: solid;
	border-left-style: solid;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
	-fm-icon: up-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
scrollbar:hover .scrollbar_top_button
{
	background-color: rgba(100%,100%,100%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-style: solid;
	border-left-style: solid;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:pressed .scrollbar_top_button
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-bottom-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-left-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-bottom-style: solid;
	border-left-style: solid;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:normal .scrollbar_bottom_button
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-left-width: 1pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
	-fm-icon: down-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
scrollbar:hover .scrollbar_bottom_button
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-left-width: 1pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:pressed .scrollbar_bottom_button
{
	background-color: rgba(97.6471%,97.6471%,97.6471%,1);
	border-top-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-left-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-top-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-left-width: 1pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:normal .scrollbar_thumb
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	width: 100%;
}

trailing_grand_summary:normal .self
{
	background-color: rgba(65.4902%,69.8039%,72.1569%,1);
	box-sizing: border-box;
}

bottom_nav_part:normal .self
{
	background-color: rgba(0%,0%,0%,1);
	box-sizing: border-box;
}

trailing_sub_summary:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: none;
	border-right-style: none;
	border-bottom-style: solid;
	border-left-style: none;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

body_alt:normal .self
{
	background-image: none;
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-image-source: none;
	box-sizing: border-box;
}

checkbox_set:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1.2line;
	text-align: left;
}
checkbox_set:normal .text
{
	margin-left: 0.33em;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	left: 1em;
	position: absolute;
	box-sizing: border-box;
}
checkbox_set:normal .icon
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	padding-top: 0.08em;
	padding-right: 0.08em;
	padding-bottom: 0.08em;
	padding-left: 0.08em;
	width: 1em;
	height: 1em;
	top: 0.1em;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
checkbox_set:focus .icon
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
checkbox_set:checked .icon
{
	-fm-icon: modern-check;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

leading_grand_summary:normal .self
{
	background-color: rgba(65.4902%,69.8039%,72.1569%,1);
	box-sizing: border-box;
}

web_viewer:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
web_viewer:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
web_viewer:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.5em;
	padding-right: 0.5em;
	padding-bottom: 0.5em;
	padding-left: 0.5em;
}

trailing_sub_summary_2:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: none;
	border-right-style: none;
	border-bottom-style: solid;
	border-left-style: none;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

leading_sub_summary:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-style: solid;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

rectangle:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

button:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: center;
	-fm-text-vertical-align: center;
}
button:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
button:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-top-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-right-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-bottom-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-left-color: rgba(84.7059%,84.7059%,84.7059%,1);
}
button:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
button:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.25em;
	padding-right: 0.5em;
	padding-bottom: 0.25em;
	padding-left: 0.5em;
}
button:normal .text
{
	width: 100%;
	height: 100%;
	box-sizing: border-box;
}
button:normal .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
	-fm-icon-padding: 0.33em;
}

body:normal .self
{
	background-image: none;
	background-color: rgba(94.1176%,94.1176%,94.1176%,1);
	border-image-source: none;
	box-sizing: border-box;
	-fm-use-body-current-row-style: true;
}
body:checked .self
{
	background-image: none;
	background-color: rgba(87.8431%,92.549%,98.0392%,1);
	border-image-source: none;
}

pop_up:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
pop_up:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
pop_up:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-top-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-right-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-bottom-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-left-color: rgba(90.9804%,90.9804%,90.9804%,1);
}
pop_up:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
pop_up:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
pop_up:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
pop_up:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
pop_up:normal .icon
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
	-fm-icon: down-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

leading_sub_summary_2:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-style: solid;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

drop_down:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
drop_down:pressed .self
{
	border-top-color: rgba(90.9804%,90.9804%,87.8431%,1);
	border-right-color: rgba(90.9804%,90.9804%,87.8431%,1);
	border-bottom-color: rgba(90.9804%,90.9804%,87.8431%,1);
	border-left-color: rgba(90.9804%,90.9804%,87.8431%,1);
}
drop_down:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
drop_down:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
drop_down:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
drop_down:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
drop_down:normal .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
	-fm-icon: down-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
drop_down:hover .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
drop_down:pressed .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-left-color: rgba(90.9804%,90.9804%,87.8431%,1);
	box-shadow: inset 0pt 0pt 3pt 0pt rgba(0%,0%,0%,0.2);
}
drop_down:focus .icon
{
	border-left-color: rgba(20%,20%,20%,1);
}

line:normal .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

leading_sub_summary_1:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-top-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: solid;
	border-bottom-style: solid;
	border-top-width: 1pt;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

title_header:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	box-sizing: border-box;
}

field:droptarget .inner_border
{
	box-shadow: inset 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
field:normal .baseline
{
	border-bottom-width: 1pt;
}

trailing_sub_summary_1:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-top-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: solid;
	border-bottom-style: solid;
	border-top-width: 1pt;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

title_footer text_box:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

trailing_grand_summary text_box:normal .self
{
	color: rgba(100%,100%,100%,1);
}

trailing_sub_summary_1 text_box:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

trailing_sub_summary_2 text_box:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

trailing_sub_summary text_box:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

header text_box:normal .self
{
	font-weight: bold;
	font-size: 14pt;
	color: rgba(100%,100%,100%,1);
}

footer text_box:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

leading_sub_summary text_box:normal .self
{
	color: rgba(0%,0%,0%,1);
}

leading_sub_summary_1 text_box:normal .self
{
	color: rgba(0%,0%,0%,1);
}

leading_sub_summary_2 text_box:normal .self
{
	color: rgba(0%,0%,0%,1);
}

leading_grand_summary text_box:normal .self
{
	font-weight: bold;
	color: rgba(100%,100%,100%,1);
}

title_header text_box:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

/* Custom Styles */
button.accent_button_1:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20.3922%,62.7451%,95.6863%,1)), to(rgba(7.05882%,40.7843%,65.098%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_1:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(30.1961%,69.0196%,96.8627%,1)), to(rgba(12.9412%,47.0588%,71.3726%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_1:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(18.4314%,59.2157%,88.2353%,1)), to(rgba(8.23529%,38.4314%,60.3922%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_1:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_1:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_1:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

button.accent_button_2:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(57.2549%,79.2157%,26.6667%,1)), to(rgba(44.7059%,63.9216%,19.6078%,1)));
	border-top-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-right-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-bottom-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-left-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_2:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(61.1765%,82.3529%,30.5882%,1)), to(rgba(44.7059%,63.9216%,19.6078%,1)));
	border-top-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-right-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-bottom-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-left-color: rgba(52.549%,74.1176%,10.9804%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_2:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(54.5098%,76.4706%,23.1373%,1)), to(rgba(44.7059%,63.9216%,19.6078%,1)));
	border-top-color: rgba(41.9608%,51.3726%,24.3137%,1);
	border-right-color: rgba(41.9608%,51.3726%,24.3137%,1);
	border-bottom-color: rgba(41.9608%,51.3726%,24.3137%,1);
	border-left-color: rgba(41.9608%,51.3726%,24.3137%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_2:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_2:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_2:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

button.accent_button_3:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(57.2549%,10.1961%,19.2157%,1)), to(rgba(46.6667%,5.4902%,13.3333%,1)));
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_3:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(64.3137%,12.549%,22.3529%,1)), to(rgba(50.1961%,7.05882%,15.2941%,1)));
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_3:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(52.9412%,9.80392%,18.0392%,1)), to(rgba(42.7451%,5.88235%,12.9412%,1)));
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_3:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_3:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_3:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

button.accent_button_4:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(98.4314%,80%,2.7451%,1)), to(rgba(100%,72.9412%,0%,1)));
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_4:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,81.9608%,5.4902%,1)), to(rgba(100%,74.1176%,11.3725%,1)));
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_4:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,70.5882%,0%,1)), to(rgba(94.1176%,76.4706%,2.35294%,1)));
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_4:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_4:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_4:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

shape.accent_color_1:normal .self
{
	background-image: none;
	background-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-top-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-right-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-bottom-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-left-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-image-source: none;
}

shape.accent_color_2:normal .self
{
	background-image: none;
	background-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-top-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-right-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-bottom-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-left-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-image-source: none;
}

shape.accent_color_3:normal .self
{
	background-image: none;
	background-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-image-source: none;
}

shape.accent_color_4:normal .self
{
	background-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
}

text_box.accent_text_1:normal .self
{
	font-weight: bold;
	color: rgba(15.6863%,55.2941%,80.7843%,1);
}

text_box.accent_text_2:normal .self
{
	font-weight: bold;
	color: rgba(44.7059%,63.9216%,19.6078%,1);
}

text_box.accent_text_3:normal .self
{
	font-weight: bold;
	color: rgba(46.6667%,5.4902%,13.3333%,1);
}

text_box.accent_text_4:normal .self
{
	font-weight: bold;
	color: rgba(98.8235%,74.902%,23.1373%,1);
}

button_bar.body_button_bar:normal .self
{
	border-top-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-right-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-bottom-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-left-color: rgba(83.9216%,83.9216%,83.9216%,1);
}
button_bar.body_button_bar:normal .button_bar_divider
{
	border-top-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-right-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-bottom-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-left-color: rgba(83.9216%,83.9216%,83.9216%,1);
}

button_bar_segment.body_button_bar:normal .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
	color: rgba(0%,0%,0%,1);
}
button_bar_segment.body_button_bar:hover .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
}
button_bar_segment.body_button_bar:pressed .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
}
button_bar_segment.body_button_bar:checked .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
}
button_bar_segment.body_button_bar:normal .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}

shape.column_header_region:normal .self
{
	background-image: none;
	background-color: rgba(12.549%,12.549%,12.549%,1);
	border-top-color: rgba(12.549%,12.549%,12.549%,1);
	border-right-color: rgba(12.549%,12.549%,12.549%,1);
	border-bottom-color: rgba(12.549%,12.549%,12.549%,1);
	border-left-color: rgba(12.549%,12.549%,12.549%,1);
	border-image-source: none;
}

text_box.column_header_text:normal .self
{
	color: rgba(100%,100%,100%,1);
}

shape.content_region:normal .self
{
	background-image: none;
	background-color: rgba(94.1176%,94.1176%,94.1176%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-image-source: none;
}

text_box.footer_text:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

part.form_body:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(99.6078%,99.6078%,99.6078%,1)), to(rgba(86.6667%,86.6667%,86.6667%,1)));
	border-image-source: none;
	box-sizing: border-box;
	-fm-use-body-current-row-style: true;
}

shape.gradient_1:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(99.6078%,99.6078%,99.6078%,1)), to(rgba(85.8824%,85.8824%,85.8824%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}

shape.gradient_2:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(90.9804%,92.549%,93.7255%,1)), to(rgba(67.451%,71.3726%,75.6863%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}

text_box.header_text:normal .self
{
	font-weight: bold;
	font-size: 14pt;
	color: rgba(100%,100%,100%,1);
}

text_box.leading_grand_summary_text:normal .self
{
	font-weight: bold;
	color: rgba(100%,100%,100%,1);
}

text_box.leading_sub_summary_1_text:normal .self
{
	color: rgba(0%,0%,0%,1);
}

text_box.leading_sub_summary_2_text:normal .self
{
	color: rgba(0%,0%,0%,1);
}

text_box.leading_sub_summary_additional_text:normal .self
{
	color: rgba(0%,0%,0%,1);
}

container.minimal_container:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
container.minimal_container:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
container.minimal_container:focus .self
{
	background-color: rgba(100%,100%,100%,1);
}

calendar.minimal_drop-down_calendar:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
calendar.minimal_drop-down_calendar:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
calendar.minimal_drop-down_calendar:focus .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}
calendar.minimal_drop-down_calendar:normal .icon
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	-fm-icon-color: rgba(100%,100%,100%,0);
}
calendar.minimal_drop-down_calendar:hover .icon
{
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	-fm-icon-color: rgba(0%,0%,0%,1);
}
calendar.minimal_drop-down_calendar:pressed .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
calendar.minimal_drop-down_calendar:focus .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-width: 1pt;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

drop_down.minimal_drop-down_list:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
drop_down.minimal_drop-down_list:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
drop_down.minimal_drop-down_list:focus .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}
drop_down.minimal_drop-down_list:normal .icon
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	-fm-icon-color: rgba(100%,100%,100%,0);
}
drop_down.minimal_drop-down_list:hover .icon
{
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	-fm-icon-color: rgba(0%,0%,0%,1);
}
drop_down.minimal_drop-down_list:pressed .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
drop_down.minimal_drop-down_list:focus .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-width: 1pt;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

edit_box.minimal_edit_box:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
edit_box.minimal_edit_box:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
edit_box.minimal_edit_box:focus .self
{
	background-color: rgba(100%,100%,100%,1);
}

pop_up.minimal_pop-up_menu:normal .self
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
pop_up.minimal_pop-up_menu:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
pop_up.minimal_pop-up_menu:focus .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}
pop_up.minimal_pop-up_menu:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,0);
}
pop_up.minimal_pop-up_menu:hover .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
pop_up.minimal_pop-up_menu:pressed .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
pop_up.minimal_pop-up_menu:focus .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}

dot_control.minimal_slide_control:normal .self
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-image-source: none;
}
dot_control.minimal_slide_control:normal .contents
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-top-color: rgba(0%,0%,0%,0);
	border-right-color: rgba(0%,0%,0%,0);
	border-bottom-color: rgba(0%,0%,0%,0);
	border-left-color: rgba(0%,0%,0%,0);
	border-image-source: none;
	box-shadow: inset 0pt 0pt 0pt 0pt rgba(0%,0%,0%,0);
}

button.navigation_button:normal .self
{
	background-image: none;
	background-color: rgba(20%,20%,20%,1);
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.navigation_button:hover .self
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	color: rgba(100%,100%,100%,1);
}
button.navigation_button:pressed .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	color: rgba(100%,100%,100%,1);
}
button.navigation_button:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.navigation_button:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.navigation_button:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

checkbox_set.navigation_checkbox_set:normal .self
{
	background-image: none;
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
checkbox_set.navigation_checkbox_set:normal .icon
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
}

calendar.navigation_drop-down_calendar:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:hover .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:pressed .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:normal .icon
{
	background-image: none;
	background-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:hover .icon
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:pressed .icon
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}

drop_down.navigation_drop-down_list:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:hover .self
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:pressed .self
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:normal .icon
{
	background-image: none;
	background-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:hover .icon
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:pressed .icon
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}

edit_box.navigation_edit_box:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}

part.navigation_part:normal .self
{
	background-image: none;
	background-color: rgba(12.9412%,12.9412%,12.9412%,1);
	border-image-source: none;
	box-sizing: border-box;
}

text_box.navigation_part_text:normal .self
{
	color: rgba(87.451%,87.451%,87.451%,1);
}

pop_up.navigation_pop-up_menu:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:hover .self
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:pressed .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

radio_set.navigation_radio_button_set:normal .self
{
	background-image: none;
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
radio_set.navigation_radio_button_set:normal .icon
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
}

shape.navigation_region:normal .self
{
	background-image: none;
	background-color: rgba(12.9412%,12.9412%,12.9412%,1);
	border-top-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-right-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-bottom-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-left-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-image-source: none;
}

text_box.navigation_text:normal .self
{
	color: rgba(100%,100%,100%,1);
}

popover.popover_alternate_1:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20.3922%,62.7451%,95.6863%,1)), to(rgba(7.05882%,40.7843%,65.098%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
popover.popover_alternate_1:normal .contents
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-image-source: none;
}

popover.popover_alternate_2:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20%,20%,20%,1)), to(rgba(14.902%,14.902%,14.902%,1)));
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
popover.popover_alternate_2:normal .contents
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-image-source: none;
}

dot_control.slide_control_alternate:normal .self
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-image-source: none;
}
dot_control.slide_control_alternate:normal .dot
{
	border-image-source: none;
}
dot_control.slide_control_alternate:checked .dot
{
	background-color: rgba(15.6863%,55.2941%,80.7843%,1);
}

shape.title_bar_region:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-image-source: none;
}

text_box.title_footer_text:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

text_box.title_header_text:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

text_box.title_text_1:normal .self
{
	font-weight: bold;
	font-size: 24pt;
	color: rgba(0%,0%,0%,1);
}

text_box.title_text_2:normal .self
{
	font-weight: bold;
	font-size: 18pt;
	color: rgba(0%,0%,0%,1);
}

text_box.trailing_grand_summary_text:normal .self
{
	color: rgba(100%,100%,100%,1);
}

text_box.trailing_sub_summary_1_text:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

text_box.trailing_sub_summary_2_text:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

text_box.trailing_sub_summary_additional_text:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

]]></CSS>					<Metadata>						<namedstyles>							<trailing_sub_summary_additional_text>• Trailing Sub-summary Additional Text</trailing_sub_summary_additional_text>							<trailing_sub_summary_2_text>• Trailing Sub-summary 2 Text</trailing_sub_summary_2_text>							<trailing_sub_summary_1_text>• Trailing Sub-summary 1 Text</trailing_sub_summary_1_text>							<trailing_grand_summary_text>• Trailing Grand Summary Text</trailing_grand_summary_text>							<title_text_2>Title Text 2</title_text_2>							<title_text_1>Title Text 1</title_text_1>							<title_header_text>• Title Header Text</title_header_text>							<title_footer_text>• Title Footer Text</title_footer_text>							<title_bar_region>Title Bar Region</title_bar_region>							<slide_control_alternate>Slide Control Alternate</slide_control_alternate>							<popover_alternate_2>Popover Alternate 2</popover_alternate_2>							<popover_alternate_1>Popover Alternate 1</popover_alternate_1>							<navigation_text>Navigation Text</navigation_text>							<navigation_region>Navigation Region</navigation_region>							<navigation_radio_button_set>Navigation Radio Button Set</navigation_radio_button_set>							<navigation_pop-up_menu>Navigation Pop-up Menu</navigation_pop-up_menu>							<navigation_part_text>• Navigation Part Text</navigation_part_text>							<navigation_part>Navigation Part</navigation_part>							<navigation_edit_box>Navigation Edit Box</navigation_edit_box>							<navigation_drop-down_list>Navigation Drop-down List</navigation_drop-down_list>							<navigation_drop-down_calendar>Navigation Drop-down Calendar</navigation_drop-down_calendar>							<navigation_checkbox_set>Navigation Checkbox Set</navigation_checkbox_set>							<navigation_button>Navigation Button</navigation_button>							<minimal_slide_control>Minimal Slide Control</minimal_slide_control>							<minimal_pop-up_menu>Minimal Pop-up Menu</minimal_pop-up_menu>							<minimal_edit_box>Minimal Edit Box</minimal_edit_box>							<minimal_drop-down_list>Minimal Drop-down List</minimal_drop-down_list>							<minimal_drop-down_calendar>Minimal Drop-down Calendar</minimal_drop-down_calendar>							<minimal_container>Minimal Container</minimal_container>							<leading_sub_summary_additional_text>• Leading Sub-summary Additional Text</leading_sub_summary_additional_text>							<leading_sub_summary_2_text>• Leading Sub-summary 2 Text</leading_sub_summary_2_text>							<leading_sub_summary_1_text>• Leading Sub-summary 1 Text</leading_sub_summary_1_text>							<leading_grand_summary_text>• Leading Grand Summary Text</leading_grand_summary_text>							<header_text>• Header Text</header_text>							<gradient_2>Gradient 2</gradient_2>							<gradient_1>Gradient 1</gradient_1>							<form_body>Form Body</form_body>							<footer_text>• Footer Text</footer_text>							<content_region>Content Region</content_region>							<column_header_text>Column Header Text</column_header_text>							<column_header_region>Column Header Region</column_header_region>							<body_button_bar>Body Button Bar</body_button_bar>							<accent_text_4>Accent Text 4</accent_text_4>							<accent_text_3>Accent Text 3</accent_text_3>							<accent_text_2>Accent Text 2</accent_text_2>							<accent_text_1>Accent Text 1</accent_text_1>							<accent_color_4>Accent Color 4</accent_color_4>							<accent_color_3>Accent Color 3</accent_color_3>							<accent_color_2>Accent Color 2</accent_color_2>							<accent_color_1>Accent Color 1</accent_color_1>							<accent_button_4>Accent Button 4</accent_button_4>							<accent_button_3>Accent Button 3</accent_button_3>							<accent_button_2>Accent Button 2</accent_button_2>							<accent_button_1>Accent Button 1</accent_button_1>						</namedstyles>						<layoutbuilder>							<kVerticalFieldSpacing>2</kVerticalFieldSpacing>							<kTrailingPartPaddingTop>9</kTrailingPartPaddingTop>							<kTrailingPartPaddingBottom>5</kTrailingPartPaddingBottom>							<kTopNavPartMinSize>30</kTopNavPartMinSize>							<kTitleHeaderMinSize>30</kTitleHeaderMinSize>							<kTitleFooterMinSize>30</kTitleFooterMinSize>							<kSummaryPartMinSize>40</kSummaryPartMinSize>							<kReportBreakFieldIndent>16</kReportBreakFieldIndent>							<kPartPaddingRight>16</kPartPaddingRight>							<kPartPaddingLeft>16</kPartPaddingLeft>							<kLeadingPartPaddingTop>9</kLeadingPartPaddingTop>							<kLeadingPartPaddingBottom>5</kLeadingPartPaddingBottom>							<kLastPartPaddingBottom>9</kLastPartPaddingBottom>							<kHeaderMinSize>50</kHeaderMinSize>							<kFooterMinSize>40</kFooterMinSize>							<kFirstPartPaddingTop>16</kFirstPartPaddingTop>							<kBottomNavPartMinSize>30</kBottomNavPartMinSize>							<kBodyPartPaddingTop>9</kBodyPartPaddingTop>							<kBodyPartPaddingBottom>5</kBodyPartPaddingBottom>							<kBodyMinSize>40</kBodyMinSize>							<kBaseFontSize>12</kBaseFontSize>							<kBackgroundPaddingTop>0</kBackgroundPaddingTop>							<kBackgroundPaddingRight>0</kBackgroundPaddingRight>							<kBackgroundPaddingLeft>0</kBackgroundPaddingLeft>							<kBackgroundPaddingBottom>0</kBackgroundPaddingBottom>						</layoutbuilder>						<colorpalette>							<swatch9>#f8c308</swatch9>							<swatch8>#81c234</swatch8>							<swatch7>#7d0c25</swatch7>							<swatch6>#2982fe</swatch6>							<swatch5>#141414</swatch5>							<swatch4>#303030</swatch4>							<swatch3>#494949</swatch3>							<swatch2>#a2a2a2</swatch2>							<swatch1>#d6d6d6</swatch1>						</colorpalette>						<charting>							<colorScheme>Plum Tree</colorScheme>						</charting>					</Metadata>				</Theme>			</ThemeCatalog>			<LayoutCatalog membercount="2">				<Layout id="1" name="alexandria" width="1024">					<TableOccurrenceReference id="-1" name="&lt;Table Missing&gt;"></TableOccurrenceReference>					<LayoutThemeReference id="1" name="com.filemaker.theme.enlightened" Base="com.filemaker.theme.minimalist"></LayoutThemeReference>					<PartsList membercount="3">						<Part type="Header" kind="1">							<Definition type="Header" kind="1" size="50" absolute="0" Options="0"></Definition>						</Part>						<Part type="Body" kind="4">							<Definition type="Body" kind="4" size="482" absolute="50" Options="0"></Definition>						</Part>						<Part type="Footer" kind="7">							<Definition type="Footer" kind="7" size="40" absolute="532" Options="0"></Definition>						</Part>					</PartsList>					<Options hidden="False">284362753</Options>				</Layout>				<Layout id="2" name="-" width="1024" isSeparatorItem="True">					<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>					<LayoutThemeReference id="1" name="com.filemaker.theme.enlightened" Base="com.filemaker.theme.minimalist"></LayoutThemeReference>					<PartsList membercount="3">						<Part type="Header" kind="1">							<Definition type="Header" kind="1" size="50" absolute="0" Options="0"></Definition>						</Part>						<Part type="Body" kind="4">							<Definition type="Body" kind="4" size="603" absolute="50" Options="0"></Definition>							<ObjectList membercount="52">								<LayoutObject id="1" type="Text" name="" kind="2">									<Bounds top="55" left="0" bottom="72" right="630"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[____ ID FIELDS ________________________________________________________________________________]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="2" type="Edit Box" name="" kind="1">									<Bounds top="52" left="138" bottom="73" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="1" name="____ ID FIELDS ________________________________________________________________________________" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>1</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="3" type="Text" name="" kind="2">									<Bounds top="78" left="112" bottom="95" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[id]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="4" type="Edit Box" name="" kind="1">									<Bounds top="75" left="138" bottom="96" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="2" name="id" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>3</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="5" type="Text" name="" kind="2">									<Bounds top="101" left="0" bottom="118" right="626"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[____ TABLE DATA _____________________________________________________________________________]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="6" type="Edit Box" name="" kind="1">									<Bounds top="98" left="138" bottom="119" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="3" name="____ TABLE DATA _____________________________________________________________________________" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>5</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="7" type="Text" name="" kind="2">									<Bounds top="124" left="0" bottom="141" right="633"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[____ RULES ___________________________________________________________________________________]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="8" type="Edit Box" name="" kind="1">									<Bounds top="121" left="138" bottom="142" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="4" name="____ RULES ___________________________________________________________________________________" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>7</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="9" type="Text" name="" kind="2">									<Bounds top="147" left="76" bottom="164" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[can_edit]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="10" type="Edit Box" name="" kind="1">									<Bounds top="144" left="138" bottom="165" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="5" name="can_edit" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>9</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="11" type="Text" name="" kind="2">									<Bounds top="170" left="63" bottom="187" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[can_delete]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="12" type="Edit Box" name="" kind="1">									<Bounds top="167" left="138" bottom="188" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="6" name="can_delete" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>11</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="13" type="Text" name="" kind="2">									<Bounds top="193" left="71" bottom="210" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[can_view]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="14" type="Edit Box" name="" kind="1">									<Bounds top="190" left="138" bottom="211" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="7" name="can_view" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>13</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="15" type="Text" name="" kind="2">									<Bounds top="216" left="81" bottom="233" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[is_valid]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="16" type="Edit Box" name="" kind="1">									<Bounds top="213" left="138" bottom="234" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="8" name="is_valid" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>15</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="17" type="Text" name="" kind="2">									<Bounds top="239" left="0" bottom="256" right="616"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[____ RELATIONSHIP KEYS ____________________________________________________________________]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="18" type="Edit Box" name="" kind="1">									<Bounds top="236" left="138" bottom="257" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="9" name="____ RELATIONSHIP KEYS ____________________________________________________________________" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>17</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="19" type="Text" name="" kind="2">									<Bounds top="262" left="95" bottom="279" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[ONE]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="20" type="Edit Box" name="" kind="1">									<Bounds top="259" left="138" bottom="280" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="10" name="ONE" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>19</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="21" type="Text" name="" kind="2">									<Bounds top="285" left="42" bottom="302" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[TABLE_NAME]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="22" type="Edit Box" name="" kind="1">									<Bounds top="282" left="138" bottom="303" right="391"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="11" name="TABLE_NAME" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>21</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="23" type="Text" name="" kind="2">									<Bounds top="308" left="0" bottom="325" right="614"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[____ HOUSEKEEPING FIELDS _________________________________________________________________]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="24" type="Edit Box" name="" kind="1">									<Bounds top="305" left="138" bottom="326" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="12" name="____ HOUSEKEEPING FIELDS _________________________________________________________________" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>23</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="25" type="Text" name="" kind="2">									<Bounds top="331" left="99" bottom="348" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[uuid]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="26" type="Edit Box" name="" kind="1">									<Bounds top="328" left="138" bottom="349" right="391"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="34" name="uuid" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>25</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="27" type="Text" name="" kind="2">									<Bounds top="354" left="62" bottom="371" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[created_by]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="28" type="Edit Box" name="" kind="1">									<Bounds top="351" left="138" bottom="372" right="391"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="35" name="created_by" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>27</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="29" type="Text" name="" kind="2">									<Bounds top="377" left="19" bottom="394" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[created_timestamp]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="30" type="Edit Box" name="" kind="1">									<Bounds top="374" left="138" bottom="395" right="379"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="36" name="created_timestamp" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>29</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="31" type="Text" name="" kind="2">									<Bounds top="400" left="51" bottom="417" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[created_date]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="32" type="Edit Box" name="" kind="1">									<Bounds top="397" left="138" bottom="418" right="259"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="37" name="created_date" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>31</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="33" type="Text" name="" kind="2">									<Bounds top="423" left="52" bottom="440" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[created_time]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="34" type="Edit Box" name="" kind="1">									<Bounds top="420" left="138" bottom="441" right="259"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="38" name="created_time" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>33</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="35" type="Text" name="" kind="2">									<Bounds top="446" left="57" bottom="463" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[modified_by]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="36" type="Edit Box" name="" kind="1">									<Bounds top="443" left="138" bottom="464" right="391"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="39" name="modified_by" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>35</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="37" type="Text" name="" kind="2">									<Bounds top="469" left="14" bottom="486" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[modified_timestamp]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="38" type="Edit Box" name="" kind="1">									<Bounds top="466" left="138" bottom="487" right="379"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="40" name="modified_timestamp" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>37</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="39" type="Text" name="" kind="2">									<Bounds top="492" left="46" bottom="509" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[modified_date]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="40" type="Edit Box" name="" kind="1">									<Bounds top="489" left="138" bottom="510" right="259"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="41" name="modified_date" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>39</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="41" type="Text" name="" kind="2">									<Bounds top="515" left="47" bottom="532" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[modified_time]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="42" type="Edit Box" name="" kind="1">									<Bounds top="512" left="138" bottom="533" right="259"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="42" name="modified_time" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>41</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="43" type="Text" name="" kind="2">									<Bounds top="538" left="6" bottom="555" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[housekeeping_trigger]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="44" type="Edit Box" name="" kind="1">									<Bounds top="535" left="138" bottom="556" right="259"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="43" name="housekeeping_trigger" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>43</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="45" type="Text" name="" kind="2">									<Bounds top="561" left="3" bottom="578" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[housekeeping_display]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="46" type="Edit Box" name="" kind="1">									<Bounds top="558" left="138" bottom="579" right="391"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="44" name="housekeeping_display" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>45</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="47" type="Text" name="" kind="2">									<Bounds top="584" left="92" bottom="601" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[fm_id]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="48" type="Edit Box" name="" kind="1">									<Bounds top="581" left="138" bottom="602" right="391"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="47" name="fm_id" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>47</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="49" type="Text" name="" kind="2">									<Bounds top="607" left="40" bottom="624" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[modified_count]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="50" type="Edit Box" name="" kind="1">									<Bounds top="604" left="138" bottom="625" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="48" name="modified_count" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>49</Label>									</Accessibility>								</LayoutObject>								<LayoutObject id="51" type="Text" name="" kind="2">									<Bounds top="630" left="4" bottom="647" right="127"></Bounds>									<Options>805306368</Options>									<Text>										<Options>0</Options>										<StyledText>											<Data><![CDATA[modified_milliseconds]]></Data>										</StyledText>									</Text>									<LocalCSS name=""><![CDATA[self:normal .self
{
	text-align: right;
	-fm-text-vertical-align: center;
}
]]></LocalCSS>								</LayoutObject>								<LayoutObject id="52" type="Edit Box" name="" kind="1">									<Bounds top="627" left="138" bottom="648" right="217"></Bounds>									<Options>805306368</Options>									<Field>										<FieldReference id="54" name="modified_milliseconds" repetition="1" tableOccurrence="-"></FieldReference>										<Options>32</Options>										<Display Style="0" show="1"></Display>										<Usage inputMode="0" type="1"></Usage>									</Field>									<ExtendedAttributes>										<Formatting>											<Graphic>												<Options>5</Options>											</Graphic>											<Time>												<Options>143</Options>											</Time>											<Numeric>												<Options>2304</Options>												<Style>													<Negative>														<Color red="221" green="0" blue="0" alpha="1.00"></Color>													</Negative>												</Style>												<DecimalDigits>2</DecimalDigits>											</Numeric>										</Formatting>									</ExtendedAttributes>									<Accessibility>										<Label>51</Label>									</Accessibility>								</LayoutObject>							</ObjectList>						</Part>						<Part type="Footer" kind="7">							<Definition type="Footer" kind="7" size="40" absolute="653" Options="0"></Definition>						</Part>					</PartsList>					<Options hidden="False">15927297</Options>				</Layout>			</LayoutCatalog>			<PrivilegeSetsCatalog membercount="3">				<ObjectList membercount="3">					<PrivilegeSet id="1" name="[Full Access]">						<Description>access to everything</Description>						<access default="True"></access>					</PrivilegeSet>					<PrivilegeSet id="2" name="[Data Entry Only]">						<Description>write access to all records, no design access</Description>						<access default="True"></access>					</PrivilegeSet>					<PrivilegeSet id="3" name="[Read-Only Access]">						<Description>read access to all records, no design access, write access to all global fields</Description>						<access default="True"></access>					</PrivilegeSet>				</ObjectList>			</PrivilegeSetsCatalog>			<ExtendedPrivilegesCatalog membercount="9">				<ObjectList membercount="9">					<ExtendedPrivilege id="1" name="fmwebdirect">						<Description>Access via FileMaker WebDirect</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="2" name="fmxdbc">						<Description>Access via ODBC/JDBC</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="3" name="fmapp">						<Description>Access via FileMaker Network</Description>						<ObjectList membercount="1">							<PrivilegeSetReference id="1" name="[Full Access]"></PrivilegeSetReference>						</ObjectList>					</ExtendedPrivilege>					<ExtendedPrivilege id="4" name="fmreauthenticate10">						<Description>Require re-authentication after the specified minutes in sleep/background.</Description>						<ObjectList membercount="3">							<PrivilegeSetReference id="1" name="[Full Access]"></PrivilegeSetReference>							<PrivilegeSetReference id="2" name="[Data Entry Only]"></PrivilegeSetReference>							<PrivilegeSetReference id="3" name="[Read-Only Access]"></PrivilegeSetReference>						</ObjectList>					</ExtendedPrivilege>					<ExtendedPrivilege id="5" name="fmxml">						<Description>Access via XML Web Publishing - FMS only</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="6" name="fmphp">						<Description>Access via PHP Web Publishing - FMS only</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="7" name="fmextscriptaccess">						<Description>Allow Apple events and ActiveX to perform FileMaker operations</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="8" name="fmurlscript">						<Description>Allow URLs to perform FileMaker scripts</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="9" name="fmrest">						<Description>Access via FileMaker Data API</Description>					</ExtendedPrivilege>				</ObjectList>			</ExtendedPrivilegesCatalog>			<AccountsCatalog membercount="2">				<Options>1</Options>				<ObjectList membercount="2">					<Account id="1" kind="0" type="FileMaker" enable="False">						<Description></Description>						<Authentication>							<AccountName>[]</AccountName>						</Authentication>						<PrivilegeSetReference id="3" name="[Read-Only Access]"></PrivilegeSetReference>					</Account>					<Account id="2" kind="0" type="FileMaker" enable="True">						<Description></Description>						<Authentication>							<AccountName>Developer</AccountName>						</Authentication>						<PrivilegeSetReference id="1" name="[Full Access]"></PrivilegeSetReference>					</Account>				</ObjectList>			</AccountsCatalog>			<StepsForScripts membercount="58">				<Script>					<ScriptReference id="2" name="Script Template"></ScriptReference>					<ObjectList membercount="11">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    none&#13;Parameters: none&#13;Return:     A standard `~success` keyed let-notation dictionary.&#13;Return:     A standard `~success` keyed let-notation dictionary with the following additional keys:&#13;Version:    YY-MM-DD - Charles Ross&#13;Notes:      none"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="3" name="PSoS Template"></ScriptReference>					<ObjectList membercount="36">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    none&#13;Parameters: none&#13;Return:     A standard `~success` keyed let-notation dictionary.&#13;Return:     A standard `~success` keyed let-notation dictionary with the following additional keys:&#13;Version:    YY-MM-DD - Charles Ross&#13;Notes:      none"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[psos.ShouldPerformOnServer]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="86" name="Set Error Capture" enable="True">							<Options>196608</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="True"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="164" name="Perform Script on Server" enable="True">							<Options>16448</Options>							<ParameterValues membercount="3">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="3" name="PSoS Template"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Boolean">									<Boolean type="Wait for completion" id="256" value="True"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( ScriptResult )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_result"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( LastError ) = err.HostExceedsCapacity]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[dev.IsDeveloper]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Host Exceeds Capacity"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["A \"Host Exceeds Capacity\" error was received while attempting PSoS."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[psos.TurnOverrideOn]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$?"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="3" name="PSoS Template"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( ScriptResult )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_result"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[psos.TurnOverrideOff]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$?"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="69" name="Else" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; dev.Nil )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="69" name="Else" enable="True">							<Options>0</Options>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value></value>									<Name value="$_result"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$_result]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="4" name="funit testing code"></ScriptReference>					<ObjectList membercount="6">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Code to copy and paste into scripts that support the funit module&#13;Version:    19-12-12 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["error title"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["error message"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "error log message" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="5" name="Sandbox"></ScriptReference>					<ObjectList membercount="0"></ObjectList>				</Script>				<Script>					<ScriptReference id="7" name="module: README"></ScriptReference>					<ObjectList membercount="1">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="module 1.0.0&#13;============&#13;&#13;This is...&#13;&#13;Requirements&#13;------------&#13;&#13;- FileMaker 18+&#13;- This file&apos;s custom function library&#13;&#13;Integration Instructions&#13;------------------------&#13;&#13;1. Import all of the custom functions from the chiv-lib file.&#13;2. &#13;&#13;See the &quot;Script Parameters&quot; section of the &quot;Conventions&quot; script instructions for passing parameters to public&#13;scripts.&#13;&#13;Usage&#13;-----&#13;&#13;blah blah blah&#13;&#13;Version History&#13;---------------&#13;&#13;1.0.0 - [Charles Ross][chuck] - 19-07-07&#13;&#13;[chuck]: mailto:chivalry@mac.com"></Comment>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="9" name="module: Settings"></ScriptReference>					<ObjectList membercount="12">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Return a let-notation structure of the settings needed for the module.&#13;Return:     A standard `~success` keyed let-notation dictionary&#13;            ~key: Description&#13;Version:    YY-MM-DD - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value></value>									<Name value="$_key"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="DO NOT EDIT BELOW THIS LINE"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $_key )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="4">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Configuration"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="12" name="module: Public Template"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    none&#13;Parameters: none&#13;Return:     A standard `~success` keyed let-notation dictionary.&#13;Version:    YY-MM-DD - Charles Ross&#13;Notes:      none"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="18" name="module priv: Private Template"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="15" name="module: Something to Test"></ScriptReference>					<ObjectList membercount="10">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that ...&#13;Return:     A let-notation dictionary with the following keys:&#13;            ~success: `True` or `False`&#13;            ~error:   Error text if an error occurred&#13;Version:    YY-MM-DD - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="False">							<Options>0</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1"></List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="False">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="False">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="False">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $~success]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="False">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; $~error )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="False">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="18" name="module priv: Private Template"></ScriptReference>					<ObjectList membercount="10">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    none&#13;Parameters: none&#13;Return:     A standard `~success` keyed let-notation dictionary.&#13;Version:    YY-MM-DD - Charles Ross&#13;Notes:      none"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="55" name="dialog: README"></ScriptReference>					<ObjectList membercount="1">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="dialog 2.0.0&#13;============&#13;&#13;The `dialog` module includes two types of features. The first is just a single script that ddisplays a dialog in a loop until tests have been passed. Failed tests alter the dialog box informing the user of the requirements to pass the test.&#13;&#13;But FileMaker doesn&apos;t support more complex dialogs, such as a dialog box that includes menus or even a portal. Card windows are perfect for this, however, and the other set of scripts supports using layouts as dialog boxes for record creation and editing. The module includes features for validating the data in a creation or edit dialog and support for using the keyboard to cancel or confirm the dialog.&#13;&#13;Requirements&#13;------------&#13;&#13;- FileMaker 18+&#13;- This file&apos;s custom function library&#13;- This file&apos;s `primary-key` module&#13;- This file&apos;s `window` module&#13;&#13;Integration Instructions&#13;------------------------&#13;&#13;1. Import all of the custom functions from the this file.&#13;2. Import the `primary-key` and `window` modules if they aren&apos;t already present in your solution.&#13;3. Import the `dialog` script folder.&#13;4. If you want to take advantage of the automated testing, create a layout with a context into `FUNIT` and set it up like the&#13;   `test_dialog` layout in this file.&#13;&#13;See the &quot;Script Parameters&quot; section of the &quot;Conventions&quot; script instructions for passing parameters to public&#13;scripts.&#13;&#13;Usage&#13;-----&#13;&#13;For simple dialogs, call `dialog-loop: Begin Loop ( Title ; BaseMsg ; Inputs ; Tests ; Msgs {; Btns ; Labels ; PWStart} )`. See&#13;the comments in that script for the needs of the various parameters.&#13;&#13;For layout based dialogs, you have a few options.&#13;&#13;- To prepare the dialog window:&#13;  - For the layout that will serve as a popin dialog, assign the `dialog: onRecordCommit ( IsValid )` script to&#13;    the `OnRecordCommit` script trigger, passing a value for the `Validation` parameter that is `True` when the&#13;    data is valid or an error message when validation fails.&#13;  - Assign the `dialog: onObjectKeystroke Layout` script to the layout&apos;s `OnLayoutKeystroke` trigger (or ensure it&apos;s&#13;    executed if you use a dispatch system for script triggers).&#13;  - For any large text fields that should capture carriage returns, assign the `dialog: onObjectKeystroke Long Text&#13;    Field` script to the field&apos;s `OnObjectKeystroke` trigger (or ensure it&apos;s executed if you use a dispatch system for&#13;    script triggers).&#13;  - Assign the `dialog: Save` script to execute with a button that should save changes and close the popin window.&#13;  - Assign the `dialog: Cancel` script to execute with a button that should cancel changes to data in the popin&#13;    window.&#13;  - If you use the `window` module, popins windows will be centered horizontally within their parent window and&#13;    offset from the top of their parent window by 50 pixels with a size resulting from an `Adjust Window [ Resize&#13;    to Fit ]` script call.&#13;&#13;&gt; Note: Since the dialog window creates a modal dialog that can only be closed via the `Close Window` script step, &#13;introducing the possibility of the window being stuck open during development, the `dialog: Cancel` script has an&#13;emergency exit. If a developer (logged in with &quot;[Full Access]&quot; privileges) clicks a button attached to this script&#13;while holding down the &quot;Shift&quot; key, the window will immediately close.&#13;&#13;- To activate the dialog window designed to edit a record, execute the `dialog: Edit ( Rule ; Layout ; ID {;&#13;  PreCommit ; PostCommit ; PostClose } )`, passing the following parameters:&#13;  - `Auth`: Send the string `True` if the user has permission to edit the record, or an error message that should&#13;    be displayed to the user if they do not have permission.&#13;  - `Layout`: The name of the layout that should be used for the popin window.&#13;  - `ID`: The primary key of the record to present to the user for editing.&#13;  - `Callbacks`: A let-notation dictionary of callbacks to perform, with the following potential keys:&#13;    - `pre_commit`: A script name to execute before committing&#13;    - `post_commit`: A script name to execute after committing&#13;    - `post_close`: A script name to execute after closing the dialog&#13;&#13;- To activate the popin window and create a new record, execute the `popin: New ( Rule ; Layout {; Fields ; Values ;&#13;  PreCommit ; PostCommit ; PostClose } )` script, passing the following parameters:&#13;  - `Rule`: Send the string `&quot;OK&quot;` if the user has permission to create the record, or an error message that should&#13;    be displayed to the user if they do not have permission.&#13;  - `Layout`: The name of the layout that should be used for the popin window.&#13;  - `Fields`: The optional list of fields that should be assigned values to the new record.&#13;  - `Values`: The optional list of values to assign to the fields listed in the `Fields` parameter. Note that these&#13;    two lists must have equal value counts.&#13;  - `Callbacks`: A let-notation dictionary of callbacks to perform, with the following potential keys:&#13;    - `pre_commit`: A script name to execute before committing&#13;    - `post_commit`: A script name to execute after committing&#13;    - `post_close`: A script name to execute after closing the dialog&#13;&#13;Here is an example of using the script parameter custom functions to pass parameters to `popin: New ( Rule ; Layout&#13;{; Fields ; Values ; PreCommit ; PostCommit ; PostClose } )`:&#13;&#13;    Let (&#13;      [&#13;        _auth = Case (&#13;          Get ( AccountPrivilegeSetName ) = &quot;Management&quot; ;&#13;          True ;&#13;          &quot;You must be a manager to create invoice records.&quot;&#13;        ) ;&#13;&#13;        _layout = &quot;Dialog New Invoice&quot; ;&#13;&#13;        _fields = List (&#13;          GetFieldName ( INV::date_created ) ;&#13;          GetFieldName ( INV::time_created )&#13;        ) ;&#13;&#13;        _values = List (&#13;          Get ( CurrentDate ) ;&#13;          Get ( CurrentTime )&#13;        ) ;&#13;&#13;        _pre_commit  = &quot;check_invoice_line_items&quot; ;&#13;        _post_commit = &quot;show_invoice_preview&quot; ;&#13;        _post_close  = &quot;update_screen&quot;&#13;      ] ;&#13;&#13;      script.Param ( &quot;Auth&quot;       ; _auth      ) &amp;&#13;      script.Param ( &quot;Layout&quot;     ; _layout    ) &amp;&#13;      script.Param ( &quot;Fields&quot;     ; _fields    ) &amp;&#13;      script.Param ( &quot;Values&quot;     ; _values    ) &amp;&#13;      script.Param ( &quot;PreCommit&quot;  ; _pre_save  ) &amp;&#13;      script.Param ( &quot;PostCommit&quot; ; _post_save ) &amp;&#13;      script.Param ( &quot;PostClose&quot;  ; _post_cose )&#13;    )&#13;&#13;To Do&#13;-----&#13;&#13;Try to find a way to full automate testing this module.&#13;&#13;Version History&#13;---------------&#13;&#13;1.0.0 - [Charles Ross][chuck] - 18-07-30&#13;1.0.1 - [Charles Ross][chuck] - 18-05-01 - Minor edits to `popin priv: New...`&#13;1.0.2 - [Charles Ross][chuck] - 18-05-25 - Fix variable typos.&#13;1.1.0 - [Charles Ross][chuck] - 19-08-25 - Refactor to conform to current conventions, take advantage of `Perform Script by Name`&#13;2.0.0 - [Charles Ross][chuck] - 19-09-21 - Combined popin and dialog modules&#13;&#13;[chuck]: mailto:chivalry@mac.com"></Comment>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="57" name="dialog: Window Name ( Layout {; ID } )"></ScriptReference>					<ObjectList membercount="23">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Return the name of a popin window&apos;s title given the layout and primary key value.&#13;Parameters: Layout: The name of the layout from which to calculate the window name.&#13;            ID:     Optional: The primary key of the record being edited on edit popins.&#13;Return:     A let-notation dictionary with a key of `~window_name` that should be the window&apos;s title.&#13;Version:    17-12-01 - Charles Ross&#13;            20-01-12 - Charles Ross - Update to work with current conventions and funit testing"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="DO NOT EDIT ABOVE THIS LINE"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Let (  [    _title = Case (      dev.IsSet ( $ID ) ;      "Edit " ;      "New "    ) &    Trim ( Substitute ( $Layout ; "popin" ; dev.Nil ) ) &    Case (      dev.IsSet ( $ID ) ;      " (" & $ID & ")" ;      dev.Nil    )  ] ;  _title)]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_window_name"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="DO NOT EDIT BELOW THIS LINE"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $_window_name )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidConfigMessage ( "dialog" ; "invalid window name" )]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.ConfigError )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True ) &let.Set ( "~window_name" ; $_window_name )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="60" name="dialog: Begin Loop ( Title ; BaseMsg ; Inputs ; Tests ; Msgs {; Btns ; Labels ; PWStart} )"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Provide a looping custom message dialog box that returns up to three input fields after conditions have been&#13;            met or the user has canceled.&#13;Parameters: Title:   The dialog box title.&#13;            BaseMsg: The beginning message for the dialog box which is append after any conditions fail.&#13;            Inputs:  The number of input fields, an integer from 0 to 3.&#13;            Tests:   A let-notation array of tests that should be passed. Each test should be `Evaluate`able.&#13;            Msgs:    A let-notation array of matching messages when conditions fail. Msgs and Tests must match in count.&#13;            Btns:    Optional: A let-notation array of button names, defaults to &quot;OK&quot; and &quot;Cancel&quot;. If provided, must&#13;                     include at least two buttons.&#13;            Labels:  Optional: A let-notation array of labels. If not provided, no labels are given.&#13;            PWStart: Optional: The first input field to make a password field. All inputs after the first password field&#13;                     will also be password fields.&#13;Return:     A let-notation dictionary with the following keys:&#13;              ~canceled: `True` if the user canceled the dialog box&#13;              ~input[1]: The contents of the first input field&#13;              ~input[2]: The contents of the second input field&#13;              ~input[3]: The contents of the third input field&#13;Version:    18-07-26 - Charles Ross&#13;Notes:      If the Btns parameter is provided, the last button will be the cancel button."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="90" name="dialog priv: Begin Loop ( Title ; BaseMsg ; Inputs ; Tests ; Msgs {; Btns ; Labels ; PWStart} )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="62" name="dialog: Edit ( Auth ; Layout ; ID {; Callbacks } )"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Opens the specified popin layout for record editing.&#13;Parameters: Auth:       `True` if access is allowed, an error message to display to the user otherwise.&#13;            Layout:     The layout to use for the popin window.&#13;            ID:         The primary key of the record to edit.&#13;            Callbacks:  Optional: A let-notation dictionary with the following possible keys:&#13;                        pre_commit:  A script name to execute before committing&#13;                        post_commit: A script name to execute after committing&#13;                        post_close:  A script name to execute after closing&#13;Return:     none&#13;Version:    17-12-01 - Charles Ross&#13;            18-05-25 - Charles Ross - Fix variable typos&#13;            19-08-25 - Charles Ross - Take advantage of Perform Script by Name, conform to funit conventions in error&#13;                                      reporting&#13;Todo:       - Automate and abstract the feedback dialog for missing required parameters."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="94" name="dialog priv: Edit ( Auth ; Layout ; ID {; Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="63" name="dialog: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    This script (after rule evaluation) opens the specified popin layout and a record for editing&#13;Parameters: Auth:       `True` if access is allowed, an error message to display to the user otherwise.&#13;            Layout:     The layout to use for the popin window.&#13;            Fields:     Optional: A let-notation array of fully-qualified field names (`GetFieldName ( field )`).&#13;            Values:     Optional: A let-notation array of values to assign to the fields in the Fields parameter. Count of&#13;                        each must match.&#13;            Callbacks:  Optional: A let-notation dictionary with the following possible keys:&#13;                        pre_commit:  A script name to execute before committing&#13;                        post_commit: A script name to execute after committing&#13;                        post_close:  A script name to execute after closing&#13;Version:    17-12-01 - Charles Ross&#13;            19-08-25 - Charles Ross - Conform to funit conventions in error reporting&#13;Notes:      The `Fields` and `Values` parameters should be constructed using `let.Array`. Any name can be used, but it must&#13;            be consistent for each parameter, i.e.:&#13;                let.Array ( &quot;Fields&quot; ; 1 ; GetFieldName ( MOD::text_field ) ) &amp;&#13;                let.Array ( &quot;Values&quot; ; 1 ; &quot;first value&quot; ) &amp;&#13;                let.Array ( &quot;Fields&quot; ; 2 ; GetFieldName ( MOD::date_field ) ) &amp;&#13;                let.Array ( &quot;Values&quot; ; 2 ; &quot;second value&quot; )"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="95" name="dialog priv: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="65" name="dialog: onRecordCommit ( IsValid )"></ScriptReference>					<ObjectList membercount="7">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Determines whether a popin can be committed.&#13;Parameters: IsValid: `True` if the commit has been validated or an error message otherwise.&#13;Return:     `True` if the commit can continue, `False` otherwise.&#13;Version:    17-12-01 - Charles Ross&#13;            19-12-11 - Charles Ross - Conform return value to standards"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[triggers.Active]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="97" name="dialog priv: Commit ( IsValid )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="66" name="dialog: Save"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Initiates a save using the OnRecordCommit trigger to ensure validation.&#13;Version:    17-12-01 - Charles Ross&#13;            18-11-12 - Charles Ross - Store record&apos;s primary key value in a global variable before closing&#13;            19-08-25 - Charles Ross - Take advantage of Perform Script by Name"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="98" name="dialog priv: Save"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="67" name="dialog: Cancel"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    This public script initiates &apos;cancel&apos; functionality.&#13;Version:    17-12-01 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="99" name="dialog priv: Cancel"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="69" name="dialog: onObjectKeystroke Layout"></ScriptReference>					<ObjectList membercount="8">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    To be fired upon a keystroke event while a popin window is open.&#13;Parameters: `True` if keystroke should be handled normally, `False` otherwise.&#13;Version:    17-12-01 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[triggers.Active]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="101" name="dialog priv: Layout Keystroke ( Code )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Code" ; Code ( Get ( TriggerKeystroke ) ) )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$~success]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="70" name="dialog: onObjectKeystroke Long Text Field"></ScriptReference>					<ObjectList membercount="7">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    To be fired upon a keystroke event while a user is in a long text field on a popin window.&#13;Parameters: `True` if keystroke should be handled normally, `False` otherwise.&#13;Version:    17-12-01 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[triggers.Active]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="102" name="dialog priv: Long Text Field Keystroke ( Code )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Code" ; Code ( Get ( TriggerKeystroke ) ) )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$~success]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="73" name="dialog: Setup"></ScriptReference>					<ObjectList membercount="6">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Setup for dialog tests.&#13;Version:    19-11-25 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*GetNextSerialValue ( Get ( FileName ) ; GetFieldName ( FUNITCF::id ) )*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_FUNITCF_NEXT_SERIAL_NUMBER"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["test_dialog"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_LAYOUT_NAME"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="75" name="dialog: Test New Dialog Save"></ScriptReference>					<ObjectList membercount="18">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that we can successfully create a record using the module&#13;Return:     A let-notation dictionary with the following keys:&#13;            - ~success: `True` or `False`&#13;            - ~error:   Error text if an error occurred&#13;Version:    19-11-25 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["function value"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_function_value"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[ExecuteSQL ( "SELECT COUNT(*) FROM FUNITCF" ; dev.Nil ; dev.Nil )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_funitcf_count"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="63" name="dialog: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[/*script.Param ( "Auth" ; True ) &script.Param ( "Layout" ; $$_DIALOG_TEST_LAYOUT_NAME ) &let.Array ( "Fields" ; 1 ; GetFieldName ( FUNITCF::function ) ) &let.Array ( "Values" ; 1 ; $_function_value )*/]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="66" name="dialog: Save"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*dev.IsSet ( sql.SelectFromWhereValue ( FUNITCF::id ; FUNITCF::id ; FUNITCF::function ; $_function_value ) )*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_record_created"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $_record_created]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module failed to create record" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$_funitcf_count ≠ ExecuteSQL ( "SELECT COUNT(*) FROM FUNITCF" ; dev.Nil ; dev.Nil ) - 1]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module did not increment record count" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="76" name="dialog: Test New Dialog Cancel"></ScriptReference>					<ObjectList membercount="18">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that we can successfully cancel record creation using the module&#13;Return:     A let-notation dictionary with the following keys:&#13;            - ~success: `True` or `False`&#13;            - ~error:   Error text if an error occurred&#13;Version:    19-11-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["cancel value"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_function_value"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[ExecuteSQL ( "SELECT COUNT(*) FROM FUNITCF" ; dev.Nil ; dev.Nil )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_funitcf_count"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="63" name="dialog: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[/*script.Param ( "Auth" ; True ) &script.Param ( "Layout" ; $$_DIALOG_TEST_LAYOUT_NAME ) &let.Array ( "Fields" ; 1 ; GetFieldName ( FUNITCF::function ) ) &let.Array ( "Values" ; 1 ; $_function_value )*/]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="67" name="dialog: Cancel"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*dev.IsSet ( sql.SelectFromWhereValue ( FUNITCF::id ; FUNITCF::id ; FUNITCF::function ; $_function_value ) )*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_record_created"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$_record_created]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module failed to cancel record creation" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$_funitcf_count ≠ ExecuteSQL ( "SELECT COUNT(*) FROM FUNITCF" ; dev.Nil ; dev.Nil )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module did increment record count" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="77" name="dialog: Test Edit Dialog Save"></ScriptReference>					<ObjectList membercount="17">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that we can successfully edit a record using the module&#13;Return:     A let-notation dictionary with the following keys:&#13;            - ~success: `True` or `False`&#13;            - ~error:   Error text if an error occurred&#13;Version:    19-11-25 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="81" name="dialog: Create Test Record"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["updated value"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_function_value"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="62" name="dialog: Edit ( Auth ; Layout ; ID {; Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Auth" ; True ) &script.Param ( "Layout" ; $$_DIALOG_TEST_LAYOUT_NAME ) &script.Param ( "ID" ; $~funitcf_id )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="76" name="Set Field" enable="True">							<Options>16385</Options>							<ParameterValues membercount="2">								<Parameter type="FieldReference">									<FieldReference id="0" name="" baseTable="&lt;Table Missing&gt;">										<repetition value="1"></repetition>									</FieldReference>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$_function_value]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="66" name="dialog: Save"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*dev.IsSet ( sql.SelectFromWhereValue ( FUNITCF::id ; FUNITCF::id ; FUNITCF::function ; $_function_value ) )*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_record_edited"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $_record_edited]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module failed to edit record" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="78" name="dialog: Test Edit Dialog Cancel"></ScriptReference>					<ObjectList membercount="18">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that we can successfully cancel editing a record&#13;Return:     A let-notation dictionary with the following keys:&#13;            - ~success: `True` or `False`&#13;            - ~error:   Error text if an error occurred&#13;Version:    19-11-25 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="81" name="dialog: Create Test Record"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["failed updated value"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_function_value"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="62" name="dialog: Edit ( Auth ; Layout ; ID {; Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Auth" ; True ) &script.Param ( "Layout" ; $$_DIALOG_TEST_LAYOUT_NAME ) &script.Param ( "ID" ; $~funitcf_id )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*FUNITCF::function*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_original_value"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="76" name="Set Field" enable="True">							<Options>16385</Options>							<ParameterValues membercount="2">								<Parameter type="FieldReference">									<FieldReference id="0" name="" baseTable="&lt;Table Missing&gt;">										<repetition value="1"></repetition>									</FieldReference>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$_function_value]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="67" name="dialog: Cancel"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*dev.IsSet ( sql.SelectFromWhereValue ( FUNITCF::id ; FUNITCF::id ; FUNITCF::function ; $_function_value ) )*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_record_edited"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$_record_edited]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module failed to prevent record edit" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="79" name="dialog: Test Callbacks"></ScriptReference>					<ObjectList membercount="18">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that callback scripts get called correctly in the correct state&#13;Return:     A let-notation dictionary with the following keys:&#13;            - ~success: `True` or `False`&#13;            - ~error:   Error text if an error occurred&#13;Version:    19-11-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="63" name="dialog: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Auth" ; True ) &script.Param ( "Layout" ; $$_DIALOG_TEST_LAYOUT_NAME ) &script.Param ( "Callbacks" ; let.Set ( "pre_commit" ; "dialog: Pre Commit Callback" ) &                             let.Set ( "post_commit" ; "dialog: Post Commit Callback" ) &                             let.Set ( "post_close" ; "dialog: Post Close Callback" ) )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="66" name="dialog: Save"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_DIALOG_TEST_PRE_COMMIT_EXECUTED_PROPERLY]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module did not properly call the pre commit script" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_DIALOG_TEST_POST_COMMIT_EXECUTED_PROPERLY]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module did not properly call the post commit script" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_DIALOG_TEST_POST_CLOSE_EXECUTED_PROPERLY]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "dialog module did not properly call the post close script" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="81" name="dialog: Create Test Record"></ScriptReference>					<ObjectList membercount="9">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Create a test record for edit testing scripts to use&#13;Return:     A let-notation dictionary with the following key:&#13;            - ~funitcf_id: The primary key of the newly created record&#13;Version:    19-11-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="112" name="window: New Utility ( Layout {; WindowID } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[/*script.Param ( "Layout" ; dev.GetTableName ( FUNITCF::id ) )*/]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="7" name="New Record/Request" enable="True">							<Options>0</Options>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*FUNITCF::id*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_funitcf_id"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="76" name="Set Field" enable="True">							<Options>16385</Options>							<ParameterValues membercount="2">								<Parameter type="FieldReference">									<FieldReference id="0" name="" baseTable="&lt;Table Missing&gt;">										<repetition value="1"></repetition>									</FieldReference>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["original value"]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~funitcf_id" ; $_funitcf_id )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="83" name="dialog: Pre Commit Callback"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    The pre commit callback script to user during automated testing&#13;Version:    19-11-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( RecordOpenState ) ≠ system.RecordStateClosed]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_PRE_COMMIT_EXECUTED_PROPERLY"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="84" name="dialog: Post Commit Callback"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    The post commit callback script to user during automated testing&#13;Version:    19-11-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( RecordOpenState ) = system.RecordStateClosed]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_POST_COMMIT_EXECUTED_PROPERLY"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="85" name="dialog: Post Close Callback"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    The post close callback script to user during automated testing&#13;Version:    19-11-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( LayoutName ) ≠ $$_DIALOG_TEST_LAYOUT_NAME]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_POST_CLOSE_EXECUTED_PROPERLY"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="87" name="dialog: Teardown"></ScriptReference>					<ObjectList membercount="18">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Tear down the diaog tests&#13;Version:    19-11-25 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="112" name="window: New Utility ( Layout {; WindowID } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[/*script.Param ( "Layout" ; dev.GetTableName ( FUNITCF::id ) )*/]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="22" name="Enter Find Mode" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean type="Pause" id="16777216" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="76" name="Set Field" enable="True">							<Options>16385</Options>							<ParameterValues membercount="2">								<Parameter type="FieldReference">									<FieldReference id="0" name="" baseTable="&lt;Table Missing&gt;">										<repetition value="1"></repetition>									</FieldReference>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["≥" & $$_DIALOG_TEST_FUNITCF_NEXT_SERIAL_NUMBER]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="28" name="Perform Find" enable="True">							<Options>0</Options>						</Step>						<Step id="10" name="Delete All Records" enable="True">							<Options>128</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean type="With dialog" id="128" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="116" name="Set Next Serial Value" enable="True">							<Options>16385</Options>							<ParameterValues membercount="2">								<Parameter type="FieldReference">									<FieldReference id="0" name="" baseTable="&lt;Table Missing&gt;">										<repetition value="1"></repetition>									</FieldReference>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$$_DIALOG_TEST_FUNITCF_NEXT_SERIAL_NUMBER]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_FUNITCF_NEXT_SERIAL_NUMBER"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_LAYOUT_NAME"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_PRE_COMMIT_EXECUTED_PROPERLY"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_POST_COMMIT_EXECUTED_PROPERLY"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_TEST_POST_CLOSE_EXECUTED_PROPERLY"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="90" name="dialog priv: Begin Loop ( Title ; BaseMsg ; Inputs ; Tests ; Msgs {; Btns ; Labels ; PWStart} )"></ScriptReference>					<ObjectList membercount="44">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Provide a looping custom message dialog box that returns up to three input fields after conditions have been&#13;            met or the user has canceled.&#13;Parameters: Title:   The dialog box title.&#13;            BaseMsg: The beginning message for the dialog box which is append after any conditions fail.&#13;            Inputs:  The number of input fields, an integer from 0 to 3.&#13;            Tests:   A let-notation array of tests that should be passed. Each test should be `Evaluate`able.&#13;            Msgs:    A let-notation array of matching messages when conditions fail. Msgs and Tests must match in count.&#13;            Btns:    Optional: A let-notation array of button names, defaults to &quot;OK&quot; and &quot;Cancel&quot;. If provided, must&#13;                     include at least two buttons.&#13;            Labels:  Optional: A let-notation array of labels. If not provided, no labels are given.&#13;            PWStart: Optional: The first input field to make a password field. All inputs after the first password field&#13;                     will also be password fields.&#13;Return:     A let-notation dictionary with the following keys:&#13;              ~canceled: `True` if the user canceled the dialog box&#13;              ~input[1]: The contents of the first input field&#13;              ~input[2]: The contents of the second input field&#13;              ~input[3]: The contents of the third input field&#13;Version:    18-07-26 - Charles Ross&#13;Notes:      If the Btns parameter is provided, the last button will be the cancel button.&#13;Todo:       Shorten script by using subscripts, but get testing scripts in place first to make sure nothing breaks."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( not script.AssignParams )  or ( $Inputs < 0 )  or ( $Inputs > 3 )  or ( not math.IsInteger ( $Inputs ) )  or ( dev.IsSet ( $Btns[1] ) and IsEmpty ( $Btns[2] ) )  or ( dev.IsSet ( $PWStart ) and ( not math.IsInteger ( $PWStart ) ) )  or ( dev.IsSet ( $PWStart ) and ( $PWStart > $Inputs ) )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["Invalid parameters were passed to " & Quote ( Get ( ScriptName ) ) & ". Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="92" name="dialog priv: Validate Arrays ( Tests ; Msgs )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$BaseMsg]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_msg"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[False]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$~canceled"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[False]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_passed"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="71" name="Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="72" name="Exit Loop If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$~canceled or $_passed]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="91" name="dialog priv: Show Dialog ( Title ; Msg ; Inputs {; Btns ; Labels ; PWStart} )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter ) &script.Param ( "Msg" ; $_msg )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $~canceled]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$~input[1]]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_input"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$~input[2]]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_input"></Name>									<repetition>										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[2]]></Text>											</Calculation>										</Calculation>									</repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$~input[3]]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_input"></Name>									<repetition>										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[3]]></Text>											</Calculation>										</Calculation>									</repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[0]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_i"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[True]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_passed"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="71" name="Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$_i + 1]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_i"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="72" name="Exit Loop If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $Tests[$_i] ) or ( not $_passed )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[EvaluationError ( Evaluate ( $Tests[$_i] ) ) ≠ err.NoError]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[apperr.EvalError ( $Tests[$_i] )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_err"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Evaluation Error"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$_err]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; $_err )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$_passed and GetAsBoolean ( Evaluate ( $Tests[$_i] ) )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_passed"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $_passed]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$Msgs[$_i] & " " & $BaseMsg]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_msg"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="73" name="End Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="73" name="End Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True ) &let.Set ( "~button"   ; $~button ) &let.Set ( "~input[1]" ; $_input[1] ) &let.Set ( "~input[2]" ; $_input[2] ) &let.Set ( "~input[3]" ; $_input[3] )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="91" name="dialog priv: Show Dialog ( Title ; Msg ; Inputs {; Btns ; Labels ; PWStart} )"></ScriptReference>					<ObjectList membercount="39">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Show the appropriate dialog given the parameters&#13;Parameters: Title:   The dialog box title.&#13;            Msg:     The message to show in the dialog.&#13;            Inputs:  The number of input fields, an integer from 0 to 3.&#13;            Btns:    Optional: A let-notation array of button names, defaults to &quot;OK&quot; and &quot;Cancel&quot;. If provided, must&#13;                     include at least two buttons.&#13;            Labels:  Optional: A let-notation array of labels. If not provided, no labels are given.&#13;            PWStart: Optional: The first input field to make a password field. All inputs after the first password field&#13;                     will also be password fields.&#13;Return:     A let-notation dictionary with the following keys:&#13;            ~canceled: `True` if the user canceled, `False` otherwise&#13;            ~input_1`: The contents of the first first input field&#13;            ~input_2`: The contents of the second first input field&#13;            ~input_3`: The contents of the third first input field&#13;Version:    19-12-12 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( not script.AssignParams )  or ( $Inputs < 0 )  or ( $Inputs > 3 )  or ( not math.IsInteger ( $Inputs ) )  or ( dev.IsSet ( $Btns[1] ) and IsEmpty ( $Btns[2] ) )  or ( dev.IsSet ( $PWStart ) and ( not math.IsInteger ( $PWStart ) ) )  or ( dev.IsSet ( $PWStart ) and ( $PWStart > $Inputs ) )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["Invalid parameters were passed to " & Quote ( Get ( ScriptName ) ) & ". Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Default ( $Btns[1] ; "OK" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$Btns"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Default ( $Btns[2] ; "Cancel" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$Btns"></Name>									<repetition>										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[2]]></Text>											</Calculation>										</Calculation>									</repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[2]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_cancel_btn"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Case (  dev.IsSet ( $Btns[3] ) ; 3                         ; 2)]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_cancel_btn"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Inputs = 0]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 1 ) and IsEmpty ( $PWStart )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="6">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Inputs = 1]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="6">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 2 ) and IsEmpty ( $PWStart )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="7">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field2">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="2"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="3">											<Calculation>												<Text><![CDATA[$Labels[2]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 2 ) and ( $PWStart = 1 )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="7">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field2">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="2"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="3">											<Calculation>												<Text><![CDATA[$Labels[2]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 2 ) and ( $PWStart = 2 )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="7">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field2">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="2"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="3">											<Calculation>												<Text><![CDATA[$Labels[2]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 3 ) and IsEmpty ( $PWStart )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="8">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field2">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="2"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="3">											<Calculation>												<Text><![CDATA[$Labels[2]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field3">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="3"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="4">											<Calculation>												<Text><![CDATA[$Labels[3]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 3 ) and ( $PWStart = 1 )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="8">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field2">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="2"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="3">											<Calculation>												<Text><![CDATA[$Labels[2]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field3">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="3"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="4">											<Calculation>												<Text><![CDATA[$Labels[3]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 3 ) and ( $PWStart = 2 )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="8">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field2">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="2"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="3">											<Calculation>												<Text><![CDATA[$Labels[2]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field3">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="3"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="4">											<Calculation>												<Text><![CDATA[$Labels[3]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( $Inputs = 3 ) and ( $PWStart = 3 )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="8">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$Title]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Msg]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[$Btns[1]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[$Btns[2]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Calculation datatype="1" position="7">										<Calculation>											<Text><![CDATA[$Btns[3]]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Field1">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="1"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$Labels[1]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field2">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="2"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="False"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="3">											<Calculation>												<Text><![CDATA[$Labels[2]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>								<Parameter type="Field3">									<Parameter type="Target">										<Variable value="$_input">											<repetition value="3"></repetition>										</Variable>									</Parameter>									<Boolean type="Password" value="True"></Boolean>									<Parameter type="Label">										<Calculation datatype="1" position="4">											<Calculation>												<Text><![CDATA[$Labels[3]]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( LastMessageChoice )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_last_message_choice"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$_last_message_choice = $_cancel_btn]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_canceled"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True ) &let.Set ( "~canceled" ; $_canceled ) &let.Set ( "~button" ; $_last_message_choice ) &let.Set ( "~input[1]" ; $_input[1] ) &let.Set ( "~input[2]" ; $_input[2] ) &let.Set ( "~input[3]" ; $_input[3] )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="92" name="dialog priv: Validate Arrays ( Tests ; Msgs )"></ScriptReference>					<ObjectList membercount="20">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Validate that the count of items in conditions and messages are the same.&#13;Parameters: Conditions: A let-notation array of conditions.&#13;            Messages:   A let-notation array of messages.&#13;Return:     Nothing, but halts execution with a dialog box if there&apos;s a mismatch.&#13;Version:    18-07-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["Invalid parameters were passed to " & Quote ( Get ( ScriptName ) ) & ". Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[0]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_i"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="71" name="Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$_i + 1]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_i"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="72" name="Exit Loop If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $Tests[$_i] ) and IsEmpty ( $Msgs[$_i] )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $Tests[$_i] ) or IsEmpty ( $Msgs[$_i] )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["The script " & Quote ( Get ( ScriptName ) ) & " received mismatched numbers of conditions and messages. Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="73" name="End Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="94" name="dialog priv: Edit ( Auth ; Layout ; ID {; Callbacks } )"></ScriptReference>					<ObjectList membercount="50">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Opens the specified popin layout for record editing.&#13;Parameters: Auth:       `True` if access is allowed, an error message to display to the user otherwise.&#13;            Layout:     The layout to use for the popin window.&#13;            ID:         The primary key of the record to edit.&#13;            Callbacks:  Optional: A let-notation dictionary with the following possible keys:&#13;                        pre_commit:  A script name to execute before committing&#13;                        post_commit: A script name to execute after committing&#13;                        post_close:  A script name to execute after closing&#13;Return:     none&#13;Version:    17-12-01 - Charles Ross&#13;            18-05-25 - Charles Ross - Fix variable typos&#13;            19-08-25 - Charles Ross - Take advantage of Perform Script by Name, conform to funit conventions in error&#13;                                      reporting"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not list.IsMember ( $Layout ; LayoutNames ( Get ( FileName ) ) )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameter"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["The 'Layout' parameter (" & $Layout & ") is invalid. Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Auth ≠ True]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Not allowed"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Auth // Stores message to user if not `True`]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="104" name="dialog priv: Save Callbacks ( { Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Callbacks" ; $Callbacks )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="57" name="dialog: Window Name ( Layout {; ID } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="111" name="window: New ( Layout ; Title {; Style ; Coords ; Size } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Layout" ; $Layout ) &script.Param ( "Style"  ; "dimcard" ) &script.Param ( "Title"  ; let.Get ( Get ( ScriptResult ) ; "~window_name" ) )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="45" name="primary-key: Primary Key Name"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( LayoutTableName ) & "::" & let.Get ( Get ( ScriptResult ) ; "~pk_name" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_key_field"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="22" name="Enter Find Mode" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean type="Pause" id="16777216" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="147" name="Set Field By Name" enable="True">							<Options>134234112</Options>							<ParameterValues membercount="3">								<Parameter type="Boolean">									<Boolean type="Specify target field" id="134217728" value="True"></Boolean>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$_key_field]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["==" & $ID]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( ErrorCaptureState )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_error_capture_state"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="86" name="Set Error Capture" enable="True">							<Options>196608</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="True"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="28" name="Perform Find" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( FoundCount ) = 0]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Record Not Found"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["The specified record (" & $_key_field & "=" & $ID & ") cannot be found. If this problem persists, please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( FoundCount ) > 1]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Multiple Records Found"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["Multiple records were found with the specified ID (" & $_key_field & "=" & $ID & "). Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$_error_capture_state = 0 // Error capture was off, return it to that state]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="86" name="Set Error Capture" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="95" name="dialog priv: New ( Auth ; Layout {; Fields ; Values ; Callbacks } )"></ScriptReference>					<ObjectList membercount="43">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    This script (after rule evaluation) opens the specified popin layout and a record for editing&#13;Parameters: Auth:       `True` if access is allowed, an error message to display to the user otherwise.&#13;            Layout:     The layout to use for the popin window.&#13;            Fields:     Optional: A let-notation array of fully-qualified field names (`GetFieldName ( field )`).&#13;            Values:     Optional: A let-notation array of values to assign to the fields in the Fields parameter. Count of&#13;                        each must match.&#13;            Callbacks:  Optional: A let-notation dictionary with the following possible keys:&#13;                        pre_commit:  A script name to execute before committing&#13;                        post_commit: A script name to execute after committing&#13;                        post_close:  A script name to execute after closing&#13;Version:    17-12-01 - Charles Ross&#13;            19-08-25 - Charles Ross - Conform to funit conventions in error reporting&#13;Notes:      The `Fields` and `Values` parameters should be constructed using `let.Array`. Any name can be used, but it must&#13;            be consistent for each parameter, i.e.:&#13;                let.Array ( &quot;Fields&quot; ; 1 ; GetFieldName ( MOD::text_field ) ) &amp;&#13;                let.Array ( &quot;Values&quot; ; 1 ; &quot;first value&quot; ) &amp;&#13;                let.Array ( &quot;Fields&quot; ; 2 ; GetFieldName ( MOD::date_field ) ) &amp;&#13;                let.Array ( &quot;Values&quot; ; 2 ; &quot;second value&quot; )"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Validate and parse parameters"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not list.IsMember ( $Layout ; LayoutNames ( Get ( FileName ) ) )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameter"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["The 'Layout' parameter (" & $Layout & ") is invalid. Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Auth ≠ True]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Not allowed"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$Auth // Stores message to user if not `True`]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="104" name="dialog priv: Save Callbacks ( { Callbacks } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Callbacks" ; $Callbacks )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Create the window"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="57" name="dialog: Window Name ( Layout {; ID } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Layout" ; $Layout )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="111" name="window: New ( Layout ; Title {; Style ; Coords ; Size } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Layout" ; $Layout ) &script.Param ( "Style"  ; "dimcard" ) &script.Param ( "Title"  ; let.Get ( Get ( ScriptResult ) ; "~window_name" ) )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Create the record and populate the fields."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="7" name="New Record/Request" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[0]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_i"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="71" name="Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$_i + 1]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_i"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[let.ArrayGet ( Get ( ScriptParameter ) ; "Fields" ; $_i )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_field"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="72" name="Exit Loop If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( let.ArrayGet ( Get ( ScriptParameter ) ; "Fields" ; $_i ) )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[let.ArrayGet ( Get ( ScriptParameter ) ; "Values" ; $_i )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_value"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="147" name="Set Field By Name" enable="True">							<Options>134234112</Options>							<ParameterValues membercount="3">								<Parameter type="Boolean">									<Boolean type="Specify target field" id="134217728" value="True"></Boolean>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$_field]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[$_value]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="73" name="End Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="97" name="dialog priv: Commit ( IsValid )"></ScriptReference>					<ObjectList membercount="30">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Determines if a popin window can be committed.&#13;Parameters: IsValid: `True` or an error message to present to the user.&#13;Return:     `True` if window can be commited, `False` otherwise.&#13;Version:    17-12-01 - Charles Ross&#13;            19-08-25 - Charles Ross - Conform to funit conventions in error reporting&#13;            19-11-26 - Charles Ross - Update variable names to reflect new module name"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[False]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_SAVE_HAS_SUCCEEDED"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Store global var to local var and clear global var."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[$$_DIALOG_MODULE_COMMIT_REASON]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_commit_reason"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_COMMIT_REASON"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Lack of reason indicates validation failure."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $_commit_reason )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Did developer indicate that validation failed?"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$IsValid ≠ True]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Validation Error"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[$IsValid]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="OK">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[True]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_SAVE_HAS_SUCCEEDED"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="98" name="dialog priv: Save"></ScriptReference>					<ObjectList membercount="42">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Initiates a save using the OnRecordCommit trigger to ensure validation.&#13;Version:    17-12-01 - Charles Ross&#13;            18-11-12 - Charles Ross - Store record&apos;s primary key value in a global variable before closing&#13;            19-08-25 - Charles Ross - Take advantage of Perform Script by Name&#13;            19-11-26 - Charles Ross - Update variable names to reflect new module name"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[dev.IsSet ( $$_DIALOG_MODULE_CALLBACK_PRECOMMIT )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>33572864</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="By name" value="2">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$$_DIALOG_MODULE_CALLBACK_PRECOMMIT]]></Text>											</Calculation>										</Calculation>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[let.Get ( Get ( ScriptResult ) ; "~result" ) = False]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["save"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_COMMIT_REASON"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="75" name="Commit Records/Requests" enable="True">							<Options>128</Options>							<ParameterValues membercount="3">								<Parameter type="Boolean">									<Boolean type="Skip data entry validation" id="256" value="False"></Boolean>								</Parameter>								<Parameter type="Boolean">									<Boolean type="With dialog" id="128" value="False"></Boolean>								</Parameter>								<Parameter type="Boolean">									<Boolean type="Force Commit" id="512" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( RecordOpenState ) = system.RecordStateClosed]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[dev.IsSet ( $$_DIALOG_MODULE_CALLBACK_POSTCOMMIT )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>33572864</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="By name" value="2">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$$_DIALOG_MODULE_CALLBACK_POSTCOMMIT]]></Text>											</Calculation>										</Calculation>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[let.Get ( Get ( ScriptResult ) ; "~result" ) = False]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$$_DIALOG_MODULE_SAVE_HAS_SUCCEEDED  or ( $$_DIALOG_MODULE_COMMIT_REASON = "save" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="45" name="primary-key: Primary Key Name"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults // Assigns $~pk_name]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Evaluate ( Get ( LayoutTableName ) & "::" & $~pk_name )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_RECORD_ID"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[dev.IsSet ( $$_DIALOG_MODULE_CALLBACK_POSTCLOSE )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>33572864</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="By name" value="2">										<Calculation datatype="1" position="2">											<Calculation>												<Text><![CDATA[$$_DIALOG_MODULE_CALLBACK_POSTCLOSE]]></Text>											</Calculation>										</Calculation>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[let.Get ( Get ( ScriptResult ) ; "~result" ) = False]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="105" name="dialog priv: Clear global variables"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="80" name="Refresh Window" enable="True">							<Options>768</Options>							<ParameterValues membercount="2">								<Parameter type="Boolean">									<Boolean type="Flush cached join results" id="256" value="True"></Boolean>								</Parameter>								<Parameter type="Boolean">									<Boolean type="Flush cached external data" id="512" value="True"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="99" name="dialog priv: Cancel"></ScriptReference>					<ObjectList membercount="32">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Initiates a cancel operation on a popin window.&#13;Version:    17-12-01 - Charles Ross&#13;            19-11-26 - Charles Ross - Clear the global variables"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[modifier.KeyActive ( modifier.Shift ) and dev.IsDeveloper]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( RecordOpenState ) = system.RecordStateEditedOpen]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Confirm Cancel"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["Are you sure you want to cancel? All your changes will be lost."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[Let (  [    $_yes_button = 1  ] ;  "Yes")]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[Let (  [    $_no_button = 2  ] ;  "No")]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( LastMessageChoice ) = $_no_button]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( RecordOpenState ) = system.RecordStateNewOpen]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Confirm Cancel"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["Are you sure you want to cancel? Your new record will not be saved."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1">									<Calculation datatype="1" position="5">										<Calculation>											<Text><![CDATA[Let (  [    $_yes_button = 1  ] ;  "Yes")]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Calculation datatype="1" position="6">										<Calculation>											<Text><![CDATA[Let (  [    $_no_button = 2  ] ;  "No")]]></Text>										</Calculation>									</Calculation>									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( LastMessageChoice ) = $_no_button]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="69" name="Else" enable="True">							<Options>0</Options>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="51" name="Revert Record/Request" enable="True">							<Options>128</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean type="With dialog" id="128" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="105" name="dialog priv: Clear global variables"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="101" name="dialog priv: Layout Keystroke ( Code )"></ScriptReference>					<ObjectList membercount="27">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Captures keystrokes that have special meaning to popin windows.&#13;Parameters: Key: The keystroke that needs to be checked for capture.&#13;Return:     `False` if the keystroke is captured, `True` otherwise.&#13;Version:    17-12-01 - Charles Ross&#13;            19-08-25 - Charles Ross - Conform to funit conventions in error reporting"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[list.IsMember ( $Code ; List ( key.ReturnCode ; key.EnterCode ) )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="See if the keystroke was already captured by a long text field."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$$_DIALOG_MODULE_CARRIAGE_RETURN_HANDLED]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CARRIAGE_RETURN_HANDLED"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="98" name="dialog priv: Save"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Code = key.EscapeCode]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="99" name="dialog priv: Cancel"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="102" name="dialog priv: Long Text Field Keystroke ( Code )"></ScriptReference>					<ObjectList membercount="18">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Captures keystrokes that have special meaning to long text fields in popin windows.&#13;Parameters: Key: The keystroke that needs to be checked for capture.&#13;Return:     `False` is the keystroke is captured, `True` otherwise.&#13;Version:    17-12-01 - Charles Ross&#13;            19-08-25 - Charles Ross - Conform to funit conventions in error reporting"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Capture CR (Return) but pass others up the chain."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Code ( $Code ) = key.ReturnCode]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Prevent the layout keystroke trigger from capturing this."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[True]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CARRIAGE_RETURN_HANDLED"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="101" name="dialog priv: Layout Keystroke ( Code )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Key" ; $Key )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="104" name="dialog priv: Save Callbacks ( { Callbacks } )"></ScriptReference>					<ObjectList membercount="16">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Record any sent callbacks in global variables&#13;Parameters: Callbacks:  Optional: A let-notation dictionary with the following possible keys:&#13;                        pre_commit:  A script name to execute before committing&#13;                        post_commit: A script name to execute after committing&#13;                        post_close:  A script name to execute after closing&#13;Version:    19-08-25 - Charles Ross&#13;            19-11-26 - Charles Ross - Update variable names to reflect new module name"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="69" name="Else" enable="True">							<Options>0</Options>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[let.Get ( $Callbacks ; "pre_commit" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CALLBACK_PRECOMMIT"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[let.Get ( $Callbacks ; "post_commit" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CALLBACK_POSTCOMMIT"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[let.Get ( $Callbacks ; "post_close" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CALLBACK_POSTCLOSE"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="105" name="dialog priv: Clear global variables"></ScriptReference>					<ObjectList membercount="12">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Clears the global variables used for the module.&#13;Version:    19-11-26 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_SAVE_HAS_SUCCEEDED"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_COMMIT_REASON"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CALLBACK_PRECOMMIT"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CALLBACK_POSTCOMMIT"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_CALLBACK_POSTCLOSE"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Nil]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$$_DIALOG_MODULE_RECORD_ID"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="25" name="project: README"></ScriptReference>					<ObjectList membercount="1">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="project 1.0.0&#13;=============&#13;&#13;The `project` module provides various tools to work with a FileMaker project, especially an open source one or simply one that&#13;will use source control.&#13;&#13;Requirements&#13;------------&#13;&#13;- FileMaker 18+&#13;- This file&apos;s custom function library&#13;- This file&apos;s dialog module&#13;- FileMaker Server running locally on macOS&#13;- A git repository hosted on GitHub with a local copy&#13;&#13;Integration Instructions&#13;------------------------&#13;&#13;1. Import all of the custom functions from this file.&#13;2. Import the `project` folder of scripts.&#13;3. Edit the `project: Settings` script to set the following variables:&#13;   - $_project_directory:  The absolute path to the project&apos;s repository directory&#13;   - $_key_file:           The name of the file that will contain the encryption key&#13;   - $_store_key_globally: If set to `True` the encryption key will be stored in a global variable on first read and read from&#13;                           that upon subsequent needs&#13;   - $_fms_username:       The username for using the `fmsadmin` command line tool&#13;   - $_fms_password:       The password for `fmsadmin`, expected to be encrypted with the key found in the key file, call&#13;                           `project: Encrypt ( { String } )` with no parameters to be prompted for a string to encrypt using&#13;                           the encryption key in the key file and receive the encrypted password in a dialog box where you&#13;                           can copy it.&#13;&#13;See the &quot;Script Parameters&quot; section of the &quot;Conventions&quot; script instructions for passing parameters to public&#13;scripts.&#13;&#13;Usage&#13;-----&#13;&#13;When you&apos;re ready to create a new commit, execute `project: Commit`. This script will perform the following steps:&#13;&#13;- Prompt the user for a commit comment&#13;- Create a new backup of the current file and move the backup to the project folder&#13;- Save the file&apos;s XML representation&#13;- Add all files in the project folder to the git repository&#13;- Commit the files with the given comment&#13;- Push the repository to the server&#13;&#13;The ability to encrypt and decrypt data using an externally stored key first arose with this module, which is why it has that&#13;functionality. If you&apos;d like to encrypt a string using the encryption key stored in the key file, call `project: Encrypt&#13;( { String } )`. If you don&apos;t pass a parameter, you&apos;ll be prompted to provide the string in a dialog box. Similarly, to decrypt&#13;a string encrypted with the externally stored encryption key, call `project: Decrypt ( { String } )`.&#13;&#13;To Do&#13;-----&#13;&#13;Support the ability to bypass pushing the repository&#13;Support the ability to store hosted files in subfolders&#13;&#13;Version History&#13;---------------&#13;&#13;1.0.0 - [Charles Ross][chuck] - 20-01-10&#13;&#13;[chuck]: mailto:chivalry@mac.com"></Comment>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="27" name="project: Settings"></ScriptReference>					<ObjectList membercount="17">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Return a let-notation structure of the settings needed for the module.&#13;Return:     A standard `~success` keyed let-notation dictionary with the following additional keys&#13;            ~project_directory:  The directory where the DDR should be stored&#13;            ~key_file:           The name of the file in the project directory that stores the encryption key&#13;            ~store_key_globally: If `True`, the encryption key will be stored in a global variable the each time it&apos;s&#13;                                 retrieved (`$$_PROJECT_MODULE_ENCRYPTION_KEY`), defaults to `False`&#13;            ~fms_username:       The username to use when accessing the server with `fmsadmin`&#13;            ~fms_password:       The password to use when accessing the server with `fmsadmin`, expected to have been&#13;                                 encrypted using the key in the key file&#13;Version:    20-01-10 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["/Users/chuck/Projects/chivalry/alexandria/"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_project_directory"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[".key"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_key_file"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[False]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_store_key_globally"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["Chuck Ross"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_fms_username"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["wEU7/Adt8MrMrf6qsRRVm8IoYKkcxxhU9t7on3RIAFAxuYEoVVCDEiu3w44wZ4dCa61ZynLOmGe/O68jOAbmfWTrZ2HOFT1mnDj98e5c7GvSSJ+11rjmZLABNV4OrySbpyK9+TPj/uw="]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_fms_password"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="DO NOT EDIT BELOW THIS LINE"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $_key )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="4">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Configuration"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="90" name="Halt Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="30" name="project: Public Template"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    none&#13;Parameters: none&#13;Return:     A standard `~success` keyed let-notation dictionary.&#13;Version:    YY-MM-DD - Charles Ross&#13;Notes:      none"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="36" name="project priv: Private Template"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="33" name="project: Something to Test"></ScriptReference>					<ObjectList membercount="10">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that ...&#13;Return:     A let-notation dictionary with the following keys:&#13;            ~success: `True` or `False`&#13;            ~error:   Error text if an error occurred&#13;Version:    YY-MM-DD - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="False">							<Options>0</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1"></List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="False">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="False">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="False">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $~success]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="False">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; $~error )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="False">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="36" name="project priv: Private Template"></ScriptReference>					<ObjectList membercount="10">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    none&#13;Parameters: none&#13;Return:     A standard `~success` keyed let-notation dictionary.&#13;Version:    YY-MM-DD - Charles Ross&#13;Notes:      none"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="40" name="primary-key: README"></ScriptReference>					<ObjectList membercount="1">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="primary-key 1.0.0&#13;=================&#13;&#13;The `primary-key` module provides a single place to let other modules know how to identify a table&apos;s primary&#13;key.&#13;&#13;Requirements&#13;------------&#13;&#13;- FileMaker 18+&#13;- This file&apos;s custom function library&#13;&#13;Integration Instructions&#13;------------------------&#13;&#13;1. Import all of the custom functions from the chiv-lib file.&#13;2. Import the `primary-key` folder of scripts.&#13;3. Edit the `primary-key: Config` script so that it the $_pk variable stores the name of the field used as a&#13;   primary key.&#13;&#13;See the &quot;Script Parameters&quot; section of the &quot;Conventions&quot; script instructions for passing parameters to public&#13;scripts.&#13;&#13;Usage&#13;-----&#13;&#13;Modules can call the `primary-key: Primary Key Name` script. It will return a let-notation dictionary with a&#13;key of &quot;~pk_name&quot;, which will have the primary key name for its value.&#13;&#13;Version History&#13;---------------&#13;&#13;1.0.0 - [Charles Ross][chuck] - 17-11-08&#13;&#13;[chuck]: mailto:chivalry@mac.com"></Comment>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="42" name="primary-key: Settings"></ScriptReference>					<ObjectList membercount="7">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    none&#13;Parameters: none&#13;Return:     A standard `~success` keyed let-notation dictionary with the following additional key:&#13;            ~pk_name: The name of the primary key field&#13;Version:    19-08-10 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*dev.GetFieldName ( DEV::id )*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_pk_name"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="DO NOT EDIT BELOW THIS LINE"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True ) &let.Set ( "~pk_name" ; $_pk_name )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="45" name="primary-key: Primary Key Name"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Checks that the primary key provided exists in at least one table that has multiple records.&#13;Parameters: PKName: The name of the primary key to check.&#13;Return:     `True` if the primary key is valid, halts script execution otherwise.&#13;Version:    17-11-08 - Charles Ross&#13;Notes:      Halts script execution on error."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="51" name="primary-key priv: Primary Key Name"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="48" name="primary-key: Test Primary Key Name"></ScriptReference>					<ObjectList membercount="9">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that the primary key is returned from the module&#13;Return:     A let-notation dictionary with the following keys:&#13;            - ~success: `True` or `False`&#13;            - ~error:   Error text if an error occurred&#13;Version:    19-08-17 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="45" name="primary-key: Primary Key Name"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[dev.IsSet ( $~error )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; $~error )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="51" name="primary-key priv: Primary Key Name"></ScriptReference>					<ObjectList membercount="32">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Checks that the primary key provided exists in at least one table that has multiple records.&#13;Parameters: PKName: The name of the primary key to check.&#13;Return:     A standard `~success` keyed let-notation dictionary with the following additional keys:&#13;            ~pk_name: The name of the primary key field&#13;Version:    17-11-08 - Charles Ross&#13;            19-08-17 - Charles Ross - Edit to work with funit module"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>64</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="42" name="primary-key: Settings"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter></Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[script.AssignResults]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Find a table with more than one record."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[TableNames ( Get ( FileName ) )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_tables"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[0]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_rec_count"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="71" name="Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="72" name="Exit Loop If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[ValueCount ( $_tables ) = 0]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[list.Pop ( "$_tables" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_table"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="72" name="Exit Loop If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Let (  $_rec_count = dev.RecordCount ( $_table ) ;  $_rec_count > 1)]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="73" name="End Loop" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$_rec_count ≤ 1]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Configuration"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["The script " & Quote ( Get ( ScriptName ) ) & " encountered an error. At least one table must have more than one record. Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "No tables with multiple records" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Check that the field exists."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Let (  [    _sql = List (      "SELECT " & Quote ( $~pk_name ) ;      "FROM " & Quote ( $_table ) ;      "FETCH FIRST ROW ONLY"    )  ] ;  ExecuteSQL ( _sql ; dev.Nil ; dev.Nil ))]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_result"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$_result = "The column named " & Quote ( $PKName ) & " does not exist in any table in the column reference's scope."]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Configuration"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["The script " & Quote ( Get ( ScriptName ) ) & " expects a string that corresponds to a field name. " & Quote ( $Key ) & " does not. Please contact the developer."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "Named primary key doesn't exist in table" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True ) &let.Set ( "~pk_name" ; $~pk_name )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="109" name="window: README"></ScriptReference>					<ObjectList membercount="1">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="window 1.0.0&#13;============&#13;&#13;The window module provides a scripts to create generic windows for both the users and developers.&#13;&#13;Requirements&#13;------------&#13;&#13;- This file&apos;s custom function library&#13;&#13;Integration Instructions&#13;------------------------&#13;&#13;1. Import all of the custom functions from the chiv-lib file.&#13;2. Import the `window` script folder and all of its sub-folders and scripts into your solution.&#13;&#13;See the comments within the `Script Parameter Passing Readme` for instructions for passing parameters to public&#13;scripts.&#13;&#13;Usage&#13;-----&#13;&#13;When a new window is needed, call the `window: New ( Layout ; Title {; Style ; Coords ; Size } )` script. See the&#13;header comments for this script for details about the available parameters.&#13;&#13;If you need a window for context control, and therefore want it created offscreen for end-users but onscreen for&#13;developers, call the `window: New Utility ( Layout {; WindowID } )` script. This script will return the name of&#13;the window so that the calling script can close it.&#13;&#13;Version History&#13;---------------&#13;&#13;1.0.0 - [Charles Ross][chuck] - 17-11-08&#13;&#13;[chuck]: mailto:chivalry@mac.com"></Comment>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="111" name="window: New ( Layout ; Title {; Style ; Coords ; Size } )"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Creates a new window with the given parameters.&#13;Parameters: Layout: The layout to use for the popin window.&#13;            Title:  The title to give to the window.&#13;            Style:  Optional: Either &quot;dialog&quot; or &quot;document&quot;, defaults to &quot;dialog&quot;&#13;            Coords: Optional: The top and left coordinates where the window should be placed. If&#13;                    omitted, the window is centered within the parent window and offset 50 pixels&#13;                    from the parent window&apos;s top.&#13;            Size:   Optional: The height and width coordinates the windows should be sized to. If&#13;                    omitted, the width will be determined by `Adjust Window [ Resize to Fit ]` and&#13;                    the height by the minimum of that value and the parent window minus 100 pixels.&#13;Version:    17-11-08 - Charles Ross&#13;Notes:      Coords and Size parameters should be specified using let-notation dictionaries. The keys for Coords&#13;            should be `_top` and `_left` while those for Size should be `_height` and `_width`:&#13;&#13;                let.Set ( &quot;_top&quot;  ; 150 ) &amp;&#13;                let.Set ( &quot;_left&quot; ; 150 )&#13;&#13;                let.Set ( &quot;_height&quot; ; 600 ) &amp;&#13;                let.Set ( &quot;_width&quot;  ; 600 )"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="118" name="window priv: New ( Layout ; Title {; Style ; Coords ; Size } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>0</Options>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="112" name="window: New Utility ( Layout {; WindowID } )"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Creates a new window with the given parameters.&#13;Parameters: Layout:   The layout to use for the popin window.&#13;            WindowID: Optional: A unique ID for the window so it can be reliably closed later. Defaults&#13;                      to a UUID.&#13;Return:     A standard `~success` keyed let-notation dictionary with additional key:&#13;            ~window_name: The title of the window so the calling script can reference it if necessary&#13;Version:    17-11-08 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="85" name="Allow User Abort" enable="True">							<Options>65536</Options>							<ParameterValues membercount="1">								<Parameter type="Boolean">									<Boolean id="131072" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="119" name="window priv: New Utility ( Layout {; WindowID } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[Get ( ScriptParameter )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[Get ( ScriptResult )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="115" name="window: Test New Window"></ScriptReference>					<ObjectList membercount="35">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Confirm that new windows are properly created&#13;Return:     A let-notation dictionary with the following keys:&#13;            - ~success: `True` or `False`&#13;            - ~error:   Error text if an error occurred&#13;Version:    19-08-16 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[/*dev.GetTableName ( FUNITCF::id )*/]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_layout"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA["Test Window Title"]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_title"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[100]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_left"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[50]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_top"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[500]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_width"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[300]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_height"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[ValueCount ( WindowNames )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_window_count"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="111" name="window: New ( Layout ; Title {; Style ; Coords ; Size } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Layout" ; $_layout ) &script.Param ( "Title" ; $_title ) &script.Param ( "Coords" ; let.Set ( "_left" ; $_left ) & let.Set ( "_top" ; $_top ) ) &script.Param ( "Size" ; let.Set ( "_width" ; $_width ) & let.Set ( "_height" ; $_height ) )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[ValueCount ( WindowNames ) ≠ $_window_count + 1]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "Incorrect window count" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( LayoutName ) ≠ $_layout]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "Incorrect layout name" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[Get ( WindowName ) ≠ $_title]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "Incorrect window name" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( Get ( WindowLeft ) ≠ $_left ) or ( Get ( WindowTop ) ≠ $_top )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "Incorrect window coordinates" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[( Get ( WindowWidth ) ≠ $_width ) or ( Get ( WindowHeight ) ≠ $_height )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; "Incorrect window size" )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="121" name="Close Window" enable="True">							<Options>-2147483646</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="118" name="window priv: New ( Layout ; Title {; Style ; Coords ; Size } )"></ScriptReference>					<ObjectList membercount="48">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Creates a new window with the given parameters.&#13;Parameters: Layout: The layout to use for the popin window.&#13;            Title:  The title to give to the window.&#13;            Style:  Optional: One of &quot;dialog&quot;, &quot;document&quot;, &quot;utility&quot;, &quot;card&quot;, or &quot;dimcard&quot;,&#13;                    defaults to &quot;document&quot;.&#13;            Coords: Optional: The top and left coordinates where the window should be placed. If&#13;                    omitted, the window is centered within the parent window and offset 50 pixels&#13;                    from the parent window&apos;s top.&#13;            Size:   Optional: The height and width coordinates the windows should be sized to. If&#13;                    omitted, the width will be determined by `Adjust Window [ Resize to Fit ]` and&#13;                    the height by the minimum of that value and the parent window minus 100 pixels.&#13;Return:     A standard `~success` keyed let-notation dictionary&#13;Version:    17-11-08 - Charles Ross&#13;            19-09-13 - Charles Ross - Allow close boxes in document and utility windows&#13;Notes:      Coords and Size parameters should be specified using let-notation dictionaries. The keys&#13;            for Coords should be &quot;_top&quot; and &quot;_left&quot; while those for Size should be &quot;_height&quot; and&#13;            &quot;_width&quot;.&#13;&#13;            Windows are only created offscreen for users. When developers execute this script, windows&#13;            are positioned at (0, 0).&#13;&#13;            1. Use $Coords if provided&#13;            2. Lacking $Coords, default to parent + 50&#13;            3. If vertical size fits within parent, done.&#13;            4. If vertical size does not fit within parent, extend bottom.&#13;            5. If vertical size still does not fit, extend top."></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[dev.Default ( $Style ; "document" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$Style"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[PatternCount ( $Style ; "card" )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_style_is_card"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Case (  $_style_is_card ; 0                  ; Get ( WindowTop ))]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_parent_top"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Case (  $_style_is_card ; 0                  ; Get ( WindowLeft ))]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_parent_left"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( WindowHeight )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_parent_height"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Get ( WindowWidth )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_parent_width"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Style = "dialog"]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="122" name="New Window" enable="True">							<Options>16394</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Style name="Dialog" value="3221488644"></Style>										<Name>											<Calculation datatype="1" position="0">												<Calculation>													<Text><![CDATA[$Title]]></Text>												</Calculation>											</Calculation>										</Name>										<LayoutReferenceContainer value="3">											<Calculation datatype="1" position="5">												<Calculation>													<Text><![CDATA[$Layout]]></Text>												</Calculation>											</Calculation>										</LayoutReferenceContainer>										<Bounds>											<height></height>											<width></width>											<top>												<Calculation datatype="1" position="3">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</top>											<left>												<Calculation datatype="1" position="4">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</left>										</Bounds>										<Options value="3221488644">											<Close>False</Close>											<Minimize>False</Minimize>											<Maximize>True</Maximize>											<Resize>False</Resize>											<MenuBar>True</MenuBar>											<Toolbar>False</Toolbar>											<DimParentWindow>False</DimParentWindow>										</Options>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Style = "document"]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="122" name="New Window" enable="True">							<Options>16394</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Style name="Document" value="1076299266"></Style>										<Name>											<Calculation datatype="1" position="0">												<Calculation>													<Text><![CDATA[$Title]]></Text>												</Calculation>											</Calculation>										</Name>										<LayoutReferenceContainer value="3">											<Calculation datatype="1" position="5">												<Calculation>													<Text><![CDATA[$Layout]]></Text>												</Calculation>											</Calculation>										</LayoutReferenceContainer>										<Bounds>											<height></height>											<width></width>											<top>												<Calculation datatype="1" position="3">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</top>											<left>												<Calculation datatype="1" position="4">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</left>										</Bounds>										<Options value="1076299266">											<Close>True</Close>											<Minimize>True</Minimize>											<Maximize>True</Maximize>											<Resize>True</Resize>											<MenuBar>True</MenuBar>											<Toolbar>True</Toolbar>											<DimParentWindow>False</DimParentWindow>										</Options>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Style = "utility"]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="122" name="New Window" enable="True">							<Options>16394</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Style name="Document" value="3223389698"></Style>										<Name>											<Calculation datatype="1" position="0">												<Calculation>													<Text><![CDATA[$Title]]></Text>												</Calculation>											</Calculation>										</Name>										<LayoutReferenceContainer value="3">											<Calculation datatype="1" position="5">												<Calculation>													<Text><![CDATA[$Layout]]></Text>												</Calculation>											</Calculation>										</LayoutReferenceContainer>										<Bounds>											<height></height>											<width></width>											<top>												<Calculation datatype="1" position="3">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</top>											<left>												<Calculation datatype="1" position="4">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</left>										</Bounds>										<Options value="3223389698">											<Close>True</Close>											<Minimize>False</Minimize>											<Maximize>False</Maximize>											<Resize>True</Resize>											<MenuBar>True</MenuBar>											<Toolbar>True</Toolbar>											<DimParentWindow>False</DimParentWindow>										</Options>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Style = "card"]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="122" name="New Window" enable="True">							<Options>16394</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Style name="Card" value="3221225488"></Style>										<Name>											<Calculation datatype="1" position="0">												<Calculation>													<Text><![CDATA[$Title]]></Text>												</Calculation>											</Calculation>										</Name>										<LayoutReferenceContainer value="3">											<Calculation datatype="1" position="5">												<Calculation>													<Text><![CDATA[$Layout]]></Text>												</Calculation>											</Calculation>										</LayoutReferenceContainer>										<Bounds>											<height></height>											<width></width>											<top>												<Calculation datatype="1" position="3">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</top>											<left>												<Calculation datatype="1" position="4">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</left>										</Bounds>										<Options value="3221225488">											<Close>False</Close>											<Minimize>False</Minimize>											<Maximize>False</Maximize>											<Resize>False</Resize>											<MenuBar>False</MenuBar>											<Toolbar>False</Toolbar>											<DimParentWindow>False</DimParentWindow>										</Options>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="125" name="Else If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[$Style = "dimcard"]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="122" name="New Window" enable="True">							<Options>16394</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Style name="Card" value="3222274064"></Style>										<Name>											<Calculation datatype="1" position="0">												<Calculation>													<Text><![CDATA[$Title]]></Text>												</Calculation>											</Calculation>										</Name>										<LayoutReferenceContainer value="3">											<Calculation datatype="1" position="5">												<Calculation>													<Text><![CDATA[$Layout]]></Text>												</Calculation>											</Calculation>										</LayoutReferenceContainer>										<Bounds>											<height></height>											<width></width>											<top>												<Calculation datatype="1" position="3">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</top>											<left>												<Calculation datatype="1" position="4">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</left>										</Bounds>										<Options value="3222274064">											<Close>False</Close>											<Minimize>False</Minimize>											<Maximize>False</Maximize>											<Resize>False</Resize>											<MenuBar>False</MenuBar>											<Toolbar>False</Toolbar>											<DimParentWindow>True</DimParentWindow>										</Options>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="79" name="Freeze Window" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[dev.IsDeveloper]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="29" name="Show/Hide Toolbars" enable="True">							<Options>2</Options>							<ParameterValues membercount="3">								<Parameter type="Boolean">									<Boolean type="Lock" id="524288" value="False"></Boolean>								</Parameter>								<Parameter type="Boolean">									<Boolean type="Include Edit Record Toolbar" id="256" value="False"></Boolean>								</Parameter>								<Parameter type="List">									<List name="Show" value="1"></List>								</Parameter>							</ParameterValues>						</Step>						<Step id="69" name="Else" enable="True">							<Options>0</Options>						</Step>						<Step id="29" name="Show/Hide Toolbars" enable="True">							<Options>524290</Options>							<ParameterValues membercount="3">								<Parameter type="Boolean">									<Boolean type="Lock" id="524288" value="True"></Boolean>								</Parameter>								<Parameter type="Boolean">									<Boolean type="Include Edit Record Toolbar" id="256" value="False"></Boolean>								</Parameter>								<Parameter type="List">									<List name="Hide" value="2"></List>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[IsEmpty ( $Size )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="31" name="Adjust Window" enable="True">							<Options>2</Options>							<ParameterValues membercount="1">								<Parameter type="List">									<List name="Resize to Fit" value="1"></List>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Case (  dev.IsSet ( $Size ) ; let.Get ( $Size ; "_height" )                      ; Get ( WindowHeight ))]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_height"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Case (  dev.IsSet ( $Coords ) ;  let.Get ( $Coords ; "_top" ) ;  Let (    [      _default = $_parent_top + 50 ;      _top = Case (        _default + $_height > Get ( ScreenHeight ) ;        Get ( ScreenHeight ) - $_height ;        _default      )    ] ;    _top  ))]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_top"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Case (  dev.IsSet ( $Coords ) ; let.Get ( $Coords ; "_left" )                        ; window.CenterLeft ( $_parent_left ; $_parent_width ))]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_left"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[Case (  dev.IsSet ( $Size ) ; let.Get ( $Size ; "_width" )                      ; Get ( WindowWidth ))]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_width"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="119" name="Move/Resize Window" enable="True">							<Options>-2147467262</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>										<Bounds>											<height>												<Calculation datatype="1" position="1">													<Calculation>														<Text><![CDATA[$_height]]></Text>													</Calculation>												</Calculation>											</height>											<width>												<Calculation datatype="1" position="2">													<Calculation>														<Text><![CDATA[$_width]]></Text>													</Calculation>												</Calculation>											</width>											<top>												<Calculation datatype="1" position="3">													<Calculation>														<Text><![CDATA[$_top]]></Text>													</Calculation>												</Calculation>											</top>											<left>												<Calculation datatype="1" position="4">													<Calculation>														<Text><![CDATA[$_left]]></Text>													</Calculation>												</Calculation>											</left>										</Bounds>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="119" name="window priv: New Utility ( Layout {; WindowID } )"></ScriptReference>					<ObjectList membercount="15">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Creates a new window with the given parameters.&#13;Parameters: Layout:   The layout to use for the popin window.&#13;            WindowID: Optional: A unique ID for the window so it can be reliably closed later. Defaults&#13;                      to a UUID.&#13;Return:     A standard `~success` keyed let-notation dictionary with additional key:&#13;            ~window_name: The title of the window so the calling script can reference it if necessary&#13;Version:    17-11-08 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not script.AssignParams]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[not $$_FUNIT_TESTING]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16388</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["Invalid Parameters"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA[msg.InvalidParamsMessage]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Halt">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; False ) &let.Set ( "~error" ; apperr.InvalidScriptParameters )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[window.Utility ( $WindowID )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_title"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="141" name="Set Variable" enable="True">							<Options>16388</Options>							<ParameterValues membercount="1">								<Parameter type="Variable">									<value>										<Calculation datatype="1" position="1">											<Calculation>												<Text><![CDATA[let.Set ( "_top" ; window.Offscreen ) & let.Set ( "_left" ; window.Offscreen )]]></Text>											</Calculation>										</Calculation>									</value>									<Name value="$_coords"></Name>									<repetition></repetition>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16448</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1">										<ScriptReference id="118" name="window priv: New ( Layout ; Title {; Style ; Coords ; Size } )"></ScriptReference>									</List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Layout" ; $Layout ) &script.Param ( "Title" ; $_title ) &script.Param ( "Style" ; "utility" ) &script.Param ( "Coords" ; $_coords )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA[let.Set ( "~success" ; True ) &let.Set ( "~window_name" ; $_title )]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>			</StepsForScripts>			<PasteIndexList membercount="0"></PasteIndexList>		</AddAction>		<ModifyAction membercount="1">			<FieldsForTables membercount="1">				<FieldCatalog>					<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>					<ObjectList membercount="18">						<Field>							<FieldReference id="1" name="____ ID FIELDS ________________________________________________________________________________" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA["Duplicate this table to create a new table with the standard fields."]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="3" name="____ TABLE DATA _____________________________________________________________________________" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="4" name="____ RULES ___________________________________________________________________________________" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="5" name="can_edit" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[list.IsMember ( Get ( AccountPrivilegeSetName ) ; List ( "[Full Access]" ; "Executive" ) )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="6" name="can_delete" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[list.IsMember ( Get ( AccountPrivilegeSetName ) ; List ( "[Full Access]" ; "Executive" ) )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="7" name="can_view" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[list.IsMember ( Get ( AccountPrivilegeSetName ) ; List ( "[Full Access]" ; "Executive" ) )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="8" name="is_valid" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[True]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="9" name="____ RELATIONSHIP KEYS ____________________________________________________________________" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="10" name="ONE" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[1]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="11" name="TABLE_NAME" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[dev.GetTableName ( id )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="12" name="____ HOUSEKEEPING FIELDS _________________________________________________________________" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA["_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="37" name="created_date" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[GetAsDate ( created_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="38" name="created_time" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[GetAsTime ( created_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="41" name="modified_date" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[GetAsDate ( modified_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="42" name="modified_time" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[GetAsTime ( modified_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="44" name="housekeeping_display" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[dev.Housekeeping]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="47" name="fm_id" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[GetAsText ( Get ( RecordID ) )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="48" name="modified_count" repetition="1" baseTable="_TEMPLATE">								<Calculation>									<TableOccurrenceReference id="1065090" name="-"></TableOccurrenceReference>									<Text><![CDATA[Get ( RecordModificationCount )]]></Text>								</Calculation>							</FieldReference>						</Field>					</ObjectList>				</FieldCatalog>			</FieldsForTables>		</ModifyAction>	</Structure>	<Metadata membercount="1">		<AddAction membercount="2">			<Minimum version="12.0" value="1208"></Minimum>			<Login type="1">				<UserName>Admin</UserName>			</Login>		</AddAction>	</Metadata></FMDynamicTemplate>
