<?xml version="1.0"?>
<FMDynamicTemplate version="2.0.0.0" Source="18.0.3" File="Forgot.fmp12" UUID="755C5B88B92548FB8854A1A31019DFCA" locale="English">
	<Structure membercount="2">
		<AddAction membercount="15">
			<FileAccessCatalog required="True">
				<UUID>755C5B88B92548FB8854A1A31019DFCA</UUID>
				<ObjectList membercount="4">
					<Authorization id="1" type="Local">
						<Source CreationTimestamp="08/21/2019 02:35:34 PM" CreationAccountName="Admin"></Source>
						<UUID>755C5B88B92548FB8854A1A31019DFCA</UUID>
						<Display><![CDATA[Forgot]]></Display>
						<Authentication>09A70B15B314D4F24FD52FE4EC2D43226C62D91C6A48A56BD3BF06814081CDA3330BE8FBC86E16CA8D43F00D7B37F31F55C16119DF050C12AC0E7A7585B6EC03</Authentication>
					</Authorization>
					<Authorization id="2" type="External">
						<Source CreationTimestamp="08/21/2019 02:35:34 PM" CreationAccountName="Admin"></Source>
						<UUID>755C5B88B92548FB8854A1A31019DFCA</UUID>
						<Display><![CDATA[Forgot]]></Display>
						<Authentication>9622B47FBB06FB053BA89269D8F1DF831A25D52E28597863B4BF7A4FD81189D8</Authentication>
					</Authorization>
					<Authorization id="3" type="Local">
						<Source CreationTimestamp="08/22/2019 12:58:49 PM" CreationAccountName="Chuck Ross"></Source>
						<UUID>7C5C8CF974DC4755B4BF9254BA28C4AC</UUID>
						<Display><![CDATA[Alexandria]]></Display>
						<Authentication>704DD7FFC4FA22DD20D779718736CDEF5115781B829CEFBDBBEE8F250852DC5A12EEF5CA968B139F1020511904261B7354E9FB508A58A8AD0E078BC59A6B1884</Authentication>
					</Authorization>
					<Authorization id="4" type="Local">
						<Source CreationTimestamp="02/25/2020 07:11:30 AM" CreationAccountName="Chuck Ross"></Source>
						<UUID>27805EE7FF22468E8D182050A3CD995B</UUID>
						<Display><![CDATA[Alexandria]]></Display>
						<Authentication>94470663FEB00E08E6E393191653F975DBF034342B0A74793C6D6F3E62F3985514F5DA406741BF957A861A107E68868970977170A8A76787CD87E1F9D9D2DD04</Authentication>
					</Authorization>
				</ObjectList>
			</FileAccessCatalog>
			<ExternalDataSourceCatalog membercount="1">
				<ExternalDataSource name="alexandria" type="FileMaker" id="1">
					<File>
						<UniversalPathList>file:alexandria.fmp12</UniversalPathList>
					</File>
				</ExternalDataSource>
			</ExternalDataSourceCatalog>
			<BaseTableCatalog membercount="1">
				<BaseTable id="130" name="DEV">
					<TagList>#^FMI%TBL7442E1D38FC0CFA6B9BA7D236749C28B7983F2B6BB552493C4C33936EC042B7F76DD2FA5A0A342FCAE2545BB67F52A2C </TagList>
				</BaseTable>
			</BaseTableCatalog>
			<TableOccurrenceCatalog membercount="1">
				<TableOccurrence id="1065090" viewState="Full" height="86" name="DEV" type="Local">
					<BaseTableReference id="130" name="DEV"></BaseTableReference>
					<CoordRect top="20" left="20" bottom="136" right="151"></CoordRect>
					<Color red="120" green="120" blue="120" alpha="1.00"></Color>
				</TableOccurrence>
			</TableOccurrenceCatalog>
			<CustomFunctionsCatalog membercount="418">
				<ObjectList membercount="418">
					<CustomFunction id="1" name="__function_template" access="All">
						<Display>__function_template</Display>
					</CustomFunction>
					<CustomFunction id="2" name="__recursive_template" access="All">
						<Display>__recursive_template</Display>
					</CustomFunction>
					<CustomFunction id="3" name="app _____ Application Functions ____________________________________________________________________" access="All">
						<Display>app _____ Application Functions ____________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="4" name="app.DecryptPassword" access="FullAccessOnly">
						<Display>app.DecryptPassword ( _cypher )</Display>
						<ObjectList membercount="1">
							<Parameter name="_cypher"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="5" name="app.EmailPluginKey" access="All">
						<Display>app.EmailPluginKey</Display>
					</CustomFunction>
					<CustomFunction id="6" name="app.EncryptionKey" access="FullAccessOnly">
						<Display>app.EncryptionKey</Display>
					</CustomFunction>
					<CustomFunction id="7" name="app.EncryptPassword" access="FullAccessOnly">
						<Display>app.EncryptPassword ( _password )</Display>
						<ObjectList membercount="1">
							<Parameter name="_password"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="8" name="app.PayPeriodEnd" access="All">
						<Display>app.PayPeriodEnd ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="9" name="app.SolutionName" access="All">
						<Display>app.SolutionName</Display>
					</CustomFunction>
					<CustomFunction id="10" name="app.Version" access="All">
						<Display>app.Version ( _format )</Display>
						<ObjectList membercount="1">
							<Parameter name="_format"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="11" name="apperr _____ Application Error Functions ___________________________________________________________" access="All">
						<Display>apperr _____ Application Error Functions ___________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="12" name="apperr.ConfigError" access="All">
						<Display>apperr.ConfigError</Display>
					</CustomFunction>
					<CustomFunction id="13" name="apperr.InvalidPrivilegeSet" access="All">
						<Display>apperr.InvalidPrivilegeSet</Display>
					</CustomFunction>
					<CustomFunction id="14" name="apperr.InvalidScriptParameters" access="All">
						<Display>apperr.InvalidScriptParameters</Display>
					</CustomFunction>
					<CustomFunction id="15" name="apperr.SlackChannelNotFound" access="All">
						<Display>apperr.SlackChannelNotFound</Display>
					</CustomFunction>
					<CustomFunction id="16" name="apperr.SlackInvalidChannel" access="All">
						<Display>apperr.SlackInvalidChannel</Display>
					</CustomFunction>
					<CustomFunction id="17" name="apperr.TestingConfigError" access="All">
						<Display>apperr.TestingConfigError</Display>
					</CustomFunction>
					<CustomFunction id="18" name="container_____ Container Fields Functions __________________________________________________________" access="FullAccessOnly">
						<Display>container_____ Container Fields Functions __________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="19" name="container.Decode" access="All">
						<Display>container.Decode ( _base64 )</Display>
						<ObjectList membercount="1">
							<Parameter name="_base64"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="20" name="container.Encode" access="All">
						<Display>container.Encode ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="21" name="container.Filename" access="All">
						<Display>container.Filename ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="22" name="container.Interactivate" access="All">
						<Display>container.Interactivate ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="23" name="container.Rename" access="All">
						<Display>container.Rename ( _container ; _filename )</Display>
						<ObjectList membercount="2">
							<Parameter name="_container"></Parameter>
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="24" name="crypt_____ Crypt Functions _________________________________________________________________________" access="FullAccessOnly">
						<Display>crypt_____ Crypt Functions _________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="25" name="crypt.HexDigest" access="All">
						<Display>crypt.HexDigest ( _token )</Display>
						<ObjectList membercount="1">
							<Parameter name="_token"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="26" name="data_____ Data Structures __________________________________________________________________________" access="All">
						<Display>data_____ Data Structures __________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="27" name="data.Alphabet" access="All">
						<Display>data.Alphabet</Display>
					</CustomFunction>
					<CustomFunction id="28" name="data.Colors" access="All">
						<Display>data.Colors</Display>
					</CustomFunction>
					<CustomFunction id="29" name="data.Digits" access="All">
						<Display>data.Digits</Display>
					</CustomFunction>
					<CustomFunction id="30" name="data.Easters" access="All">
						<Display>data.Easters</Display>
					</CustomFunction>
					<CustomFunction id="31" name="date_____ Date Functions ___________________________________________________________________________" access="FullAccessOnly">
						<Display>date_____ Date Functions ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="32" name="date.BusinessHolidays" access="All">
						<Display>date.BusinessHolidays ( _year )</Display>
						<ObjectList membercount="1">
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="33" name="date.ConvertUnixDate" access="All">
						<Display>date.ConvertUnixDate ( _unix_date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_unix_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="34" name="date.DiffDays" access="All">
						<Display>date.DiffDays ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="35" name="date.DiffMonths" access="All">
						<Display>date.DiffMonths ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="36" name="date.DiffString" access="All">
						<Display>date.DiffString ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="37" name="date.DiffYears" access="All">
						<Display>date.DiffYears ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="38" name="date.EndOfMonth" access="All">
						<Display>date.EndOfMonth ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="39" name="date.FirstDayOfWeek" access="All">
						<Display>date.FirstDayOfWeek ( _date ; _week_start )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date"></Parameter>
							<Parameter name="_week_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="40" name="date.Holidays" access="All">
						<Display>date.Holidays ( _year )</Display>
						<ObjectList membercount="1">
							<Parameter name="_year"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="41" name="date.MonDDYYYY" access="All">
						<Display>date.MonDDYYYY ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="42" name="date.MonthNumber" access="All">
						<Display>date.MonthNumber ( _month_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_month_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="43" name="date.Seconds" access="All">
						<Display>date.Seconds ( _amount ; _unit )</Display>
						<ObjectList membercount="2">
							<Parameter name="_amount"></Parameter>
							<Parameter name="_unit"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="44" name="date.StartOfMonth" access="All">
						<Display>date.StartOfMonth ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="45" name="date.TextualDate" access="All">
						<Display>date.TextualDate ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="46" name="date.WeekdayCount" access="All">
						<Display>date.WeekdayCount ( _start ; _end ; _ignore )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_ignore"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="47" name="date.YYMMDD" access="All">
						<Display>date.YYMMDD ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="48" name="date.YYYYMMDD" access="All">
						<Display>date.YYYYMMDD ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="49" name="dev_____ Developer _________________________________________________________________________________" access="FullAccessOnly">
						<Display>dev_____ Developer _________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="50" name="dev.ClearVars" access="All">
						<Display>dev.ClearVars ( _vars )</Display>
						<ObjectList membercount="1">
							<Parameter name="_vars"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="51" name="dev.ComparisonVersion" access="All">
						<Display>dev.ComparisonVersion ( _version )</Display>
						<ObjectList membercount="1">
							<Parameter name="_version"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="52" name="dev.CreatedInfo" access="All">
						<Display>dev.CreatedInfo ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="53" name="dev.DataTypeMustBeText" access="All">
						<Display>dev.DataTypeMustBeText ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="54" name="dev.Default" access="All">
						<Display>dev.Default ( _value ; _default )</Display>
						<ObjectList membercount="2">
							<Parameter name="_value"></Parameter>
							<Parameter name="_default"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="55" name="dev.FieldComment" access="All">
						<Display>dev.FieldComment ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="56" name="dev.GetFieldName" access="All">
						<Display>dev.GetFieldName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="57" name="dev.GetTableName" access="All">
						<Display>dev.GetTableName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="58" name="dev.Housekeeping" access="All">
						<Display>dev.Housekeeping</Display>
					</CustomFunction>
					<CustomFunction id="59" name="dev.IsDataType" access="All">
						<Display>dev.IsDataType ( _value ; _type )</Display>
						<ObjectList membercount="2">
							<Parameter name="_value"></Parameter>
							<Parameter name="_type"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="60" name="dev.IsDeveloper" access="All">
						<Display>dev.IsDeveloper</Display>
					</CustomFunction>
					<CustomFunction id="61" name="dev.IsDuplicateRecord" access="All">
						<Display>dev.IsDuplicateRecord ( _match_field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_match_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="62" name="dev.IsSet" access="All">
						<Display>dev.IsSet ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="63" name="dev.MaxSerial" access="All">
						<Display>dev.MaxSerial ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="64" name="dev.ModifiedInfo" access="All">
						<Display>dev.ModifiedInfo ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="65" name="dev.NextSerialValue" access="All">
						<Display>dev.NextSerialValue ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="66" name="dev.NextValueListItem" access="All">
						<Display>dev.NextValueListItem ( _value_list ; _current_item ; _loop )</Display>
						<ObjectList membercount="3">
							<Parameter name="_value_list"></Parameter>
							<Parameter name="_current_item"></Parameter>
							<Parameter name="_loop"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="67" name="dev.Nil" access="All">
						<Display>dev.Nil</Display>
					</CustomFunction>
					<CustomFunction id="68" name="dev.PanelIsFront" access="All">
						<Display>dev.PanelIsFront ( _panel_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_panel_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="69" name="dev.ParseQualifiedField" access="All">
						<Display>dev.ParseQualifiedField ( _qualified_field ; _table_or_field )</Display>
						<ObjectList membercount="2">
							<Parameter name="_qualified_field"></Parameter>
							<Parameter name="_table_or_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="70" name="dev.PortalSize" access="All">
						<Display>dev.PortalSize</Display>
					</CustomFunction>
					<CustomFunction id="71" name="dev.RecordCount" access="All">
						<Display>dev.RecordCount ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="72" name="dev.RecordInfo" access="All">
						<Display>dev.RecordInfo ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="73" name="dev.RegExMatch" access="All">
						<Display>dev.RegExMatch ( _source ; _regex )</Display>
						<ObjectList membercount="2">
							<Parameter name="_source"></Parameter>
							<Parameter name="_regex"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="74" name="dev.SetVarByName" access="All">
						<Display>dev.SetVarByName ( _var_name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_var_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="75" name="dev.Show" access="All">
						<Display>dev.Show ( _test )</Display>
						<ObjectList membercount="1">
							<Parameter name="_test"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="76" name="dev.SystemDrive" access="All">
						<Display>dev.SystemDrive</Display>
					</CustomFunction>
					<CustomFunction id="77" name="dev.Timer" access="All">
						<Display>dev.Timer ( _name ; _action )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_action"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="78" name="dev.Toggle" access="All">
						<Display>dev.Toggle ( _existing ; _new )</Display>
						<ObjectList membercount="2">
							<Parameter name="_existing"></Parameter>
							<Parameter name="_new"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="79" name="err_____ Error Numbers _____________________________________________________________________________" access="FullAccessOnly">
						<Display>err_____ Error Numbers _____________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="80" name="err.CannotModifyAdminAccount" access="All">
						<Display>err.CannotModifyAdminAccount</Display>
					</CustomFunction>
					<CustomFunction id="81" name="err.CommandUnavailable" access="All">
						<Display>err.CommandUnavailable</Display>
					</CustomFunction>
					<CustomFunction id="82" name="err.ConnectionFailed" access="All">
						<Display>err.ConnectionFailed</Display>
					</CustomFunction>
					<CustomFunction id="83" name="err.FieldIsMissing" access="All">
						<Display>err.FieldIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="84" name="err.FileIsLocked" access="All">
						<Display>err.FileIsLocked</Display>
					</CustomFunction>
					<CustomFunction id="85" name="err.FileIsMissing" access="All">
						<Display>err.FileIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="86" name="err.FindCriteriaEmpty" access="All">
						<Display>err.FindCriteriaEmpty</Display>
					</CustomFunction>
					<CustomFunction id="87" name="err.GenericCalcError" access="All">
						<Display>err.GenericCalcError</Display>
					</CustomFunction>
					<CustomFunction id="88" name="err.HostExceedsCapacity" access="All">
						<Display>err.HostExceedsCapacity</Display>
					</CustomFunction>
					<CustomFunction id="89" name="err.InsufficientPrivileges" access="All">
						<Display>err.InsufficientPrivileges</Display>
					</CustomFunction>
					<CustomFunction id="90" name="err.InvalidAccountOrPassword" access="All">
						<Display>err.InvalidAccountOrPassword</Display>
					</CustomFunction>
					<CustomFunction id="91" name="err.InvalidPrivilegeSet" access="All">
						<Display>err.InvalidPrivilegeSet</Display>
					</CustomFunction>
					<CustomFunction id="92" name="err.InvalidUserAccount" access="All">
						<Display>err.InvalidUserAccount</Display>
					</CustomFunction>
					<CustomFunction id="93" name="err.InvalidUserCredentials" access="All">
						<Display>err.InvalidUserCredentials</Display>
					</CustomFunction>
					<CustomFunction id="94" name="err.LayoutIsMissing" access="All">
						<Display>err.LayoutIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="95" name="err.NameExists" access="All">
						<Display>err.NameExists</Display>
					</CustomFunction>
					<CustomFunction id="96" name="err.NameNotValid" access="All">
						<Display>err.NameNotValid</Display>
					</CustomFunction>
					<CustomFunction id="97" name="err.NoError" access="All">
						<Display>err.NoError</Display>
					</CustomFunction>
					<CustomFunction id="98" name="err.NoRecordsFound" access="All">
						<Display>err.NoRecordsFound</Display>
					</CustomFunction>
					<CustomFunction id="99" name="err.PrivilegeSetMissing" access="All">
						<Display>err.PrivilegeSetMissing</Display>
					</CustomFunction>
					<CustomFunction id="100" name="err.RecordMissing" access="All">
						<Display>err.RecordMissing</Display>
					</CustomFunction>
					<CustomFunction id="101" name="err.RelationshipMissing" access="All">
						<Display>err.RelationshipMissing</Display>
					</CustomFunction>
					<CustomFunction id="102" name="err.ScriptIsMissing" access="All">
						<Display>err.ScriptIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="103" name="err.TableIsMissing" access="All">
						<Display>err.TableIsMissing</Display>
					</CustomFunction>
					<CustomFunction id="104" name="err.TooManyLoginAttempts" access="All">
						<Display>err.TooManyLoginAttempts</Display>
					</CustomFunction>
					<CustomFunction id="105" name="err.UnspportedExcelFormat" access="All">
						<Display>err.UnspportedExcelFormat</Display>
					</CustomFunction>
					<CustomFunction id="106" name="err.UserAccountInactive" access="All">
						<Display>err.UserAccountInactive</Display>
					</CustomFunction>
					<CustomFunction id="107" name="err.UserAccountPasswordDoesNotExist" access="All">
						<Display>err.UserAccountPasswordDoesNotExist</Display>
					</CustomFunction>
					<CustomFunction id="108" name="err.UserCanceledAction" access="All">
						<Display>err.UserCanceledAction</Display>
					</CustomFunction>
					<CustomFunction id="109" name="geo_____ Geolocation _______________________________________________________________________________" access="FullAccessOnly">
						<Display>geo_____ Geolocation _______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="110" name="geo.CoordDistance" access="All">
						<Display>geo.CoordDistance ( _lat_1 ; _long_1 ; _lat_2 ; _long_2 )</Display>
						<ObjectList membercount="4">
							<Parameter name="_lat_1"></Parameter>
							<Parameter name="_long_1"></Parameter>
							<Parameter name="_lat_2"></Parameter>
							<Parameter name="_long_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="111" name="housekeeping_____ Housekeeping Overrides ___________________________________________________________" access="FullAccessOnly">
						<Display>housekeeping_____ Housekeeping Overrides ___________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="112" name="housekeeping.IsSuspended" access="All">
						<Display>housekeeping.IsSuspended</Display>
					</CustomFunction>
					<CustomFunction id="113" name="housekeeping.Resume" access="All">
						<Display>housekeeping.Resume</Display>
					</CustomFunction>
					<CustomFunction id="114" name="housekeeping.Suspend" access="All">
						<Display>housekeeping.Suspend</Display>
					</CustomFunction>
					<CustomFunction id="115" name="json_____ JSON Manipulation ________________________________________________________________________" access="FullAccessOnly">
						<Display>json_____ JSON Manipulation ________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="116" name="json.Assign" access="All">
						<Display>json.Assign ( _json )</Display>
						<ObjectList membercount="1">
							<Parameter name="_json"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="117" name="json.ContainerObject" access="All">
						<Display>json.ContainerObject ( _container )</Display>
						<ObjectList membercount="1">
							<Parameter name="_container"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="118" name="json.GetBoolean" access="All">
						<Display>json.GetBoolean ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="119" name="json.GetContainer" access="All">
						<Display>json.GetContainer ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="120" name="json.GetDate" access="All">
						<Display>json.GetDate ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="121" name="json.GetNumber" access="All">
						<Display>json.GetNumber ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="122" name="json.GetTime" access="All">
						<Display>json.GetTime ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="123" name="json.GetTimestamp" access="All">
						<Display>json.GetTimestamp ( _json ; _key_index_or_path )</Display>
						<ObjectList membercount="2">
							<Parameter name="_json"></Parameter>
							<Parameter name="_key_index_or_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="124" name="JSONCreateVarsFromKeys" access="All">
						<Display>JSONCreateVarsFromKeys ( json ; namespace )</Display>
						<ObjectList membercount="2">
							<Parameter name="json"></Parameter>
							<Parameter name="namespace"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="125" name="key _____ Keyboard Codes ___________________________________________________________________________" access="All">
						<Display>key _____ Keyboard Codes ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="126" name="key.Delete" access="All">
						<Display>key.Delete</Display>
					</CustomFunction>
					<CustomFunction id="127" name="key.DeleteCode" access="All">
						<Display>key.DeleteCode</Display>
					</CustomFunction>
					<CustomFunction id="128" name="key.DownArrow" access="All">
						<Display>key.DownArrow</Display>
					</CustomFunction>
					<CustomFunction id="129" name="key.DownArrowCode" access="All">
						<Display>key.DownArrowCode</Display>
					</CustomFunction>
					<CustomFunction id="130" name="key.Enter" access="All">
						<Display>key.Enter</Display>
					</CustomFunction>
					<CustomFunction id="131" name="key.EnterCode" access="All">
						<Display>key.EnterCode</Display>
					</CustomFunction>
					<CustomFunction id="132" name="key.Escape" access="All">
						<Display>key.Escape</Display>
					</CustomFunction>
					<CustomFunction id="133" name="key.EscapeCode" access="All">
						<Display>key.EscapeCode</Display>
					</CustomFunction>
					<CustomFunction id="134" name="key.LineFeed" access="All">
						<Display>key.LineFeed</Display>
					</CustomFunction>
					<CustomFunction id="135" name="key.LinefeedCode" access="All">
						<Display>key.LinefeedCode</Display>
					</CustomFunction>
					<CustomFunction id="136" name="key.Return" access="All">
						<Display>key.Return</Display>
					</CustomFunction>
					<CustomFunction id="137" name="key.ReturnCode" access="All">
						<Display>key.ReturnCode</Display>
					</CustomFunction>
					<CustomFunction id="138" name="key.Tab" access="All">
						<Display>key.Tab</Display>
					</CustomFunction>
					<CustomFunction id="139" name="key.TabCode" access="All">
						<Display>key.TabCode</Display>
					</CustomFunction>
					<CustomFunction id="140" name="key.UpArrow" access="All">
						<Display>key.UpArrow</Display>
					</CustomFunction>
					<CustomFunction id="141" name="key.UpArrowCode" access="All">
						<Display>key.UpArrowCode</Display>
					</CustomFunction>
					<CustomFunction id="142" name="key.VerticalTab" access="All">
						<Display>key.VerticalTab</Display>
					</CustomFunction>
					<CustomFunction id="143" name="key.VerticalTabCode" access="All">
						<Display>key.VerticalTabCode</Display>
					</CustomFunction>
					<CustomFunction id="144" name="let_____ Let Notation Functions ___________________________________________________________________" access="FullAccessOnly">
						<Display>let_____ Let Notation Functions ___________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="145" name="let._EscapeComments" access="All">
						<Display>let._EscapeComments ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="146" name="let._IndexedName" access="All">
						<Display>let._IndexedName ( _name ; _index )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_index"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="147" name="let.Array" access="All">
						<Display>let.Array ( _name ; _index ; _value )</Display>
						<ObjectList membercount="3">
							<Parameter name="_name"></Parameter>
							<Parameter name="_index"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="148" name="let.ArrayFromList" access="All">
						<Display>let.ArrayFromList ( _name ; _list )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="149" name="let.ArrayGet" access="All">
						<Display>let.ArrayGet ( _params ; _name ; _index )</Display>
						<ObjectList membercount="3">
							<Parameter name="_params"></Parameter>
							<Parameter name="_name"></Parameter>
							<Parameter name="_index"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="150" name="let.Assign" access="All">
						<Display>let.Assign ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="151" name="let.AssignGlobal" access="All">
						<Display>let.AssignGlobal ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="152" name="let.ContainsName" access="All">
						<Display>let.ContainsName ( _params ; _name )</Display>
						<ObjectList membercount="2">
							<Parameter name="_params"></Parameter>
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="153" name="let.Enclose" access="All">
						<Display>let.Enclose ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="154" name="let.First" access="All">
						<Display>let.First ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="155" name="let.Get" access="All">
						<Display>let.Get ( _params ; _name )</Display>
						<ObjectList membercount="2">
							<Parameter name="_params"></Parameter>
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="156" name="let.GetNames" access="All">
						<Display>let.GetNames ( _params )</Display>
						<ObjectList membercount="1">
							<Parameter name="_params"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="157" name="let.List" access="All">
						<Display>let.List ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="158" name="let.ListGet" access="All">
						<Display>let.ListGet ( _values ; _index )</Display>
						<ObjectList membercount="2">
							<Parameter name="_values"></Parameter>
							<Parameter name="_index"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="159" name="let.Remove" access="All">
						<Display>let.Remove ( _params ; _remove )</Display>
						<ObjectList membercount="2">
							<Parameter name="_params"></Parameter>
							<Parameter name="_remove"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="160" name="let.Replace" access="All">
						<Display>let.Replace ( _params ; _name ; _value )</Display>
						<ObjectList membercount="3">
							<Parameter name="_params"></Parameter>
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="161" name="let.ReverseLookup" access="All">
						<Display>let.ReverseLookup ( _dict ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_dict"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="162" name="let.Set" access="All">
						<Display>let.Set ( _name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="163" name="list_____ Lists ____________________________________________________________________________________" access="FullAccessOnly">
						<Display>list_____ Lists ____________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="164" name="list.Append" access="All">
						<Display>list.Append ( _list ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="165" name="list.AppendIf" access="All">
						<Display>list.AppendIf ( _list ; _value ; _condition )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_value"></Parameter>
							<Parameter name="_condition"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="166" name="list.Concatenate" access="All">
						<Display>list.Concatenate ( _list_1 ; _list_2 ; _sep )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list_1"></Parameter>
							<Parameter name="_list_2"></Parameter>
							<Parameter name="_sep"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="167" name="list.CreateList" access="All">
						<Display>list.CreateList ( _text ; _sep )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_sep"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="168" name="list.CustomList" access="All">
						<Display>list.CustomList ( _start ; _end ; _function )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_function"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="169" name="list.First" access="All">
						<Display>list.First ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="170" name="list.Insert" access="All">
						<Display>list.Insert ( _list ; _item ; _position )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_item"></Parameter>
							<Parameter name="_position"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="171" name="list.Intersection" access="All">
						<Display>list.Intersection ( _list_1 ; _list_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list_1"></Parameter>
							<Parameter name="_list_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="172" name="list.IsMember" access="All">
						<Display>list.IsMember ( _item ; _list )</Display>
						<ObjectList membercount="2">
							<Parameter name="_item"></Parameter>
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="173" name="list.KeepItems" access="All">
						<Display>list.KeepItems ( _list ; _test ; _data_type )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_test"></Parameter>
							<Parameter name="_data_type"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="174" name="list.Last" access="All">
						<Display>list.Last ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="175" name="list.LocalList" access="All">
						<Display>list.LocalList ( _field_name ; _start ; _end ; _exclude_empty )</Display>
						<ObjectList membercount="4">
							<Parameter name="_field_name"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_exclude_empty"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="176" name="list.MaxNumber" access="All">
						<Display>list.MaxNumber ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="177" name="list.MinNumber" access="All">
						<Display>list.MinNumber ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="178" name="list.NextValue" access="All">
						<Display>list.NextValue ( _list ; _item ; _loop )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_item"></Parameter>
							<Parameter name="_loop"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="179" name="list.Pad" access="All">
						<Display>list.Pad ( _list ; _count )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_count"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="180" name="list.Pop" access="All">
						<Display>list.Pop ( _var_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_var_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="181" name="list.Remove" access="All">
						<Display>list.Remove ( _list ; _position )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_position"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="182" name="list.RemoveBlanks" access="All">
						<Display>list.RemoveBlanks ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="183" name="list.RemoveValue" access="All">
						<Display>list.RemoveValue ( _list ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="184" name="list.Replace" access="All">
						<Display>list.Replace ( _list ; _item ; _position )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_item"></Parameter>
							<Parameter name="_position"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="185" name="list.ReplaceSeparator" access="All">
						<Display>list.ReplaceSeparator ( _list ; _string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="186" name="list.ReplaceValue" access="All">
						<Display>list.ReplaceValue ( _list ; _old ; _new )</Display>
						<ObjectList membercount="3">
							<Parameter name="_list"></Parameter>
							<Parameter name="_old"></Parameter>
							<Parameter name="_new"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="187" name="list.Rest" access="All">
						<Display>list.Rest ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="188" name="list.Reverse" access="All">
						<Display>list.Reverse ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="189" name="list.Shuffle" access="All">
						<Display>list.Shuffle ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="190" name="list.Subtract" access="All">
						<Display>list.Subtract ( _subtract_from ; _subtract )</Display>
						<ObjectList membercount="2">
							<Parameter name="_subtract_from"></Parameter>
							<Parameter name="_subtract"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="191" name="list.ToggleValue" access="All">
						<Display>list.ToggleValue ( _list ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_list"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="192" name="list.ValuePosition" access="All">
						<Display>list.ValuePosition ( _item ; _list ; _start )</Display>
						<ObjectList membercount="3">
							<Parameter name="_item"></Parameter>
							<Parameter name="_list"></Parameter>
							<Parameter name="_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="193" name="log_____ Log Module Functions ______________________________________________________________________" access="FullAccessOnly">
						<Display>log_____ Log Module Functions ______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="194" name="log.SystemState" access="All">
						<Display>log.SystemState</Display>
					</CustomFunction>
					<CustomFunction id="195" name="math_____ Math Functions ___________________________________________________________________________" access="All">
						<Display>math_____ Math Functions ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="196" name="math.BaseToInteger" access="All">
						<Display>math.BaseToInteger ( _int_text ; _base )</Display>
						<ObjectList membercount="2">
							<Parameter name="_int_text"></Parameter>
							<Parameter name="_base"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="197" name="math.Format" access="All">
						<Display>math.Format ( _number ; _precision ; _separator )</Display>
						<ObjectList membercount="3">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
							<Parameter name="_separator"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="198" name="math.FormatCurrency" access="All">
						<Display>math.FormatCurrency ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="199" name="math.FormatOrdinal" access="All">
						<Display>math.FormatOrdinal ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="200" name="math.Fractile" access="All">
						<Display>math.Fractile ( _value ; _list ; _pieces )</Display>
						<ObjectList membercount="3">
							<Parameter name="_value"></Parameter>
							<Parameter name="_list"></Parameter>
							<Parameter name="_pieces"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="201" name="math.IntegerToBase" access="All">
						<Display>math.IntegerToBase ( _int ; _base )</Display>
						<ObjectList membercount="2">
							<Parameter name="_int"></Parameter>
							<Parameter name="_base"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="202" name="math.IntegerToHex" access="All">
						<Display>math.IntegerToHex ( _int )</Display>
						<ObjectList membercount="1">
							<Parameter name="_int"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="203" name="math.IsInteger" access="All">
						<Display>math.IsInteger ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="204" name="math.IsNumber" access="All">
						<Display>math.IsNumber ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="205" name="math.Permutations" access="All">
						<Display>math.Permutations ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="206" name="math.RoundDownTo" access="All">
						<Display>math.RoundDownTo ( _number ; _precision )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="207" name="math.RoundTo" access="All">
						<Display>math.RoundTo ( _number ; _precision )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="208" name="math.RoundToSignificantDigits" access="All">
						<Display>math.RoundToSignificantDigits ( _number ; _digits )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_digits"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="209" name="math.RoundUpTo" access="All">
						<Display>math.RoundUpTo ( _number ; _precision )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="210" name="math.StDev" access="All">
						<Display>math.StDev ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="211" name="math.StDevP" access="All">
						<Display>math.StDevP ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="212" name="math.Sum" access="All">
						<Display>math.Sum ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="213" name="math.WeightedAverage" access="All">
						<Display>math.WeightedAverage ( _weights ; _values )</Display>
						<ObjectList membercount="2">
							<Parameter name="_weights"></Parameter>
							<Parameter name="_values"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="214" name="mode_____ Mode Constants ___________________________________________________________________________" access="FullAccessOnly">
						<Display>mode_____ Mode Constants ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="215" name="mode.Browse" access="All">
						<Display>mode.Browse</Display>
					</CustomFunction>
					<CustomFunction id="216" name="mode.Find" access="All">
						<Display>mode.Find</Display>
					</CustomFunction>
					<CustomFunction id="217" name="mode.Layout" access="All">
						<Display>mode.Layout</Display>
					</CustomFunction>
					<CustomFunction id="218" name="mode.Preview" access="All">
						<Display>mode.Preview</Display>
					</CustomFunction>
					<CustomFunction id="219" name="mode.Printing" access="All">
						<Display>mode.Printing</Display>
					</CustomFunction>
					<CustomFunction id="220" name="modifier_____ Modifier Key Functions _______________________________________________________________" access="FullAccessOnly">
						<Display>modifier_____ Modifier Key Functions _______________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="221" name="modifier.Alt" access="All">
						<Display>modifier.Alt</Display>
					</CustomFunction>
					<CustomFunction id="222" name="modifier.BitIsSet" access="All">
						<Display>modifier.BitIsSet ( _number ; _bit )</Display>
						<ObjectList membercount="2">
							<Parameter name="_number"></Parameter>
							<Parameter name="_bit"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="223" name="modifier.CapsLock" access="All">
						<Display>modifier.CapsLock</Display>
					</CustomFunction>
					<CustomFunction id="224" name="modifier.Command" access="All">
						<Display>modifier.Command</Display>
					</CustomFunction>
					<CustomFunction id="225" name="modifier.Control" access="All">
						<Display>modifier.Control</Display>
					</CustomFunction>
					<CustomFunction id="226" name="modifier.KeyActive" access="All">
						<Display>modifier.KeyActive ( _key )</Display>
						<ObjectList membercount="1">
							<Parameter name="_key"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="227" name="modifier.Shift" access="All">
						<Display>modifier.Shift</Display>
					</CustomFunction>
					<CustomFunction id="228" name="msg_____ Messages __________________________________________________________________________________" access="FullAccessOnly">
						<Display>msg_____ Messages __________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="229" name="msg.InsufficientPrivileges" access="All">
						<Display>msg.InsufficientPrivileges ( _action )</Display>
						<ObjectList membercount="1">
							<Parameter name="_action"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="230" name="msg.InvalidConfigMessage" access="All">
						<Display>msg.InvalidConfigMessage ( _module ; _reasons )</Display>
						<ObjectList membercount="2">
							<Parameter name="_module"></Parameter>
							<Parameter name="_reasons"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="231" name="msg.InvalidParamsMessage" access="All">
						<Display>msg.InvalidParamsMessage</Display>
					</CustomFunction>
					<CustomFunction id="232" name="path_____ File Paths _______________________________________________________________________________" access="FullAccessOnly">
						<Display>path_____ File Paths _______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="233" name="path.DesktopFilepath" access="All">
						<Display>path.DesktopFilepath ( _filename )</Display>
						<ObjectList membercount="1">
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="234" name="path.DocumentsFilepath" access="All">
						<Display>path.DocumentsFilepath ( _filename )</Display>
						<ObjectList membercount="1">
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="235" name="path.FileExtension" access="All">
						<Display>path.FileExtension ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="236" name="path.FileMaker" access="All">
						<Display>path.FileMaker ( _os_path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_os_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="237" name="path.Filename" access="All">
						<Display>path.Filename ( _path ; _include_ext )</Display>
						<ObjectList membercount="2">
							<Parameter name="_path"></Parameter>
							<Parameter name="_include_ext"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="238" name="path.OperatingSystem" access="All">
						<Display>path.OperatingSystem ( _fm_path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_fm_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="239" name="path.ParentFolder" access="All">
						<Display>path.ParentFolder ( _path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="240" name="path.POSIX" access="All">
						<Display>path.POSIX ( _path )</Display>
						<ObjectList membercount="1">
							<Parameter name="_path"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="241" name="path.ProtocolFile" access="All">
						<Display>path.ProtocolFile</Display>
					</CustomFunction>
					<CustomFunction id="242" name="path.ProtocolMac" access="All">
						<Display>path.ProtocolMac</Display>
					</CustomFunction>
					<CustomFunction id="243" name="path.ProtocolPlatform" access="All">
						<Display>path.ProtocolPlatform</Display>
					</CustomFunction>
					<CustomFunction id="244" name="path.ProtocolWin" access="All">
						<Display>path.ProtocolWin</Display>
					</CustomFunction>
					<CustomFunction id="245" name="path.TemporaryFilepath" access="All">
						<Display>path.TemporaryFilepath ( _filename )</Display>
						<ObjectList membercount="1">
							<Parameter name="_filename"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="246" name="platform_____ Platform Functions ___________________________________________________________________" access="FullAccessOnly">
						<Display>platform_____ Platform Functions ___________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="247" name="platform.ArchitectureIs32" access="All">
						<Display>platform.ArchitectureIs32</Display>
					</CustomFunction>
					<CustomFunction id="248" name="platform.Go" access="All">
						<Display>platform.Go</Display>
					</CustomFunction>
					<CustomFunction id="249" name="platform.Intel32" access="All">
						<Display>platform.Intel32</Display>
					</CustomFunction>
					<CustomFunction id="250" name="platform.IsDesktop" access="All">
						<Display>platform.IsDesktop</Display>
					</CustomFunction>
					<CustomFunction id="251" name="platform.IsGo" access="All">
						<Display>platform.IsGo</Display>
					</CustomFunction>
					<CustomFunction id="252" name="platform.IsiPad" access="All">
						<Display>platform.IsiPad</Display>
					</CustomFunction>
					<CustomFunction id="253" name="platform.IsiPhone" access="All">
						<Display>platform.IsiPhone</Display>
					</CustomFunction>
					<CustomFunction id="254" name="platform.IsMac" access="All">
						<Display>platform.IsMac</Display>
					</CustomFunction>
					<CustomFunction id="255" name="platform.IsServer" access="All">
						<Display>platform.IsServer</Display>
					</CustomFunction>
					<CustomFunction id="256" name="platform.IsWeb" access="All">
						<Display>platform.IsWeb</Display>
					</CustomFunction>
					<CustomFunction id="257" name="platform.IsWin" access="All">
						<Display>platform.IsWin</Display>
					</CustomFunction>
					<CustomFunction id="258" name="platform.Mac" access="All">
						<Display>platform.Mac</Display>
					</CustomFunction>
					<CustomFunction id="259" name="platform.VersionAdvanced" access="All">
						<Display>platform.VersionAdvanced</Display>
					</CustomFunction>
					<CustomFunction id="260" name="platform.VersioniPad" access="All">
						<Display>platform.VersioniPad</Display>
					</CustomFunction>
					<CustomFunction id="261" name="platform.VersioniPhone" access="All">
						<Display>platform.VersioniPhone</Display>
					</CustomFunction>
					<CustomFunction id="262" name="platform.VersionName" access="All">
						<Display>platform.VersionName</Display>
					</CustomFunction>
					<CustomFunction id="263" name="platform.VersionPro" access="All">
						<Display>platform.VersionPro</Display>
					</CustomFunction>
					<CustomFunction id="264" name="platform.VersionRuntime" access="All">
						<Display>platform.VersionRuntime</Display>
					</CustomFunction>
					<CustomFunction id="265" name="platform.VersionServer" access="All">
						<Display>platform.VersionServer</Display>
					</CustomFunction>
					<CustomFunction id="266" name="platform.VersionWeb" access="All">
						<Display>platform.VersionWeb</Display>
					</CustomFunction>
					<CustomFunction id="267" name="platform.Win" access="All">
						<Display>platform.Win</Display>
					</CustomFunction>
					<CustomFunction id="268" name="plugin_____ Plugin Functions _______________________________________________________________________" access="FullAccessOnly">
						<Display>plugin_____ Plugin Functions _______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="269" name="plugin.Attribute" access="All">
						<Display>plugin.Attribute ( _name ; _attribute )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_attribute"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="270" name="plugin.IsReady" access="All">
						<Display>plugin.IsReady ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="271" name="plugin.RegisterScriptMasterFunction" access="All">
						<Display>plugin.RegisterScriptMasterFunction ( _signature ; _code ; _debug )</Display>
						<ObjectList membercount="3">
							<Parameter name="_signature"></Parameter>
							<Parameter name="_code"></Parameter>
							<Parameter name="_debug"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="272" name="plugin.Version" access="All">
						<Display>plugin.Version ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="273" name="psos_____ Perform Script on Server _________________________________________________________________" access="FullAccessOnly">
						<Display>psos_____ Perform Script on Server _________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="274" name="psos.ConditionalOverride" access="All">
						<Display>psos.ConditionalOverride</Display>
					</CustomFunction>
					<CustomFunction id="275" name="psos.IsOverridden" access="All">
						<Display>psos.IsOverridden</Display>
					</CustomFunction>
					<CustomFunction id="276" name="psos.ShouldPerformOnServer" access="All">
						<Display>psos.ShouldPerformOnServer</Display>
					</CustomFunction>
					<CustomFunction id="277" name="psos.TurnOverrideOff" access="All">
						<Display>psos.TurnOverrideOff</Display>
					</CustomFunction>
					<CustomFunction id="278" name="psos.TurnOverrideOn" access="All">
						<Display>psos.TurnOverrideOn</Display>
					</CustomFunction>
					<CustomFunction id="279" name="random_____ Randomizers ____________________________________________________________________________" access="All">
						<Display>random_____ Randomizers ____________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="280" name="random.ListItem" access="All">
						<Display>random.ListItem ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="281" name="random.Number" access="All">
						<Display>random.Number ( _min ; _max ; _precision )</Display>
						<ObjectList membercount="3">
							<Parameter name="_min"></Parameter>
							<Parameter name="_max"></Parameter>
							<Parameter name="_precision"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="282" name="random.Password" access="All">
						<Display>random.Password ( _len )</Display>
						<ObjectList membercount="1">
							<Parameter name="_len"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="283" name="random.PasswordChar" access="All">
						<Display>random.PasswordChar</Display>
					</CustomFunction>
					<CustomFunction id="284" name="range_____ Ranges __________________________________________________________________________________" access="FullAccessOnly">
						<Display>range_____ Ranges __________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="285" name="range.Dates" access="All">
						<Display>range.Dates ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="286" name="range.DatesYYYYMMDD" access="All">
						<Display>range.DatesYYYYMMDD ( _date_1 ; _date_2 )</Display>
						<ObjectList membercount="2">
							<Parameter name="_date_1"></Parameter>
							<Parameter name="_date_2"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="287" name="range.Integers" access="All">
						<Display>range.Integers ( _start ; _end )</Display>
						<ObjectList membercount="2">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="288" name="range.Weekdays" access="All">
						<Display>range.Weekdays ( _start ; _end ; _ignore )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_ignore"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="289" name="range.WeekdaysYYYYMMDD" access="All">
						<Display>range.WeekdaysYYYYMMDD ( _start ; _end ; _ignore )</Display>
						<ObjectList membercount="3">
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_ignore"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="290" name="rgb_____ RGB Extracts ______________________________________________________________________________" access="FullAccessOnly">
						<Display>rgb_____ RGB Extracts ______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="291" name="rgb.Blue" access="All">
						<Display>rgb.Blue ( _rgb )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rgb"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="292" name="rgb.Green" access="All">
						<Display>rgb.Green ( _rgb )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rgb"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="293" name="rgb.Red" access="All">
						<Display>rgb.Red ( _rgb )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rgb"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="294" name="schema_____ Schema Introspection ___________________________________________________________________" access="FullAccessOnly">
						<Display>schema_____ Schema Introspection ___________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="295" name="schema.BaseTableNames" access="All">
						<Display>schema.BaseTableNames</Display>
					</CustomFunction>
					<CustomFunction id="296" name="schema.DataFieldNames" access="All">
						<Display>schema.DataFieldNames ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="297" name="schema.FieldDataType" access="All">
						<Display>schema.FieldDataType ( _field_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="298" name="schema.FieldNames" access="All">
						<Display>schema.FieldNames ( _table )</Display>
						<ObjectList membercount="1">
							<Parameter name="_table"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="299" name="schema.FieldRepCount" access="All">
						<Display>schema.FieldRepCount ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="300" name="schema.FieldStorageType" access="All">
						<Display>schema.FieldStorageType ( _field_name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="301" name="script_____ Script Parameter Results _______________________________________________________________" access="All">
						<Display>script_____ Script Parameter Results _______________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="302" name="script._CharPosOrLen" access="All">
						<Display>script._CharPosOrLen ( _text ; _char ; _start )</Display>
						<ObjectList membercount="3">
							<Parameter name="_text"></Parameter>
							<Parameter name="_char"></Parameter>
							<Parameter name="_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="303" name="script._OptParams" access="All">
						<Display>script._OptParams ( _script )</Display>
						<ObjectList membercount="1">
							<Parameter name="_script"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="304" name="script._RawParams" access="All">
						<Display>script._RawParams ( _script ; _type )</Display>
						<ObjectList membercount="2">
							<Parameter name="_script"></Parameter>
							<Parameter name="_type"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="305" name="script._ReqParams" access="All">
						<Display>script._ReqParams ( _script )</Display>
						<ObjectList membercount="1">
							<Parameter name="_script"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="306" name="script.AssignParams" access="All">
						<Display>script.AssignParams</Display>
					</CustomFunction>
					<CustomFunction id="307" name="script.AssignResults" access="All">
						<Display>script.AssignResults</Display>
					</CustomFunction>
					<CustomFunction id="308" name="script.ConfirmVars" access="All">
						<Display>script.ConfirmVars ( _names )</Display>
						<ObjectList membercount="1">
							<Parameter name="_names"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="309" name="script.Param" access="All">
						<Display>script.Param ( _name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="310" name="sort_____ Sort Constants ___________________________________________________________________________" access="FullAccessOnly">
						<Display>sort_____ Sort Constants ___________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="311" name="sort.DateAsc" access="All">
						<Display>sort.DateAsc</Display>
					</CustomFunction>
					<CustomFunction id="312" name="sort.DateDesc" access="All">
						<Display>sort.DateDesc</Display>
					</CustomFunction>
					<CustomFunction id="313" name="sort.NumberAsc" access="All">
						<Display>sort.NumberAsc</Display>
					</CustomFunction>
					<CustomFunction id="314" name="sort.NumberDesc" access="All">
						<Display>sort.NumberDesc</Display>
					</CustomFunction>
					<CustomFunction id="315" name="sort.TextAsc" access="All">
						<Display>sort.TextAsc</Display>
					</CustomFunction>
					<CustomFunction id="316" name="sort.TextDesc" access="All">
						<Display>sort.TextDesc</Display>
					</CustomFunction>
					<CustomFunction id="317" name="sort.TimeAsc" access="All">
						<Display>sort.TimeAsc</Display>
					</CustomFunction>
					<CustomFunction id="318" name="sort.TimeDesc" access="All">
						<Display>sort.TimeDesc</Display>
					</CustomFunction>
					<CustomFunction id="319" name="sort.TimestampAsc" access="All">
						<Display>sort.TimestampAsc</Display>
					</CustomFunction>
					<CustomFunction id="320" name="sort.TimestampDesc" access="All">
						<Display>sort.TimestampDesc</Display>
					</CustomFunction>
					<CustomFunction id="321" name="sortable_____ Sortable Text ________________________________________________________________________" access="FullAccessOnly">
						<Display>sortable_____ Sortable Text ________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="322" name="sortable.Date" access="All">
						<Display>sortable.Date ( _date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="323" name="sortable.Number" access="All">
						<Display>sortable.Number ( _number )</Display>
						<ObjectList membercount="1">
							<Parameter name="_number"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="324" name="sortable.Time" access="All">
						<Display>sortable.Time ( _time )</Display>
						<ObjectList membercount="1">
							<Parameter name="_time"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="325" name="sortable.Timestamp" access="All">
						<Display>sortable.Timestamp ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="326" name="sql_____ ExecuteSQL ________________________________________________________________________________" access="All">
						<Display>sql_____ ExecuteSQL ________________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="327" name="sql.ConvertDate" access="All">
						<Display>sql.ConvertDate ( _sql_date )</Display>
						<ObjectList membercount="1">
							<Parameter name="_sql_date"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="328" name="sql.Debug" access="All">
						<Display>sql.Debug ( _execute_sql_results )</Display>
						<ObjectList membercount="1">
							<Parameter name="_execute_sql_results"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="329" name="sql.FormatListForIn" access="All">
						<Display>sql.FormatListForIn ( _list )</Display>
						<ObjectList membercount="1">
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="330" name="sql.QuotedFieldName" access="All">
						<Display>sql.QuotedFieldName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="331" name="sql.QuotedQualified" access="All">
						<Display>sql.QuotedQualified ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="332" name="sql.QuotedTableName" access="All">
						<Display>sql.QuotedTableName ( _field )</Display>
						<ObjectList membercount="1">
							<Parameter name="_field"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="333" name="sql.SelectCountWhereValue incomplete" access="All">
						<Display>sql.SelectCountWhereValue incomplete ( _from_table ; _where_field ; _value )</Display>
						<ObjectList membercount="3">
							<Parameter name="_from_table"></Parameter>
							<Parameter name="_where_field"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="334" name="sql.SelectFromWhereValue" access="All">
						<Display>sql.SelectFromWhereValue ( _select_field ; _from_table ; _where_field ; _value )</Display>
						<ObjectList membercount="4">
							<Parameter name="_select_field"></Parameter>
							<Parameter name="_from_table"></Parameter>
							<Parameter name="_where_field"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="335" name="sql.SubstituteQuotedVariables" access="All">
						<Display>sql.SubstituteQuotedVariables ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="336" name="system_____ System Constants _______________________________________________________________________" access="FullAccessOnly">
						<Display>system_____ System Constants _______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="337" name="system.AllowAbortStateOn" access="All">
						<Display>system.AllowAbortStateOn</Display>
					</CustomFunction>
					<CustomFunction id="338" name="system.ErrorCaptureOff" access="All">
						<Display>system.ErrorCaptureOff</Display>
					</CustomFunction>
					<CustomFunction id="339" name="system.IsLandscape" access="All">
						<Display>system.IsLandscape</Display>
					</CustomFunction>
					<CustomFunction id="340" name="system.IsPortrait" access="All">
						<Display>system.IsPortrait</Display>
					</CustomFunction>
					<CustomFunction id="341" name="system.MultiUserStateClient" access="All">
						<Display>system.MultiUserStateClient</Display>
					</CustomFunction>
					<CustomFunction id="342" name="system.MultiUserStateHost" access="All">
						<Display>system.MultiUserStateHost</Display>
					</CustomFunction>
					<CustomFunction id="343" name="system.MultiUserStateOff" access="All">
						<Display>system.MultiUserStateOff</Display>
					</CustomFunction>
					<CustomFunction id="344" name="system.RecordStateClosed" access="All">
						<Display>system.RecordStateClosed</Display>
					</CustomFunction>
					<CustomFunction id="345" name="system.RecordStateEditedOpen" access="All">
						<Display>system.RecordStateEditedOpen</Display>
					</CustomFunction>
					<CustomFunction id="346" name="system.RecordStateNewOpen" access="All">
						<Display>system.RecordStateNewOpen</Display>
					</CustomFunction>
					<CustomFunction id="347" name="text_____ Text Processing __________________________________________________________________________" access="FullAccessOnly">
						<Display>text_____ Text Processing __________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="348" name="text._PhoneFormat" access="All">
						<Display>text._PhoneFormat ( _phone ; _format )</Display>
						<ObjectList membercount="2">
							<Parameter name="_phone"></Parameter>
							<Parameter name="_format"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="349" name="text.BOMPad" access="All">
						<Display>text.BOMPad ( _text ; _length )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_length"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="350" name="text.CamelToSnake" access="All">
						<Display>text.CamelToSnake ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="351" name="text.Clean" access="All">
						<Display>text.Clean ( _text ; _clear_pilcrows ; _trim ; _clear_font ; _clear_size ; _clear_color ; _clear_styles )</Display>
						<ObjectList membercount="7">
							<Parameter name="_text"></Parameter>
							<Parameter name="_clear_pilcrows"></Parameter>
							<Parameter name="_trim"></Parameter>
							<Parameter name="_clear_font"></Parameter>
							<Parameter name="_clear_size"></Parameter>
							<Parameter name="_clear_color"></Parameter>
							<Parameter name="_clear_styles"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="352" name="text.CleanAll" access="All">
						<Display>text.CleanAll ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="353" name="text.CleanFormatWithTrim" access="All">
						<Display>text.CleanFormatWithTrim ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="354" name="text.CleanRetainColorStylesReturns" access="All">
						<Display>text.CleanRetainColorStylesReturns ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="355" name="text.CleanRetainStylesReturns" access="All">
						<Display>text.CleanRetainStylesReturns ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="356" name="text.Color" access="All">
						<Display>text.Color ( _text ; _color )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_color"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="357" name="text.CSVField" access="All">
						<Display>text.CSVField ( _text ; _append_comma )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_append_comma"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="358" name="text.E164PhoneFormat" access="All">
						<Display>text.E164PhoneFormat ( _phone )</Display>
						<ObjectList membercount="1">
							<Parameter name="_phone"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="359" name="text.EndsWith" access="All">
						<Display>text.EndsWith ( _text ; _search_string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_search_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="360" name="text.EscapeDoubleQuotes" access="All">
						<Display>text.EscapeDoubleQuotes ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="361" name="text.FormatAddress" access="All">
						<Display>text.FormatAddress ( _com ; _con ; _addr_1 ; _addr_2 ; _city ; _state ; _zip ; _country )</Display>
						<ObjectList membercount="8">
							<Parameter name="_com"></Parameter>
							<Parameter name="_con"></Parameter>
							<Parameter name="_addr_1"></Parameter>
							<Parameter name="_addr_2"></Parameter>
							<Parameter name="_city"></Parameter>
							<Parameter name="_state"></Parameter>
							<Parameter name="_zip"></Parameter>
							<Parameter name="_country"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="362" name="text.FullName" access="All">
						<Display>text.FullName ( _prefix ; _first ; _middle ; _last ; _suffix )</Display>
						<ObjectList membercount="5">
							<Parameter name="_prefix"></Parameter>
							<Parameter name="_first"></Parameter>
							<Parameter name="_middle"></Parameter>
							<Parameter name="_last"></Parameter>
							<Parameter name="_suffix"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="363" name="text.GetAsURLEncoded" access="All">
						<Display>text.GetAsURLEncoded ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="364" name="text.Oxfordize" access="All">
						<Display>text.Oxfordize ( _items ; _conjunction ; _quote )</Display>
						<ObjectList membercount="3">
							<Parameter name="_items"></Parameter>
							<Parameter name="_conjunction"></Parameter>
							<Parameter name="_quote"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="365" name="text.Pad" access="All">
						<Display>text.Pad ( _text ; _char ; _counter ; _side )</Display>
						<ObjectList membercount="4">
							<Parameter name="_text"></Parameter>
							<Parameter name="_char"></Parameter>
							<Parameter name="_counter"></Parameter>
							<Parameter name="_side"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="366" name="text.PadSpaces" access="All">
						<Display>text.PadSpaces ( _text ; _count )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_count"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="367" name="text.PadZeros" access="All">
						<Display>text.PadZeros ( _text ; _length )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_length"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="368" name="text.ParseAddress" access="All">
						<Display>text.ParseAddress ( _address )</Display>
						<ObjectList membercount="1">
							<Parameter name="_address"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="369" name="text.ParseName" access="All">
						<Display>text.ParseName ( _name )</Display>
						<ObjectList membercount="1">
							<Parameter name="_name"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="370" name="text.PhoneFormat" access="All">
						<Display>text.PhoneFormat ( _phone ; _country )</Display>
						<ObjectList membercount="2">
							<Parameter name="_phone"></Parameter>
							<Parameter name="_country"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="371" name="text.Pluralize" access="All">
						<Display>text.Pluralize ( _word ; _count )</Display>
						<ObjectList membercount="2">
							<Parameter name="_word"></Parameter>
							<Parameter name="_count"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="372" name="text.QuoteIfUnquoted" access="All">
						<Display>text.QuoteIfUnquoted ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="373" name="text.ReplaceTokens" access="All">
						<Display>text.ReplaceTokens ( _text ; _list )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_list"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="374" name="text.StartsWith" access="All">
						<Display>text.StartsWith ( _text ; _search_string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_search_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="375" name="text.SubstituteVariables" access="All">
						<Display>text.SubstituteVariables ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="376" name="text.Supertrim" access="All">
						<Display>text.Supertrim ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="377" name="text.TrimPilcrows" access="All">
						<Display>text.TrimPilcrows ( _text )</Display>
						<ObjectList membercount="1">
							<Parameter name="_text"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="378" name="text.TrimStart" access="All">
						<Display>text.TrimStart ( _text ; _chars )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_chars"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="379" name="text.WhitespacePosition" access="All">
						<Display>text.WhitespacePosition ( _text ; _start )</Display>
						<ObjectList membercount="2">
							<Parameter name="_text"></Parameter>
							<Parameter name="_start"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="380" name="timestamp_____ Timestamp Processing ________________________________________________________________" access="FullAccessOnly">
						<Display>timestamp_____ Timestamp Processing ________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="381" name="timestamp.ClockTime" access="All">
						<Display>timestamp.ClockTime ( _time )</Display>
						<ObjectList membercount="1">
							<Parameter name="_time"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="382" name="timestamp.ConvertUnix" access="All">
						<Display>timestamp.ConvertUnix ( _unix_timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_unix_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="383" name="timestamp.Format" access="All">
						<Display>timestamp.Format ( _timestamp ; _format_string )</Display>
						<ObjectList membercount="2">
							<Parameter name="_timestamp"></Parameter>
							<Parameter name="_format_string"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="384" name="timestamp.FromISO8601" access="All">
						<Display>timestamp.FromISO8601 ( _iso )</Display>
						<ObjectList membercount="1">
							<Parameter name="_iso"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="385" name="timestamp.FromRFC2822" access="All">
						<Display>timestamp.FromRFC2822 ( _rfc_2822 )</Display>
						<ObjectList membercount="1">
							<Parameter name="_rfc_2822"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="386" name="timestamp.ICSFormat" access="All">
						<Display>timestamp.ICSFormat ( _date ; _start ; _end ; _summary ; _description ; _location )</Display>
						<ObjectList membercount="6">
							<Parameter name="_date"></Parameter>
							<Parameter name="_start"></Parameter>
							<Parameter name="_end"></Parameter>
							<Parameter name="_summary"></Parameter>
							<Parameter name="_description"></Parameter>
							<Parameter name="_location"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="387" name="timestamp.LocalMilliseconds" access="All">
						<Display>timestamp.LocalMilliseconds</Display>
					</CustomFunction>
					<CustomFunction id="388" name="timestamp.MonDDYYYYHHMMP" access="All">
						<Display>timestamp.MonDDYYYYHHMMP ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="389" name="timestamp.TextualTime" access="All">
						<Display>timestamp.TextualTime ( _time ; _round_seconds )</Display>
						<ObjectList membercount="2">
							<Parameter name="_time"></Parameter>
							<Parameter name="_round_seconds"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="390" name="timestamp.ToiCalFormat" access="All">
						<Display>timestamp.ToiCalFormat ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="391" name="timestamp.ToISO8601" access="All">
						<Display>timestamp.ToISO8601 ( _timestamp )</Display>
						<ObjectList membercount="1">
							<Parameter name="_timestamp"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="392" name="timestamp.UTCDifference" access="All">
						<Display>timestamp.UTCDifference</Display>
					</CustomFunction>
					<CustomFunction id="393" name="triggers_____ Trigger Control ______________________________________________________________________" access="FullAccessOnly">
						<Display>triggers_____ Trigger Control ______________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="394" name="triggers._ScriptKey" access="All">
						<Display>triggers._ScriptKey</Display>
					</CustomFunction>
					<CustomFunction id="395" name="triggers.Active" access="All">
						<Display>triggers.Active</Display>
					</CustomFunction>
					<CustomFunction id="396" name="triggers.Disable" access="All">
						<Display>triggers.Disable</Display>
					</CustomFunction>
					<CustomFunction id="397" name="triggers.Enable" access="All">
						<Display>triggers.Enable</Display>
					</CustomFunction>
					<CustomFunction id="398" name="triggers.Force" access="All">
						<Display>triggers.Force</Display>
					</CustomFunction>
					<CustomFunction id="399" name="triggers.Reset" access="All">
						<Display>triggers.Reset</Display>
					</CustomFunction>
					<CustomFunction id="400" name="triggers.Restore" access="All">
						<Display>triggers.Restore</Display>
					</CustomFunction>
					<CustomFunction id="401" name="url_____ URL Builders ______________________________________________________________________________" access="FullAccessOnly">
						<Display>url_____ URL Builders ______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="402" name="url._LetNotationToURLVars" access="All">
						<Display>url._LetNotationToURLVars ( _let_notation )</Display>
						<ObjectList membercount="1">
							<Parameter name="_let_notation"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="403" name="url.Auth" access="All">
						<Display>url.Auth ( _user ; _password )</Display>
						<ObjectList membercount="2">
							<Parameter name="_user"></Parameter>
							<Parameter name="_password"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="404" name="url.Bookend" access="All">
						<Display>url.Bookend ( _value )</Display>
						<ObjectList membercount="1">
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="405" name="url.FMP" access="All">
						<Display>url.FMP ( _filename ; _host )</Display>
						<ObjectList membercount="2">
							<Parameter name="_filename"></Parameter>
							<Parameter name="_host"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="406" name="url.Param" access="All">
						<Display>url.Param ( _name ; _value )</Display>
						<ObjectList membercount="2">
							<Parameter name="_name"></Parameter>
							<Parameter name="_value"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="407" name="url.Path" access="All">
						<Display>url.Path ( _segment )</Display>
						<ObjectList membercount="1">
							<Parameter name="_segment"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="408" name="url.PerformScriptByName" access="All">
						<Display>url.PerformScriptByName ( _script ; _param ; _vars )</Display>
						<ObjectList membercount="3">
							<Parameter name="_script"></Parameter>
							<Parameter name="_param"></Parameter>
							<Parameter name="_vars"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="409" name="url.TimestampedToken" access="All">
						<Display>url.TimestampedToken</Display>
					</CustomFunction>
					<CustomFunction id="410" name="window_____ Window Utility Functions _______________________________________________________________" access="FullAccessOnly">
						<Display>window_____ Window Utility Functions _______________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="411" name="window.CenterLeft" access="All">
						<Display>window.CenterLeft ( _parent_left ; _parent_width )</Display>
						<ObjectList membercount="2">
							<Parameter name="_parent_left"></Parameter>
							<Parameter name="_parent_width"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="412" name="window.CenterTop" access="All">
						<Display>window.CenterTop ( _parent_top ; _parent_height )</Display>
						<ObjectList membercount="2">
							<Parameter name="_parent_top"></Parameter>
							<Parameter name="_parent_height"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="413" name="window.HeightFromContent" access="All">
						<Display>window.HeightFromContent ( _content_height )</Display>
						<ObjectList membercount="1">
							<Parameter name="_content_height"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="414" name="window.Offscreen" access="All">
						<Display>window.Offscreen</Display>
					</CustomFunction>
					<CustomFunction id="415" name="window.Utility" access="All">
						<Display>window.Utility ( _id )</Display>
						<ObjectList membercount="1">
							<Parameter name="_id"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="416" name="window.WidthFromContent" access="All">
						<Display>window.WidthFromContent ( _content_height )</Display>
						<ObjectList membercount="1">
							<Parameter name="_content_height"></Parameter>
						</ObjectList>
					</CustomFunction>
					<CustomFunction id="417" name="xml_____ XML Parsing _______________________________________________________________________________" access="FullAccessOnly">
						<Display>xml_____ XML Parsing _______________________________________________________________________________</Display>
					</CustomFunction>
					<CustomFunction id="418" name="xml.ExtractData" access="All">
						<Display>xml.ExtractData ( _xml ; _tag ; _idx )</Display>
						<ObjectList membercount="3">
							<Parameter name="_xml"></Parameter>
							<Parameter name="_tag"></Parameter>
							<Parameter name="_idx"></Parameter>
						</ObjectList>
					</CustomFunction>
				</ObjectList>
			</CustomFunctionsCatalog>
			<FieldsForTables membercount="1">
				<FieldCatalog>
					<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
					<ObjectList membercount="26">
						<Field id="1" name="____ ID FIELDS ________________________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA["Single-record table for system-wide global fields."]]></Text>
							</Calculation>
						</Field>
						<Field id="2" name="id" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="SerialNumber" prohibitModification="False">
								<SerialNumber increment="1" nextvalue="3" generate="OnCreation"></SerialNumber>
							</AutoEnter>
							<Validation type="Always" allowOverride="False" notEmpty="True" unique="True" existing="False">
								<Strict>Numeric</Strict>
							</Validation>
							<Storage index="All" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="3" name="____ TABLE DATA _____________________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>
							</Calculation>
						</Field>
						<Field id="4" name="____ RULES ___________________________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>
							</Calculation>
						</Field>
						<Field id="5" name="can_edit" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[True]]></Text>
							</Calculation>
						</Field>
						<Field id="6" name="can_delete" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[False]]></Text>
							</Calculation>
						</Field>
						<Field id="7" name="can_view" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[True]]></Text>
							</Calculation>
						</Field>
						<Field id="8" name="is_valid" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[True]]></Text>
							</Calculation>
						</Field>
						<Field id="9" name="____ RELATIONSHIP KEYS ____________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>
							</Calculation>
						</Field>
						<Field id="10" name="ONE" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[1]]></Text>
							</Calculation>
						</Field>
						<Field id="11" name="TABLE_NAME" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[dev.GetTableName ( Self )]]></Text>
							</Calculation>
						</Field>
						<Field id="12" name="____ HOUSEKEEPING FIELDS _________________________________________________________________" fieldtype="Calculated" datatype="Number" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>
							</Calculation>
						</Field>
						<Field id="34" name="uuid" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="Calculated" prohibitModification="False" overwriteExisting="False" alwaysEvaluate="False">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
										<Text><![CDATA[Get ( UUIDNumber )]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="Always" allowOverride="False" notEmpty="True" unique="True" existing="False"></Validation>
							<Storage autoIndex="True" index="Minimal" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="36" name="created_by" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="CreationAccountName" prohibitModification="False"></AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="37" name="created_timestamp" fieldtype="Normal" datatype="Timestamp" comment="">
							<AutoEnter type="CreationTimestamp" prohibitModification="False"></AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="38" name="created_date" fieldtype="Calculated" datatype="Date" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[GetAsDate ( created_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="39" name="created_time" fieldtype="Calculated" datatype="Time" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[GetAsTime ( created_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="40" name="modified_by" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="Calculated" prohibitModification="False" overwriteExisting="True" alwaysEvaluate="False">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
										<Text><![CDATA[Let (
  _trigger = housekeeping_trigger ;

  Case (
    $$_SUSPEND_HOUSEKEEPING_UPDATES ; Self
                                    ; Get ( AccountName )
  )
)]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage index="All" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="41" name="modified_timestamp" fieldtype="Normal" datatype="Timestamp" comment="">
							<AutoEnter type="Calculated" prohibitModification="False" overwriteExisting="True" alwaysEvaluate="False">
								<Calculated>
									<Calculation>
										<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
										<Text><![CDATA[Let (
  _trigger = housekeeping_trigger ;

  Case (
    $$_SUSPEND_HOUSEKEEPING_UPDATES ; Self
                                    ; Get ( CurrentTimestamp )
  )
)]]></Text>
									</Calculation>
								</Calculated>
							</AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage index="All" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="42" name="modified_date" fieldtype="Calculated" datatype="Date" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[GetAsDate ( modified_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="43" name="modified_time" fieldtype="Calculated" datatype="Time" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[GetAsTime ( modified_timestamp )]]></Text>
							</Calculation>
						</Field>
						<Field id="44" name="housekeeping_trigger" fieldtype="Normal" datatype="Time" comment="">
							<AutoEnter type="ModificationTime" prohibitModification="False"></AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage autoIndex="True" index="None" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="45" name="housekeeping_display" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="False" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[dev.Housekeeping]]></Text>
							</Calculation>
						</Field>
						<Field id="46" name="fm_id" fieldtype="Calculated" datatype="Text" comment="">
							<AutoEnter alwaysEvaluate="False"></AutoEnter>
							<Storage storeCalculationResults="True" autoIndex="True" index="Minimal" global="False" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
							<Calculation>
								<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>
								<Text><![CDATA[GetAsText ( Get ( RecordID ) )]]></Text>
							</Calculation>
						</Field>
						<Field id="47" name="APPLESCRIPT_PIPE" fieldtype="Normal" datatype="Text" comment="">
							<AutoEnter type="" prohibitModification="False"></AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage global="True" maxRepetitions="1">
								<LanguageReference name="English" id="21"></LanguageReference>
							</Storage>
						</Field>
						<Field id="48" name="FILE" fieldtype="Normal" datatype="Binary" comment="">
							<AutoEnter type="" prohibitModification="False"></AutoEnter>
							<Validation type="OnlyDuringDataEntry" allowOverride="True" notEmpty="False" unique="False" existing="False"></Validation>
							<Storage global="True" maxRepetitions="1"></Storage>
						</Field>
					</ObjectList>
				</FieldCatalog>
			</FieldsForTables>
			<CalcsForCustomFunctions membercount="418">
				<ObjectList membercount="418">
					<CustomFunctionCalc>
						<CustomFunctionReference id="1" name="__function_template"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _ = ""
  ] ;

  ""
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="2" name="__recursive_template"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  // ========================================
  // Step 0: Setup
  IsEmpty ( $_custom_function_name_step ) ;
  Let (
    [
      $_custom_function_name_debug = False ;

      _ = ""
    ] ;

    __recursive_template
  ) ;

  // ========================================
  // Step 1: Recursion
  $_custom_function_name_step = 1 ;
  Let (
    [
      _ = "recurisve steps here" ;

      _ = ""
    ] ;
    __recursive_template
  ) ;

  // ========================================
  // Step 2: Cleanup
  $_custom_function_name_step = 2 ;
  Let (
    [
      _result = "assign result and clear local variables if not debugging" ;

      _ = Case (
        not $_custom_function_name_debug ;
        dev.ClearVars ( List ( "var" ; "var" ) )
      ) ;

      // Step is always cleared regardless of debug mode.
      $_custom_function_name_step = dev.Nil ;

      _ = ""
    ] ;
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="3" name="app _____ Application Functions ____________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions specific to this application.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="4" name="app.DecryptPassword"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.EncryptPassword
// Purpose:		Return the decrypted version of a password.
// Parameters:		_cypher:	The encrypted version of the password
// Version:		1.0 - Charles Ross - 19-01-21

CryptDecryptBase64 ( _cypher ; app.EncryptionKey )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="5" name="app.EmailPluginKey"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA["DKVH88KYACABQE6AB4VEBXTQ"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="6" name="app.EncryptionKey"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.EncryptionKey
// Purpose:		Stores the encryption key for encrypting and decrypting passwords.
// Version:		1.0 - Charles Ross - 19-01-21
// Notes:			Research if this is the best way to store this.

"kf.eE7gp9KC$)(3ePrTfq6A6gBq&k]8YDhXs[?[7bUbg6RqyA3ZUtAsGZ4bxm=LW"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="7" name="app.EncryptPassword"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.EncryptPassword
// Purpose:		Return the encrypted version of a password.
// Parameters:		_password:	The password to encrypt
// Version:		1.0 - Charles Ross - 19-01-21

CryptEncryptBase64 ( _password ; app.EncryptionKey )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="8" name="app.PayPeriodEnd"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.PayPeriodStart ( _date )
// Purpose:		Return the date of the pay period that ended immediately prior to the given date.
// Parameters:		_date:	The date to return the pay period end before
// Requirements: 	math.RoundDownTo
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Pay periods end on Saturdays, rounding to the nearest 14 days gives us a Sunday,
//				subtracting 1 gives the previous Saturday.
// Example:		app.PayPeriodEnd ( Date ( 12 ; 18 ; 2018 ) ) = Date ( 12 ; 15 ; 2018 )

GetAsDate ( math.RoundDownTo ( _date ; 14 ) ) - 1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="9" name="app.SolutionName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[/*// app.SolutionName
// Purpose:		Returns the solution name as given in the PREF table.
// Requirements: 	sql.SelectFromWhereValue
// Version:		1.0 - Charles Ross - 18-07-31
// Example:		sample = result

sql.SelectFromWhereValue ( PREF::value ; PREF::id ; PREF::name ; "Solution Name" )*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="10" name="app.Version"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// app.Version ( _format )
// Purpose:		Returns the application version in either simple or compare format.
// Parameters:		_format:	Either "simple" or "compare", defaults to simple
// Version:		1.0 - Charles Ross - 17-03-13
//				1.1 - Charles Ross - 17-07-03 - Automated compare version from simple version
// Notes:			The second section of the compare format is the numeric release version,
//				with 0 for alpha, 1 for beta and 2 for production.
// Example:		app.Version ( "" ) = "1.0a1"

Let (
  [
    _version = "1.0a1" ;

    _major = text.PadZeros ( Truncate ( GetAsNumber ( _version ) ; 0 ) ; 3 ) ;

    _release = Case (
      PatternCount ( _version ; "a" ) ; 0 ;
      PatternCount ( _version ; "b" ) ; 1 ;
      PatternCount ( _version ; "v" ) ; 2
    ) ;

    _version = Substitute (
      _version ;
      [ "a" ; "." ] ;
      [ "b" ; "." ] ;
      [ "v" ; "." ]
    ) ;
    _list = list.CreateList ( _version ; "." ) ;

    _minor = text.PadZeros ( GetValue ( _list ; 2 ) ; 3 ) ;
    _incr  = text.PadZeros ( GetValue ( _list ; 3 ) ; 3 ) ;

    _compare = list.ReplaceSeparator ( List ( _major ; _release ; _minor ; _incr ) ; "." ) ;

    _result = Case (
      "compare" ≠ "compare" ;
      _version ;

      // major.release.minor.increment
      _compare
    )

  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="11" name="apperr _____ Application Error Functions ___________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions specific to this application.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="12" name="apperr.ConfigError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.TestingConfigError
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.TestingConfigError = "Configuration error"

"Configuration error"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="13" name="apperr.InvalidPrivilegeSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.InvalidPrivilegeSet
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.InvalidPrivilegeSet = "Invalid Privilege Set"

"Invalid Privilege Set"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="14" name="apperr.InvalidScriptParameters"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.InvalidScriptParameters
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.InvalidScriptParameters = "Script received invalid parameters"

"Script received invalid parameters"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="15" name="apperr.SlackChannelNotFound"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.SlackChannelNotFound
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.SlackChannelNotFound = "channel_not_found"

"channel_not_found"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="16" name="apperr.SlackInvalidChannel"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.SlackInvalidChannel
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.SlackInvalidChannel = "invalid_channel"

"invalid_channel"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="17" name="apperr.TestingConfigError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// apperr.TestingConfigError
// Purpose:		Returns the error code for the named error
// Version:		1.0 written 19-08-12 by Charles Ross
// Notes:			Meant to be compared with "~error" key in Get ( ScriptResult )
// Example:		apperr.TestingConfigError = "Testing configuration error"

"Testing configuration error"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="18" name="container_____ Container Fields Functions __________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that return structured data for reference purposes.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="19" name="container.Decode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Decode ( _base64 )
// Purpose:		Given a string generated by container.Encode, returns the original container data
// Parameters:		_base64:	The Base64 encoded container data returned by container.Encode
// Version:		1.0 - Charles Ross - 17-08-02
// Example:		sample = result

Let (
  [
    _decoded = Base64Decode ( _base64 ) ;

    _contents = JSONGetElement ( _decoded ; "base64" ) ;
    _filename = JSONGetElement ( _decoded ; "filename" ) ;

    _file = Base64Decode ( _contents ; _filename )
  ] ;

  _file
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="20" name="container.Encode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Encode ( _container )
// Purpose:		Returns a Base64-encoded version of the container and filename.
// Parameters:		_container:	The container data to encode
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-08-02
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _json = json.ContainerObject ( _container )
  ] ;

  Case (
    dev.IsSet ( _container )	; Base64EncodeRFC ( 46488 ; _json )
					; dev.Nil
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="21" name="container.Filename"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Filename ( _container )
// Purpose:		Return the name of the file stored in the container.
// Parameters:		_container:	The container to return the name of
// Version:		1.0 - Charles Ross - 17-08-11
// Example:		container.Filename ( file_field ) = "file.txt" // When `file.txt` was inserted into the container field.

GetContainerAttribute ( _container ; "FileName" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="22" name="container.Interactivate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Interactivate ( _container )
// Purpose:		Converts a non-interactive inserted file into one that can be interacted with.
// Parameters:		_container:	The actual container field with the non-interactive file.
// Requirements:	container.Rename
// Version:		1.0 - Stephen Baker - 15-04-21
// Notes:			http://www.teamdf.com/weetbicks/252/change-containers-from-files-to-interactive-content-in-an-instant
// Example:		container.Interactivate ( Table::container ) // When inserted into a container field, the file can be interacted with

Let (
  [
    _filename = GetContainerAttribute ( _container ; "FileName" )
  ] ;

  container.Rename ( _container ; _filename )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="23" name="container.Rename"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// container.Rename ( _container )
// Purpose:		Renames a container field's file's name.
// Parameters:		_container:	The actual container field with the non-interactive file.
//				_filename:		The new name.
// Version:		1.0 - Jan Stieperaere - 14-02-12
// Notes:			http://clickworks.be/en/rename-container-files
// Example:		container.Rename ( Table::container ; "new filename" ) // Container's file should now have the new filename.

Base64Decode ( Base64Encode ( _container ) ; _filename )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="24" name="crypt_____ Crypt Functions _________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that return structured data for reference purposes.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="25" name="crypt.HexDigest"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// crypt.HexDigest ( _token )
// Purpose:		Return the hex encoded digest for the token
// Parameters:		_token:	The token to return the hex encoded digest for
// Version:		1.0 - Charles Ross - 19-08-19
// Example:		sample = result

HexEncode ( CryptDigest ( _token ; "sha256" ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="26" name="data_____ Data Structures __________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that return structured data for reference purposes.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="27" name="data.Alphabet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Alphabet
// Purpose:		Returns the alphabet in lower case.
// Version:		1.0 written 15-05-22 written by Charles Ross
// Example:		data.Alphabet = "abcdefghijklmnopqrstuvwxyz"

"abcdefghijklmnopqrstuvwxyz"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="28" name="data.Colors"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Colors
// Purpose:		Return a dictionary of name/value paris of colors with their RGB values.
// Requirements:	let.Set
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			At this point, only used by the text.Color funciton.

let.Set ( "blue"	; RGB ( 102	; 51		; 204		) ) &
let.Set ( "red"	; RGB ( 255	; 0		; 0		) ) &
let.Set ( "gray"	; RGB ( 150	; 150		; 150		) ) &
let.Set ( "grey"	; RGB ( 150	; 150		; 150		) ) &
let.Set ( "black"	; RGB ( 0		; 0		; 0		) ) &
let.Set ( "white"	; RGB ( 255	; 255		; 255		) ) &
let.Set ( "gold"	; RGB ( 255	; 0		; 153		) ) &
let.Set ( "green"	; RGB ( 0		; 16		; 139		) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="29" name="data.Digits"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Digits
// Purpose:		A convenience function for filtering digits in strings.
// Version:		1.0 written 15-03-11 written by Charles Ross
// Example:		data.Digits = "0123456789"

"0123456789"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="30" name="data.Easters"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// data.Easters
// Purpose:		A let-notation structure of Easter dates from 2000 to 2100
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-08
// Example:		sample = result

let.Set ( 2000 ; Date ( 4 ; 23 ; 2000 ) ) &
let.Set ( 2025 ; Date ( 4 ; 20 ; 2025 ) ) &
let.Set ( 2050 ; Date ( 4 ; 10 ; 2050 ) ) &
let.Set ( 2075 ; Date ( 4 ; 7 ; 2075 ) ) &
let.Set ( 2001 ; Date ( 4 ; 15 ; 2001 ) ) &
let.Set ( 2026 ; Date ( 4 ; 5 ; 2026 ) ) &
let.Set ( 2051 ; Date ( 4 ; 2 ; 2051 ) ) &
let.Set ( 2076 ; Date ( 4 ; 19 ; 2076 ) ) &
let.Set ( 2002 ; Date ( 3 ; 31 ; 2002 ) ) &
let.Set ( 2027 ; Date ( 3 ; 28 ; 2027 ) ) &
let.Set ( 2052 ; Date ( 4 ; 21 ; 2052 ) ) &
let.Set ( 2077 ; Date ( 4 ; 11 ; 2077 ) ) &
let.Set ( 2003 ; Date ( 4 ; 20 ; 2003 ) ) &
let.Set ( 2028 ; Date ( 4 ; 16 ; 2028 ) ) &
let.Set ( 2053 ; Date ( 4 ; 6 ; 2053 ) ) &
let.Set ( 2078 ; Date ( 4 ; 3 ; 2078 ) ) &
let.Set ( 2004 ; Date ( 4 ; 11 ; 2004 ) ) &
let.Set ( 2029 ; Date ( 4 ; 1 ; 2029 ) ) &
let.Set ( 2054 ; Date ( 3 ; 29 ; 2054 ) ) &
let.Set ( 2079 ; Date ( 4 ; 23 ; 2079 ) ) &
let.Set ( 2005 ; Date ( 3 ; 27 ; 2005 ) ) &
let.Set ( 2030 ; Date ( 4 ; 21 ; 2030 ) ) &
let.Set ( 2055 ; Date ( 4 ; 18 ; 2055 ) ) &
let.Set ( 2080 ; Date ( 4 ; 7 ; 2080 ) ) &
let.Set ( 2006 ; Date ( 4 ; 16 ; 2006 ) ) &
let.Set ( 2031 ; Date ( 4 ; 13 ; 2031 ) ) &
let.Set ( 2056 ; Date ( 4 ; 2 ; 2056 ) ) &
let.Set ( 2081 ; Date ( 3 ; 30 ; 2081 ) ) &
let.Set ( 2007 ; Date ( 4 ; 8 ; 2007 ) ) &
let.Set ( 2032 ; Date ( 3 ; 28 ; 2032 ) ) &
let.Set ( 2057 ; Date ( 4 ; 22 ; 2057 ) ) &
let.Set ( 2082 ; Date ( 4 ; 19 ; 2082 ) ) &
let.Set ( 2008 ; Date ( 3 ; 23 ; 2008 ) ) &
let.Set ( 2033 ; Date ( 4 ; 17 ; 2033 ) ) &
let.Set ( 2058 ; Date ( 4 ; 14 ; 2058 ) ) &
let.Set ( 2083 ; Date ( 4 ; 4 ; 2083 ) ) &
let.Set ( 2009 ; Date ( 4 ; 12 ; 2009 ) ) &
let.Set ( 2034 ; Date ( 4 ; 9 ; 2034 ) ) &
let.Set ( 2059 ; Date ( 3 ; 30 ; 2059 ) ) &
let.Set ( 2084 ; Date ( 3 ; 26 ; 2084 ) ) &
let.Set ( 2010 ; Date ( 4 ; 4 ; 2010 ) ) &
let.Set ( 2035 ; Date ( 3 ; 25 ; 2035 ) ) &
let.Set ( 2060 ; Date ( 4 ; 18 ; 2060 ) ) &
let.Set ( 2085 ; Date ( 4 ; 15 ; 2085 ) ) &
let.Set ( 2011 ; Date ( 4 ; 24 ; 2011 ) ) &
let.Set ( 2036 ; Date ( 4 ; 13 ; 2036 ) ) &
let.Set ( 2061 ; Date ( 4 ; 10 ; 2061 ) ) &
let.Set ( 2086 ; Date ( 3 ; 31 ; 2086 ) ) &
let.Set ( 2012 ; Date ( 4 ; 8 ; 2012 ) ) &
let.Set ( 2037 ; Date ( 4 ; 5 ; 2037 ) ) &
let.Set ( 2062 ; Date ( 3 ; 26 ; 2062 ) ) &
let.Set ( 2087 ; Date ( 4 ; 20 ; 2087 ) ) &
let.Set ( 2013 ; Date ( 3 ; 31 ; 2013 ) ) &
let.Set ( 2038 ; Date ( 4 ; 25 ; 2038 ) ) &
let.Set ( 2063 ; Date ( 4 ; 15 ; 2063 ) ) &
let.Set ( 2088 ; Date ( 4 ; 11 ; 2088 ) ) &
let.Set ( 2014 ; Date ( 4 ; 20 ; 2014 ) ) &
let.Set ( 2039 ; Date ( 4 ; 10 ; 2039 ) ) &
let.Set ( 2064 ; Date ( 4 ; 6 ; 2064 ) ) &
let.Set ( 2089 ; Date ( 4 ; 3 ; 2089 ) ) &
let.Set ( 2015 ; Date ( 4 ; 5 ; 2015 ) ) &
let.Set ( 2040 ; Date ( 4 ; 1 ; 2040 ) ) &
let.Set ( 2065 ; Date ( 3 ; 29 ; 2065 ) ) &
let.Set ( 2090 ; Date ( 4 ; 16 ; 2090 ) ) &
let.Set ( 2016 ; Date ( 3 ; 27 ; 2016 ) ) &
let.Set ( 2041 ; Date ( 4 ; 21 ; 2041 ) ) &
let.Set ( 2066 ; Date ( 4 ; 11 ; 2066 ) ) &
let.Set ( 2091 ; Date ( 4 ; 8 ; 2091 ) ) &
let.Set ( 2017 ; Date ( 4 ; 16 ; 2017 ) ) &
let.Set ( 2042 ; Date ( 4 ; 6 ; 2042 ) ) &
let.Set ( 2067 ; Date ( 4 ; 3 ; 2067 ) ) &
let.Set ( 2092 ; Date ( 3 ; 30 ; 2092 ) ) &
let.Set ( 2018 ; Date ( 4 ; 1 ; 2018 ) ) &
let.Set ( 2043 ; Date ( 3 ; 29 ; 2043 ) ) &
let.Set ( 2068 ; Date ( 4 ; 22 ; 2068 ) ) &
let.Set ( 2093 ; Date ( 4 ; 12 ; 2093 ) ) &
let.Set ( 2019 ; Date ( 4 ; 21 ; 2019 ) ) &
let.Set ( 2044 ; Date ( 4 ; 17 ; 2044 ) ) &
let.Set ( 2069 ; Date ( 4 ; 14 ; 2069 ) ) &
let.Set ( 2094 ; Date ( 4 ; 4 ; 2094 ) ) &
let.Set ( 2020 ; Date ( 4 ; 12 ; 2020 ) ) &
let.Set ( 2045 ; Date ( 4 ; 9 ; 2045 ) ) &
let.Set ( 2070 ; Date ( 3 ; 30 ; 2070 ) ) &
let.Set ( 2095 ; Date ( 4 ; 24 ; 2095 ) ) &
let.Set ( 2021 ; Date ( 4 ; 4 ; 2021 ) ) &
let.Set ( 2046 ; Date ( 3 ; 25 ; 2046 ) ) &
let.Set ( 2071 ; Date ( 4 ; 19 ; 2071 ) ) &
let.Set ( 2096 ; Date ( 4 ; 15 ; 2096 ) ) &
let.Set ( 2022 ; Date ( 4 ; 17 ; 2022 ) ) &
let.Set ( 2047 ; Date ( 4 ; 14 ; 2047 ) ) &
let.Set ( 2072 ; Date ( 4 ; 10 ; 2072 ) ) &
let.Set ( 2097 ; Date ( 3 ; 31 ; 2097 ) ) &
let.Set ( 2023 ; Date ( 4 ; 9 ; 2023 ) ) &
let.Set ( 2048 ; Date ( 4 ; 5 ; 2048 ) ) &
let.Set ( 2073 ; Date ( 3 ; 26 ; 2073 ) ) &
let.Set ( 2098 ; Date ( 4 ; 20 ; 2098 ) ) &
let.Set ( 2024 ; Date ( 3 ; 31 ; 2024 ) ) &
let.Set ( 2049 ; Date ( 4 ; 18 ; 2049 ) ) &
let.Set ( 2074 ; Date ( 4 ; 15 ; 2074 ) ) &
let.Set ( 2099 ; Date ( 4 ; 12 ; 2099 ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="31" name="date_____ Date Functions ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions dealing only with date manipulation.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="32" name="date.BusinessHolidays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.BusinessHolidays ( _year )
// Purpose:		Returns a list of the dates of observed holidays in the passed year.
// Version:		1.0 Jeremy Bante 11-10-1
// Notes:			This version of this function includes observed U.S. federal holidays. It should be
//				modified to include any holidays observed by the users of each particular system.
// Todo:			The logic for all of these holidays falls into two categories, holidays that are on a
//				specific day (7/4, 12/25) and holidays that fall on the Xth weekday of the month
//				(Martin Luther King Jr on the 3rd Monday in January) and so the algorithm for all
//				of the holidays are very similar. These algorithms should be broken into two
//				separate custom functions.
// Example:		date.BusinessHolidays ( 2015 ) = "1/1/2015¶1/19/2015¶2/16/2015¶5/25/2015¶"  &
//				  "7/3/2015¶9/7/2015¶10/12/2015¶11/11/2015¶11/26/2015¶12/25/2015"

Let (
  [
    _new_years_day = Let (
      [
        _date	= Date ( 1; 1; _year );
        _day		= DayOfWeek ( _date )
      ];
      
      Case (
        _day = 1;
        _date + 1; // following Monday

        _day = 7;
        ""; // previous Friday (in previous year)
      
      // Else
        _date
      )
    );
    
    //======================================================
    // Martin Luther King, Jr. Day (3rd Monday in January)
    _mlkj_day = Date ( 1; 15; _year ) 
      + Choose ( DayOfWeek ( Date ( 1; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2
      );
      
    //======================================================
    // Washington's Birthday (3rd Monday in February)
    _washington_bday = Date ( 2; 15; _year )  // earliest possible
      + Choose ( DayOfWeek ( Date ( 2; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Memorial Day (last Monday in May)
    _memorial_day = Date ( 5; 25; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 5; 31; _year ) ) - 1;
        0; 6; 5; 4; 3; 2; 1  // adjust for day of week of month end
      );
      
    //======================================================
    // Independence Day (4 Jul)
    _independence_day = Let (
      [
        _date = Date ( 7; 4; _year );
        _day  = DayOfWeek ( _date )
      ];
    
      Case (
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // Labor Day (1st Monday in September)
    _labor_day = Date ( 9; 1; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 9; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Columbus Day (2nd Monday in October)
    _columbus_day = Date ( 10; 8; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 10; 1; _year ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Veterans Day (11 Mov)
    _veterans_day = Let (
      [
        _date = Date ( 11; 11; _year );
        _day  = DayOfWeek ( _date )
      ];
    
      Case (
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // Thanksgiving Day (4th thursday in November)
    _thanksgiving = Date ( 11; 22; _year )  // earliest possible date
      + Choose (
        DayOfWeek ( Date ( 11; 1; _year ) ) - 1;
        4; 3; 2; 1; 0; 6; 5  // adjust for day of week of month start
      );
      
    //======================================================
    // Christmas Day (25 Dec)
    _christmas = Let (
      [
        _date = Date ( 12; 25; _year );
        _day  = DayOfWeek ( _date )
      ];
    
      Case (
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // New Years Day (observed from next year)
    _next_new_years_day = Let (
      [
        _date = Date ( 1; 1; _year + 1 )
      ];
    
      Case (
        DayOfWeek ( _date ) = 7;
        _date - 1
      // Else, Null
      )
    )
  ];

  List (
    _new_years_day;
    _mlkj_day;
    _washington_bday;
    _memorial_day;
    _independence_day;
    _labor_day;
    _columbus_day;
    _veterans_day;
    _thanksgiving;
    _christmas;
    _next_new_years_day
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="33" name="date.ConvertUnixDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.ConvertUnixDate ( _unix_date )
// Purpose:		Given a date in standard Unix format (YYYY-MM-DD), return a FileMaker date.
// Parameters:		_unix_date:	A date in standard Unix format.
// Requirements: 	list.CreateList
// Version:		1.0 written 15-08-24 by Charles Ross
// Example:		date.ConvertUnixDate ( "2015-08-24" ) = Date ( 8 ; 24 ; 2015 )

Let (
  [
    _date_list	= list.CreateList ( _unix_date ; "-" ) ;
    _year		= GetValue ( _date_list ; 1 ) ;
    _month		= GetValue ( _date_list ; 2 ) ;
    _day		= GetValue ( _date_list ; 3 ) ;
    _date		= Date ( _month ; _day ; _year ) ;

    _result = Case (
      IsEmpty ( _unix_date ) or ( _date = "?" ) ;	dev.Nil ;
									_date
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="34" name="date.DiffDays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffDays ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in days, excluding years and months
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Notes:			Numbers are returned with the appropriate sign when _date_2 < _date_1
// Example:		date.DiffDays ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = -21

Let(
  [
    _sign = Sign ( _date_2 - _date_1 );

    _d_1 = Min ( _date_1 ; _date_2 ) ;
    _d_2 = Max ( _date_1 ; _date_2 ) ;

    _days = Mod (
      Day ( _d_2 ) - Day ( _d_1 );
      Day ( Date ( Month ( _d_1 ) + 1; 0; Year ( _d_1 ) ) )
    )
  ];

  _days * _sign
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="35" name="date.DiffMonths"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffMonths ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in integer months, excluding years
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Notes:			Numbers are returned with the appropriate sign when _date_2 < _date_1
// Example:		date.DiffMonths ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = -6

Let(
  [
    _sign = Sign ( _date_2 - _date_1 );

    _d_1 = Min ( _date_1 ; _date_2 ) ;
    _d_2 = Max ( _date_1 ; _date_2 ) ;

    _months = Mod (
      Month ( _d_2 ) - Month ( _d_1 ) - ( Day ( _d_2 ) < Day ( _d_1 ) );
      12
    )
  ];

  _months * _sign
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="36" name="date.DiffString"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffString ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in english.
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Example:		date.Difference ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = "8 years, 6 months, and 21 days"

Let (
  [
    _years		= Abs ( date.DiffYears ( _date_1 ; _date_2 ) ) ;
    _months	= Abs ( date.DiffMonths ( _date_1 ; _date_2 ) ) ;
    _days		= Abs ( date.DiffDays ( _date_1 ; _date_2 ) ) ;

    _years_label = Case (
      _years = 1	; "year"
			; "years"
    ) ;

    _months_label = Case (
      _months = 1	; "month"
				; "months"
    ) ;

    _days_label = Case (
      _days = 1	; "day"
			; "days"
    ) ;

    _result =	_years & _years_label &
			_months & _months_label &
			_days & _days_label
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="37" name="date.DiffYears"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.DiffYears ( _date_1; _date_2 )
// Purpose:		Return the difference between two dates in integer years
// Parameters:		_date_1:	The earlier date
//				_date_2:	The latter 	date
// Version:		1.0 written 2006 by Winfried Huslik
//				1.1 edited 15-11-29 by Charles Ross, break into four separate functions
// Notes:			Numbers are returned with the appropriate sign when _date_2 < _date_1
// Example:		date.DiffYears ( Date ( 1; 1; 2015 ); Date ( 6; 10; 2006 ) ) = -8

Let(
  [
    _sign = Sign ( _date_2 - _date_1 );

    _d_1 = Min ( _date_1 ; _date_2 ) ;
    _d_2 = Max ( _date_1 ; _date_2 ) ;

    _years = Year ( _d_2 ) - Year ( _d_1 )
      - ( ( Month ( _d_2 ) - ( Day ( _d_2 ) < Day ( _d_1 ) ) ) < Month ( _d_1 ) )
  ];

  _years * _sign
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="38" name="date.EndOfMonth"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.EndOfMonth ( _date )
// Purpose:		Return the last day of the month containing _date
// Parameters:		_date:	A generic date.
// Version:		1.1 written 15-03-08 by Charles Ross
// Example:		date.EndOfMonth ( Date ( 2; 1; 2015 ) ) = Date ( 2; 28; 2015 )

Let(
  [
    _month		= Month ( _date );
    _year		= Year ( _date )
  ];

  Date ( _month + 1; 1; _year ) - 1
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="39" name="date.FirstDayOfWeek"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.FirstDayOfWeek ( _date; _week_start )
// Purpose:		Return the date of the week's start that contains the given date and starts on the
//				given week start (Sun=0, Mon=1, …)
// Parameters:		_date:			The date for which to find the beginning of the week.
//				_week_start:		The weekday to use as the first day of the week.
// Version:		1.0 written 15-04-14 by Matt Wills, Virtual Vermont
// Example:		date.FirstDayOfWeek ( Date ( 3; 17; 2015 ) ; date.Monday ) = Date ( 3; 16; 2015 )

_date - ( DayOfWeek ( _date ) - ( _week_start + 1 ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="40" name="date.Holidays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.Holidays ( _year )
// Purpose:		Returns a let-notation structure of the year's holiday list names and dates.
// Version:		1.0.0 - Charles Ross - 17-12-09
// Notes:			This version of this function includes observed U.S. federal holidays. It should be
//				modified to include any holidays observed by the users of each particular system.
// Todo:			The logic for all of these holidays falls into two categories, holidays that are on a
//				specific day (7/4, 12/25) and holidays that fall on the Xth weekday of the month
//				(Martin Luther King Jr on the 3rd Monday in January) and so the algorithm for all
//				of the holidays are very similar. These algorithms should be broken into two
//				separate custom functions.
// Example:		date.BusinessHolidays ( 2015 ) = "1/1/2015¶1/19/2015¶2/16/2015¶5/25/2015¶"  &
//				  "7/3/2015¶9/7/2015¶10/12/2015¶11/11/2015¶11/26/2015¶12/25/2015"

Let (
  [
    _new_years = Date ( 1 ; 1 ; _year ) ;
    
    // Martin Luther King, Jr. Day (3rd Monday in January)
    _mlkj_day = Date ( 1 ; 15 ; _year ) 
      + Choose ( DayOfWeek ( Date ( 1 ; 1 ; _year ) ) - 1;
        1 ; 0 ; 6 ; 5 ; 4 ; 3 ; 2
      ) ;
      
    // Washington's Birthday (3rd Monday in February)
    _washington_bday = Date ( 2 ; 15 ; _year )  // earliest possible
      + Choose ( DayOfWeek ( Date ( 2; 1; _year ) ) - 1 ;
        1 ; 0 ; 6 ; 5 ; 4 ; 3 ; 2  // adjust for day of week of month start
      ) ;

    _easter = let.Get ( data.Easters ; _year ) ;
    
    // Memorial Day (last Monday in May)
    _memorial_day = Date ( 5 ; 25 ; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 5 ; 31 ; _year ) ) - 1 ;
        0 ; 6 ; 5 ; 4 ; 3 ; 2 ; 1  // adjust for day of week of month end
      ) ;
      
    _independence_day = Date ( 7 ; 4 ; _year ) ;
    
    // Labor Day (1st Monday in September)
    _labor_day = Date ( 9 ; 1 ; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 9 ; 1 ; _year ) ) - 1 ;
        1 ; 0 ; 6 ; 5 ; 4 ; 3 ; 2  // adjust for day of week of month start
      ) ;
    
    // Columbus Day (2nd Monday in October)
    _columbus_day = Date ( 10 ; 8 ; _year )  // earliest possible
      + Choose (
        DayOfWeek ( Date ( 10 ; 1 ; _year ) ) - 1 ;
        1 ; 0 ; 6 ; 5 ; 4 ; 3 ; 2  // adjust for day of week of month start
      ) ;
    
    // Veterans Day (11 Mov)
    _veterans_day = Date ( 11 ; 11 ; _year ) ;
    
    // Thanksgiving Day (4th thursday in November)
    _thanksgiving = Date ( 11 ; 22 ; _year )  // earliest possible date
      + Choose (
        DayOfWeek ( Date ( 11 ; 1 ; _year ) ) - 1 ;
        4 ; 3 ; 2 ; 1 ; 0 ; 6 ; 5  // adjust for day of week of month start
      ) ;
      
    _christmas = Date ( 12 ; 25 ; _year )
  ] ;

  let.Set ( "New Years Day" ; _new_years ) &
  let.Set ( "Martin Luther King Jr. Day" ; _mlkj_day ) &
  let.Set ( "Washington's Birthday" ; _washington_bday ) &
  let.Set ( "Easter" ; _easter ) &
  let.Set ( "Memorial Day" ; _memorial_day ) &
  let.Set ( "Labor Day" ; _labor_day ) &
  let.Set ( "Columbus Day" ; _columbus_day ) &
  let.Set ( "Veterans Day" ; _veterans_day ) &
  let.Set ( "Thanksgiving" ; _thanksgiving ) &
  let.Set ( "Christmas" ; _christmas )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="41" name="date.MonDDYYYY"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.MonDDYYYY ( _date )
// Purpose:		Return date string in the form of Mon DD, YYYY
// Parameters:		_date:	The date to format
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 18-06-27
// Example:		date.MonDDYYYY ( Date ( 6 ; 27 ; 2018 ) = "Jun 6, 2018)"

timestamp.Format ( Timestamp ( _date ; 0 ) ; "%b%e, %Y" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="42" name="date.MonthNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.MonthNumber ( _month_name )
// Purpose:		Return the month number given a month name.
// Parameters:		_month_name:	The name of the month to get the number of
// Version:		1.0 - David Head - 10-05-15
// Example:		sample = result

Position ( 
  "xxJanFebMarAprMayJunJulAugSepOctNovDec" ; 
  Left ( _month_name ; 3 ) ; 
  1 ; 
  1 
) / 3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="43" name="date.Seconds"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.Seconds ( _amount; _unit )
// Purpose:		Return a numerical amount of seconds based on the supplied amount in the
//				units specified
// Parameters:		_amount:		The amount of time in the specified units.
//              		_units:		The units of measurement, one of "minutes", "hours", "days",
//							"months", or "years".
// Version:		1.0 written 11-09-15 by Matt Petrowsky
// Notes:			Because of variations in months and years, these return values are approximate.
//				If you need exact differences between date values you'll need to use FileMaker's
//				date functions.
// Example:		date.Seconds ( 5 ; "days" ) = 432000

Let (
  [
    _seconds = Choose (
      Int ( Position ( "minutes.hours...days....months..years..."; _unit; 1; 1 ) / 8 );

      60; 
      60 * 60;
      60 * 60 * 24;
      31556926 / 12;
      31556926
    )
  ];

  _seconds * _amount
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="44" name="date.StartOfMonth"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.StartOfMonth ( _date )
// Purpose:		Returns the date of the first day of the month in which _date falls in.
// Parameters:		_date:	The date to get the first of the month for
// Version:		1.0 - Charles Ross - 17-06-24
// Example:		date.StartOfMonth ( Date ( 6 ; 16 ; 1971 ) ) = Date ( 6 ; 1 ; 1971 )

Date ( Month ( _date ) ; 1 ; Year ( _date ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="45" name="date.TextualDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.FullMonthName
// Purpose:		Format a date in full text form (i.e., "January 1, 2017")
// Parameters:		_date:	The date to format
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		date.FullMonthName ( Date ( 1 ; 1 ; 2017 ) ) = "January 1, 2017"

timestamp.Format ( _date ; "%B%e, %Y" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="46" name="date.WeekdayCount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.WeekdayCount ( _start ; _end ; _ignore )
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 written 17-03-08 by Charles Ross
// Notes:			Based on algorithm from jej@igeek.co.uk, 12-09-25
// Todo:			To dos
// Example:		sample = result

ValueCount ( range.Weekdays ( _start ; _end ; _ignore ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="47" name="date.YYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.YYMMDD ( _date )
// Purpose:		Converts a date value into the YYMMDD format.
// Parameters:		_date:	The date to format.
// Requirements: 	date.Format
// Version:		1.0 - Charles Ross - 19-08-02
// Example:		sample = result

timestamp.Format ( GetAsTimestamp ( _date ) ; "%y%m%d" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="48" name="date.YYYYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// date.YYYYMMDD ( _date _
// Purpose:		Converts a date value into the YYYYMMDD format.
// Parameters:		_date:	The date to format.
// Requirements: 	date.Format
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

timestamp.Format ( GetAsTimestamp ( _date ) ; "%Y%m%d" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="49" name="dev_____ Developer _________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that generally are only useful to the developer, making his or her life a bit easier, hopefully.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="50" name="dev.ClearVars"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.ClearVars ( _vars )
// Purpose:		Takes a list of variables and sets all of them to an empty string.
// Parameters:		_vars:	The list of variables to clear. Should include single or double dollar signs.
// Requirements: 	list.First
//				list.Rest
//				dev.SetVarByName
//				devp.Nil
// Version:		1.0 written 17-02-23 by Charles Ross
// Todo:			Perhaps allow calls to exclude dollar sign and assume when there is none that a
//				local variable is meant.
// Example:		sample = result

Case (
  ValueCount ( _vars ) = 0 ; dev.Nil ;

  Let (
    [
      _var	= list.First ( _vars ) ;
      _vars	= list.Rest ( _vars ) ;

      _ = dev.SetVarByName ( _var ; dev.Nil )
    ] ;

    dev.ClearVars ( _vars )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="51" name="dev.ComparisonVersion"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.ComparisonVersion ( _version )
// Purpose:		Translate a version number into one that can be compared numerically.
// Parameters:		_version: The version to translate
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-11
// Notes:			Notes
// Todo:			To dos
// Example:		dev.ComparisonVersion ( "1.2.3" ) = 10203

Let (
  [
    _list = list.CreateList ( _version ; "." ) ;

    _compare = ( GetValue ( _list ; 1 ) * 10000 )
      + ( GetValue ( _list ; 2 ) * 100 )
      + GetValue ( _list ; 3 )
  ] ;

  _compare
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="52" name="dev.CreatedInfo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.CreatedInfo
// Purpose:		Returns a string that reports in human-readable format the details of record creation
// Parameters:		_table:	The name of the table to report on
// Requirements: 	timestamp.ClockTime
//				Standard naming conventions for relevant fields
// Version:		1.0 - Jim Feuerstein
// Example:		sample = result

"Created by " & GetField ( _table & "::zzzCreateBy" ) &
 " on " & GetField ( _table & "::zzzCreateDate" ) &
" at " & timestamp.ClockTime ( GetField ( _table & "::zzzCreateTime" ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="53" name="dev.DataTypeMustBeText"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.DataTypeMustBeText ( _value )
// Purpose:		Returns true if the data type cannot be other than text.
// Parameters:		_value:	The value to test
// Requirements:	devp.Nil
// Version:		1.0 written 17-02-24 by Charles Ross
// Notes:			Primarily used for the letn.Set function.
// Todo:			Figure out if this function should be a utility function for the letn group.
// Example:		sample = result

( _value = dev.Nil )
  or ( _value = "?" )
  or ( GetAsNumber ( _value ) = "?" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="54" name="dev.Default"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Default
// Purpose:		If the value is set, return it, else return a default value.
// Parameters:		_value:	The value to test against and return if set.
//				_default:	What to return if value is empty.
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		dev.Default ( dev.Nil ; "default" ) = "default"
//				  and dev.Default ( "value" ; "default" ) = "value"

Case (
  dev.IsSet ( _value )	; _value
				; _default
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="55" name="dev.FieldComment"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.FieldComment ( _field )
// Purpose:		Returns the comment of the field, assuming it's in the current file.
// Parameters:		_field:	The field to return the comment of.
// Version:		1.0 - Charles Ross - 18-10-27
// Notes:			Just a wrapper for `FieldComment` that removes the need for the first parameter.
// Example:		sample = result

FieldComment ( Get ( FileName ) ; GetFieldName ( _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="56" name="dev.GetFieldName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.GetFieldName ( _field )
// Purpose:		Returns only the field name, i.e., without the table occurrence name
// Parameters:		_field: The field to return the name of.
// Requirements:	dev.ParseQualifiedField
// Version:		1.0.0 - Kevin Frank - 11-04-18
//				1.0.1 - Charles Ross - 17-11-27 - Broke out logic common to `dev.Get*Name`
// Notes:			GetFieldName() returns the relationship plus the field name.
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				dev.GetFieldName ( TableOccurrence::field_name ) = "field_name"

dev.ParseQualifiedField ( GetFieldName ( _field ) ; "field" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="57" name="dev.GetTableName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.GetTableName ( _field )
// Purpose:		Returns only the table name, i.e., without the field name
// Parameters:		_field: The field to return the table name for
// Requirements:	dev.ParseQualifiedField
// Version:		1.0.0 - Kevin Frank - 11-04-18
//				1.0.1 - Charles Ross - 17-11-27 - Broke out logic common to `dev.Get*Name`
// Notes:			GetFieldName() returns the relationship plus the field name.
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				dev.GetTableName ( TableOccurrence::field_name ) = "TableOccurrence"

dev.ParseQualifiedField ( GetFieldName ( _field ) ; "table" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="58" name="dev.Housekeeping"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Housekeeping
// Purpose:		Returns a textual description of the current record's stats
// Requirements: 	date.TextualDate
//				timestamp.ClockTime
// Version:		1.0 - Charles Ross - 17-09-10
// Notes:			Housekeeping fields are hard coded and so must conform to the convention.
// Example:		sample = result

Let (
  [
    _id = "Record ID: " & TextStyleAdd ( Evaluate ( "id" ) ; Bold ) ;

    _date = date.TextualDate ( Evaluate ( "created_date" ) ) ;
    _time = timestamp.ClockTime ( Evaluate ( "created_time" ) ) ;
    _user = TextStyleAdd ( Evaluate ( "created_by" ) ; Bold ) ;

    _created_msg = "Created by " & _user & " on " & _date & " at " & _time ;

    _date = date.TextualDate ( Evaluate ( "modified_date" ) ) ;
    _time = timestamp.ClockTime ( Evaluate ( "modified_time" ) ) ;
    _user = TextStyleAdd ( Evaluate ( "modified_by" ) ; Bold ) ;

    _modified_msg = "Last Modified by " & _user & " on " & _date & " at " & _time
  ] ;

  _id & "¶¶" & _created_msg & "¶¶" & _modified_msg
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="59" name="dev.IsDataType"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsDataType ( _value ; _type )
// Purpose:		Returns True (1) if the passed value is of the passed data type.
// Parameters:		_value:	The value to test
//				_type:	the type to test against, should be "timestamp", "time", or "date"
// Version:		1.0 written 17-02-24 by Charles Ross
// Notes:			Primarily used within the letn.Set function
// Todo:			Figure out if this function should be a utility function for the letn group.
// Example:		dev.IsDataType ( Get ( CurrentDate ) ; "date" ) = 1

Let (
  [
    _value_plus_one = GetAsText ( _value + 1 ) ;

    _value = Case (
      _type = "timestamp"	; GetAsTimestamp ( _value ) ;
      _type = "time"		; GetAsTime ( _value ) ;
      _type = "date"		; GetAsDate ( _value )
    ) ;

    _result = ( GetAsText ( _value + 1 ) = _value_plus_one )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="60" name="dev.IsDeveloper"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsDeveloper
// Purpose:		Returns true if the current user is logged in with full access.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-08
// Example:		// When the user is logged in with a full access account…
//				dev.IsDeveloper = True

Get ( AccountPrivilegeSetName ) = "[Full Access]"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="61" name="dev.IsDuplicateRecord"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsDuplicateRecord ( _match_field )
// Purpose:		Returns `True` if the contents of the match field on the current record is the same as that one the previous record
// Parameters:		_match_field:	The field to use as a comparison for duplicate records
// Version:		1.0 - Charles Ross - 19-07-18
// Todo:			To dos
// Example:		sample = result

_match_field = GetNthRecord ( _match_field ; Get ( RecordNumber ) - 1 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="62" name="dev.IsSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.IsSet ( _value )
// Purpose:		A convenience function for easier readability when needing to check that a value is
//				not empty.
// Parameters:		_value:	The value to check.
// Version:		1.0 - The Scarpetta Group - 15-04-14
// Example:		// Assuming that $_value has non-empty contents:
//				dev.IsSet ( $_value ) = 1

not IsEmpty ( _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="63" name="dev.MaxSerial"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.MaxSerial ( _field )
// Purpose:		Returns the highest numeric primary key for the given field and table.
// Parameters:		_field:	The field to return the maximum serial number for
// Version:		1.0 - Charles Ross - 17-06-17
// Example:		sample = result

Let (
  [
    _sql = List (
      "SELECT MAX(_primary_key)" ;
      "FROM _table"
    ) ;

    _primary_key	= sql.QuotedFieldName ( _field ) ;
    _table			= sql.QuotedTableName ( _field ) ;

    _sql = Substitute (
      _sql ;
      [ "_primary_key"	; _primary_key	] ;
      [ "_table"		; _table		]
    ) ;

    _result = ExecuteSQL ( _sql ; "" ; "" )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="64" name="dev.ModifiedInfo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.ModifiedInfo
// Purpose:		Returns a string that reports in human-readable format the details of record modification
// Parameters:		_table:	The name of the table to report on
// Requirements: 	timestamp.ClockTime
//				Standard naming conventions for relevant fields
// Version:		1.0 - Jim Feuerstein
// Example:		sample = result

"Last modified by " & GetField ( _table & "::zzzModBy" ) &
 " on " & GetField ( _table & "::zzzModDate" ) &
" at " & timestamp.ClockTime ( GetField ( _table & "::zzzModTime" ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="65" name="dev.NextSerialValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _largest = list.Last ( SortValues ( ExecuteSQL ( "SELECT \"_id\" FROM \"" & _table & "\"" ; "" ; "" ) ) ) ;
    _table = Left ( _largest ; 3 ) ;
    _number = GetAsNumber ( _largest ) + 1 ;
    _padding = Length ( _largest ) - 3 ;
    _next = text.PadZeros ( _number ; _padding ) ;

    _ = ""
  ] ;

  _table & _next
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="66" name="dev.NextValueListItem"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.NextValueListItem ( _value_list ; _current_item ; _loop )
// Purpose:		Return the next item in a value list given the current item.
// Parameters:		_value_list:	The value list to get the next item from
//				_current_item:	The current item to get the next one from
//				_loop:		Whether to loop back to the begining of the value
//							list if the current item is the last one
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 18-10-29
// Example:		sample = result

list.NextValue ( ValueListItems ( Get ( FileName ) ; _value_list ) ; _current_item ; _loop )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="67" name="dev.Nil"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Nil
// Purpose:		Provides a human-readible storage for an empty string.
// Version:		1.0 written 15-03-11 by Charles Ross
// Note:			This is meant to be used to make it clear when something is being set to an empty
//				string in order to blank it out, especially variables, but is also useful for comparisons.
// Example		dev.Nil = ""

""]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="68" name="dev.PanelIsFront"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.PanelIsFront ( _panel_name )
// Purpose:		Returns True if the named tab or slide panel is frontmost
// Parameters:		_panel_name: The name of the tab panel to check for
// Author:			1.0 - Charles Ross - 15-03-08
// Example:		// Assuming that a single panel with two tabs, "tab_1" and "panel_1" is on the current layout and the
//				// first one is active...
//				dev.PanelIsFront ( "tab_1" ) and ( not devp.PanelIsFront ( "panel_1" ) )

GetLayoutObjectAttribute ( _panel_name; "isFrontTabPanel" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="69" name="dev.ParseQualifiedField"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.ParseQualifiedField ( _qualified_field ; _table_or_field )
// Purpose:		Returns either just the table name or field name given a qualified field name.
// Parameters:		_qualified_field:	The qualified field name
//				_table_or_field:		Either "table" or "field", indicating which part to return.
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-11-27
// Example:		sample = result

Let (
  [
    _list			= list.CreateList ( _qualified_field ; "::" ) ;
    _index			= list.ValuePosition ( _table_or_field ; List ( "table" ; "field" ) ; 1 )
  ];

  GetValue ( _list; _index )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="70" name="dev.PortalSize"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.PortalSize
// Purpose:		Returns the portal height given the constraints of the row height and minimum rows
//				which are hardcoded. Edit this to use layout checks if different layouts have different
//				constraints.
// Version:		1.0 - Charles Ross - 17-09-10
// Example:		sample = result

Let (
  [
    _row_height	= 58.5 ;
    _min_rows	= 10 ;

    _height	= GetLayoutObjectAttribute ( "portal_navigationRecordList" ; "height" ) ;
    _zoom	= Get ( WindowZoomLevel ) ;

    _prelim = Round ( _height / ( _row_height * _zoom / 100 ) ; 0 )
  ] ;

  Max ( _prelim ; _min_rows )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="71" name="dev.RecordCount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.RecordCount ( _table )
// Purpose:		Returns the number of records in the given table.
// Parameters:		_table:	The table to return the record count of
// Version:		1.0 - Charles Ross - 17-07-21

ExecuteSQL ( "SELECT COUNT(*) FROM " & Quote ( _table ) ; dev.Nil ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="72" name="dev.RecordInfo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.RecordInfo
// Purpose:		Returns a string that reports in human-readable format the details of record ID
// Parameters:		_table:	The name of the table to report on
// Requirements: 	timestamp.ClockTime
//				Standard naming conventions for relevant fields
// Version:		1.0 - Jim Feuerstein
// Example:		sample = result

"Record ID: " & GetField ( _table & "::__id" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="73" name="dev.RegExMatch"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.RegExMatch ( _string; _pattern )
// Purpose:		Returns true if the pattern is contained in the string.
// Parameters:		_string:	The string to search for the pattern in.
//				_pattern:	The pattern to search for.
// Requirements: 	plug.RegisterScriptMasterFunction
//				The ScriptMaster plugin, written with version 4.32.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-04-16
//				1.1 edited to use plug.RegisterScriptMasterFunction.
// Example:		dev.RegExMatch ( "foo";	"foo" )
//				and not	dev.RegExMatch ( "bar";	"foo" )
//				and 		dev.RegExMatch ( "My email address is chivalry@mac.com.";
//							"(?i)\b[\w._%+-]+@[a-z\d.-]+\.[a-z]{2,4}\b" )

Let (
  [
    _signature = "dev_RegExMatch( source ; regex )";
    _code = "
/*lang=groovy*/¶
import java.util.regex.*¶
¶
Pattern pattern = Pattern.compile( regex );¶
Matcher matcher = pattern.matcher( source );¶
¶
return matcher.find();
";
    _eval = Substitute (
      _signature;
      [ "source";	Quote ( _source )	];
      [ "regex";	Quote ( _regex )	]
    )
  ];

  Case (
    plugin.RegisterScriptMasterFunction ( _signature; _code; False );
    Evaluate ( _eval )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="74" name="dev.SetVarByName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.SetVarByName ( _variable_name ; _value )
// Purpose:		Given the name of a global or local variable, sets it to the passed value.
// Parameters:		_var_name:	The name of the variable to set
//				_value:		The value to give to the variable
// Requirements:	let.Enclose
// Version:		1.0 written 15-06-22 by Charles Ross
//				1.1 edited 17-02-25 by Charles Ross; use letn.EncloseInLet
// Example:		dev.SetVarByName ( "$_var" ; "foo" ) and ( $_var = "foo" )

Let (
  [
    _value	= Quote ( _value ) ;
    _code	= let.Enclose ( _var_name & " = " & _value & " ;" ) ;

    _result = Evaluate ( _code )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="75" name="dev.Show"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Show ( _test )
// Purpose:		A convenience function for specifying when objects should be shown rather than when
//				they should be hidden.
// Parameters:		_test:	A boolean value that when true shows the object.
// Version:		1.0 - Charles Ross - 17-11-29
// Example:		sample = result

not _test]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="76" name="dev.SystemDrive"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.SystemDrive
// Purpose:		FileMaker Server 16 returns an empty string for `Get ( SystemDrive )`. This function returns what
//				that function used to return.
// Version:		1.0 - Charles Ross - 17-08-10
// Example:		// When run within FileMaker Pro…
//				Get ( SystemDrive ) = dev.SystemDrive

Let (
  [
    _doc = Get ( DocumentsPath ) ;
    _comps = Substitute ( _doc ; "/" ; "¶" ) ;
    _name = GetValue ( _comps ; 2 ) ;
    _system_drive = "/" & _name & "/"
  ] ;

  _system_drive
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="77" name="dev.Timer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Timer ( _name; _action )
// Purpose:		Manipulates the named timer with the given action, storing timers in a global variable.
// Parameters:		_name:	The name of the timer to perform the action on.
//				_action:	Which action to perform.
// Requirements: 	let.Get
//				let.Set
//				devp.Nil
// Version:		1.0 - Arnold Kegebein - 10-06-01
//				1.1 - Charles Ross - 17-02-10; replaced kege functions with letn.
// Notes:			If the timer exiss already, returns the difference between the timer's start and the
//				current time.
//				http://www.kegebein.net/blog/2010/06/unlimited-timer/
// Example:		// With the side effect that the timer is stored for future use.
//				dev.Timer ( "timer"; "start" ) & dev.Timer ( "timer"; "stop" ) = "0:00:00"

Let(
  [
    _now = timestamp.LocalMilliseconds ;
    _timer = let.Get ( $$_TIMR_TIMER ; _name ) ;

    _start = let.Get ( _timer ; "start" ) ;
    _stop = let.Get ( _timer ; "stop" ) ;
    _stop = Case(
      IsEmpty( _stop );		_now;
      					_stop
    );

    _diff = Case(
      IsEmpty( _start );		dev.Nil;
      					_stop - _start
    );

    _timer = Case(
      _action = "start";
      let.Set ( "start" ; _now ) ;

      _action = "stop" and IsEmpty( _start );
      let.Set ( "start" ; _stop ) & let.Set ( "stop" ; _stop ) ;

      _action = "stop";
      let.Set ( "start" ; _start ) & let.Set ( "stop" ; _stop )
    );

    $$_TIMR_TIMER = Case(
      _action = "start" or _action = "stop";
      let.Set ( _name ; _timer ) ;

      _action = "delete";
      let.Set ( _name ; dev.Nil ) ;

      $$_TIMR_TIMER
    )
  ];

  _diff
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="78" name="dev.Toggle"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// dev.Toggle ( _existing ; _new )
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 18-01-10
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  _existing = _new	; dev.Nil
				; _new
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="79" name="err_____ Error Numbers _____________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that assist with error handling, generally by giving names to error numbers. Not every error
// number will be represented here, only those which have been used at least once in some solution.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="80" name="err.CannotModifyAdminAccount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.CannotModifyAdminAccount
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.CannotModifyAdminAccount = 217

217]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="81" name="err.CommandUnavailable"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.CommandUnavailable
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.CommandUnavailable = 3

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="82" name="err.ConnectionFailed"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.ConnectionFailed
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.ConnectionFailed = 1631

1631]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="83" name="err.FieldIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FieldIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.FieldIsMissing = 102

102]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="84" name="err.FileIsLocked"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FileIsLocked
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.CannotModifyAdminAccount = 300

300]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="85" name="err.FileIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FileIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.FileIsMissing = 100

100]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="86" name="err.FindCriteriaEmpty"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.FindCriteriaEmpty
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.FindCriteriaEmpty = 400

400]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="87" name="err.GenericCalcError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.GenericCalcError
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-11-25 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.GenericCalcError = 1200

1200]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="88" name="err.HostExceedsCapacity"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.HostExceedsCapacity
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.HostExceedsCapacity = 812

812]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="89" name="err.InsufficientPrivileges"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err. InsufficientPrivileges
// Purpose:		Returns the error number for the named error
// Version:		1.0 - Charles Ross - 17-03-10
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err. InsufficientPrivileges = 9

9]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="90" name="err.InvalidAccountOrPassword"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidAccountOrPassword
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.InvalidAccountOrPassword = 212

212]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="91" name="err.InvalidPrivilegeSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidPrivilegeSet
// Purpose:		Custom error number for missing privilege set.
// Version:		1.0 written 17-06-20 by Charles Ross
// Notes:			Custom error numbers begin at 10000
// Example:		err.InvalidPrivilegeSet = 10001

10001]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="92" name="err.InvalidUserAccount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidUserAccount
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.InvalidUserAccount = 213

213]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="93" name="err.InvalidUserCredentials"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.InvalidUserCredentials
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.InvalidUserCredentials = 212

212]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="94" name="err.LayoutIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.LayoutIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.LayoutIsMissing = 105

105]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="95" name="err.NameExists"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NameExists
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NameExists = 12

12]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="96" name="err.NameNotValid"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NameNotValid
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-11-25 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NameNotValid = 11

11]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="97" name="err.NoError"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NoError
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NoError = 0

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="98" name="err.NoRecordsFound"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.NoRecordsFound
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.NoRecordsFound = 401

401]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="99" name="err.PrivilegeSetMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.PrivilegeSetMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.PrivilegeSetMissing = 109

109]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="100" name="err.RecordMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.RecordMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 18-04-23 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.RecordMissing = 101

101]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="101" name="err.RelationshipMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.RelationshipIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.RelationshipIsMissing = 103

103]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="102" name="err.ScriptIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.ScriptIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.ScriptIsMissing = 104

104]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="103" name="err.TableIsMissing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.TableIsMissing
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-06-21 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.TableIsMissing = 106

106]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="104" name="err.TooManyLoginAttempts"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.TooManyLoginAttempts
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.TooManyLoginAttempts = 214

214]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="105" name="err.UnspportedExcelFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UnspportedExcelFormat
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-03-11 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UnspportedExcelFormat = 730

730]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="106" name="err.UserAccountInactive"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UserAccountInactive
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UserAccountInactive = 210

210]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="107" name="err.UserAccountPasswordDoesNotExist"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UserAccountPasswordDoesNotExist
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 17-04-20 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UserAccountPasswordDoesNotExist = 213

213]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="108" name="err.UserCanceledAction"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// err.UserCanceledAction
// Purpose:		Returns the error number for the named error
// Version:		1.0 written 15-04-13 by Charles Ross
// Notes:			Meant to be compared with Get ( LastError )
// Example:		err.UserCanceledAction = 1

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="109" name="geo_____ Geolocation _______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Geolocation functions]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="110" name="geo.CoordDistance"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// geo.CoordDistance ( lat_1 ; long_1 ; lat_2 ; long_2 )
// Purpose:		Return distance (in miles) between two points on earth
// Parameters:		_lat_1:	Latitude of first coordinate in degrees
//				_long_1:	Longitude of first coordinate in degrees
//				_lat_2:	Latitude of second coordinate in degrees
//				_long_2:	Longitude of second coordinate in degrees
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 18-04-05
// Notes:			https://dbservices.com/articles/filemaker-radius-search/
//				Original version by Nate Williams

Let (
  [
    _earth_radius = 3963.168 ;

    _lat_1		= Radians (  _lat_1 ) ;
    _long_1		= Radians (  _long_1 ) ;
    _lat_2		= Radians ( _lat_2 ) ;
    _long_2		= Radians ( _long_2 ) ;


    _dist = Acos ( Cos ( _lat_1 ) * Cos ( _long_1 ) * Cos ( _lat_2 ) * Cos ( _long_2 ) + Cos ( _lat_1 ) * Sin ( _long_1 ) * Cos ( _lat_2 ) * Sin ( _long_2 ) + Sin ( _lat_1 ) * Sin ( _lat_2 ) ) * _earth_radius
  ] ;

  _dist
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="111" name="housekeeping_____ Housekeeping Overrides ___________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions to manipulate JSON strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="112" name="housekeeping.IsSuspended"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// housekeeping.IsSuspended
// Purpose:		Check a global variable that indicates housekeeping fields should not be updated
// Version:		1.0 - Charles Ross - 19-08-08
// Example:		sample = result

$$_SUSPEND_HOUSEKEEPING_UPDATES = True]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="113" name="housekeeping.Resume"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// housekeeping.Resume
// Purpose:		Clear a global variable that indicates housekeeping fields should not be updated
// Version:		1.0 - Charles Ross - 19-08-08
// Example:		sample = result

Let ( $$_SUSPEND_HOUSEKEEPING_UPDATES = dev.Nil ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="114" name="housekeeping.Suspend"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// housekeeping.Suspend
// Purpose:		Set a global variable that indicates housekeeping fields should not be updated
// Version:		1.0 - Charles Ross - 19-08-08
// Example:		sample = result

Let ( $$_SUSPEND_HOUSEKEEPING_UPDATES = True ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="115" name="json_____ JSON Manipulation ________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions to manipulate JSON strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="116" name="json.Assign"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.Assign ( _json )
// Purpose:		Assigns JSON keys to local variables with given values.
// Parameters:		_json:	The JSON to parse
// Version:		1.0 - Charles Ross - 17-05-11
// Example:		Let (
//				  _json = json.assign ( JSONSetElement ( "" ; "foo" ; "bar" ; JSONString ) ) ;
//				  $foo = "bar"
//				)

Case (
  ValueCount ( JSONListKeys ( _json ; dev.Nil )  ) = 0 ;
  dev.Nil ;

  Let (
    [
      _keys		= JSONListKeys ( _json ; dev.Nil ) ;
      _key		= list.First ( _keys ) ;
      _value		= JSONGetElement ( _json ; _key ) ;
      _json		= JSONDeleteElement ( _json ; _key ) ;

      _calc = "Let ( $" & _key & " = " & Quote ( _value ) & " ; dev.Nil )" ;
      _ = Evaluate ( _calc )
    ] ;

    json.Assign ( _json )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="117" name="json.ContainerObject"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.ContainerObject ( _container )
// Purpose:		Encodes container data as a JSONObject
// Parameters:		_container:	The container data to encode.
// Version:		1.0 - Jeremy Bante - 17-04-16
//				1.1 - Jeremy Bante - 17-04-27 - Using Base64EncodeRFC to improve speed, implementing a recommendation by Dan Smith
// Example:		sample = result

JSONSetElement ( dev.Nil ;
  [ "filename"	; GetContainerAttribute ( _container ; "filename" ) ; JSONString ] ;
  [ "base64"	; Base64EncodeRFC ( 4648 ; _container ) ; JSONString ]
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="118" name="json.GetBoolean"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetBoolean ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data and casts it to a boolean
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	requirements
// Version:		1.0 - Jeremy Bante - 17-05-11
// Example:		sample = result

Let (
  [
    _value		= JSONGetElement ( _json ; _key_index_or_path ) ;
    _error		= ( Left ( _value ; 1 ) = "?" ) ;
    _not_bool	= ( _value ≠ False ) and ( _value ≠ True )

  ] ;

  Case (
    _error		; _value ;
    _not_bool	; "? Value is not a boolean¶  " & _value
			; _value
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="119" name="json.GetContainer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetContainer ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data, and casts it as FileMaker container data
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Version:		1.0 - Jeremy Bante - 17-04-16
// Notes:			Assumes that the _key_index_or_path refers to a JSONObject encoded according to
//				the format of the `json.ContainerObject` function.
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?" ;

    _parsed = Base64Decode (
      JSONGetElement ( _value ; "base64" ) ;
      JSONGetElement ( _value ; "fileName" )
    )
  ] ;

  Case (
    _error	; _value
		; _parsed
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="120" name="json.GetDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetDate
// Purpose:		Parses a value from JSON data, and casts it to a FileMaker date
// Parameters:		_param:	description
// Requirements: 	timestamp.FromISO8601
// Version:		1.0 - Jeremy Bante - 17-04-06
//				1.1 - Jeremy Bante - 17-04-08 - Refactoring
// Notes:			Assumes that the date is encoded as a JSONString formatted according
//				to ISO 8601.
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?"
  ] ;

  Case (
    _error	; _value
		; GetAsDate ( timestamp.FromISO8601 ( _value ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="121" name="json.GetNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetNumber ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data, and casts it to a number
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	requirements
// Version:		1.0 - Jeremy Bante - 17-04-06
//				1.1 - Jeremy Bante - 17-04-08 - Refactoring
//				1.2 - Daniel Smith - 17-04-25 - Add value to result if it's not a number
//				1.3 - Jeremy Bante - 17-04-27 - Omitting input from error result
//				1.4 - Jeremy Bante - 17-04-30 - Revising wording of NaN error result and
//				  re-including parsed value, based on discussion with Dan Smith.
// Example:		sample = result

Let (
  [
    _value		= JSONGetElement ( _json ; _key_index_or_path ) ;
    _error		= ( Left ( _value ; 1 ) = "?" ) ;
    _number	= GetAsNumber ( _value ) ;
    _nan		= IsEmpty ( _number ) and not IsEmpty ( _value )
  ] ;

  Case (
    _error	; _value ;
    _nan	; "? Value is not a number¶  " & _value
		; _number
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="122" name="json.GetTime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.GetTime ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data, and casts it to a FileMaker time
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	timestamp.FromISO8601
// Version:		1.0 - Jeremy Bante - 17-04-16
// Notes:			ssumes that the time is encoded as a JSONString formatted according
//				to ISO 8601
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?"
  ] ;

  Case (
    _error	; _value
		; GetAsTime ( timestamp.FromISO8601 ( _value ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="123" name="json.GetTimestamp"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// json.JSONGetTimestamp ( _json ; _key_index_or_path )
// Purpose:		Parses a value from JSON data and casts it to a FileMaker timestamp.
// Parameters:		_json:			the json to parse
//				_key_index_or_path:	which value to parse out
// Requirements: 	timestamp.FromISO88601
// Version:		1.0 - Jeremy Bante - 17-04-16
// Notes:			Assumes the timestamp is encoded as a JSONString formatted in ISO 8601.
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _value = JSONGetElement ( _json ; _key_index_or_path ) ;
    _error = Left ( _value ; 1 ) = "?"
  ] ;

  Case (
    _error 	; _value
		; timestamp.FromISO8601 ( _value )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="124" name="JSONCreateVarsFromKeys"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[/**
 * @SIGNATURE:
 * JSONCreateVarsFromKeys ( json ; namespace )
 *
 * @PARAMETERS:
 * json - JSON data
 * namespace - Prefix for the variables that are to be created; can be left blank
 *
 * @HISTORY:
 * CREATED on 2017-12-08 by Mislav Kos <mkos@soliantconsulting.com>
 * MODIFIED on 2018-02-18 by Mislav Kos <mkos@soliantconsulting.com> - corrected typecasting portion of the custom function
 *
 * @PURPOSE:
 * Create local variables for all keys belonging to the JSON document's root node.
 * For example, given the following JSON, this custom function will create $id and $color variables: { "id" : "123", "color" : "blue" }
 *
 * @RESULT:
 * This custom function will return an error code as a result.
 * 0 means success or empty JSON.
 * 5 means invalid JSON.
 * 1204 means one of the JSON root keys did not conform to the FileMaker naming restrictions for variable and fields.
 * Pre-16 clients will return "?".
 *
 * @ERRORS:
 * Errors will be indicated in the custom function result using standard FileMaker error codes: https://fmhelp.filemaker.com/help/16/fmp/en/#page/FMP_Help%2Ferror-codes.html.
 *
 * @NOTES:
 * Keys must be named following the same naming restrictions as FileMaker variables and fields: https://fmhelp.filemaker.com/help/16/fmp/en/index.html#page/FMP_Help%2Fnaming-fields.html.
 * 
 * @DEPENDENCIES:
 * Does not require any other custom functions. Requires v16 or later client. Pre-16 clients will return "?".
 */

Case ( 
	IsEmpty ( json ) ; 0 ; // If JSON is empty, return 0 ("no error")
	
	Left ( JSONFormatElements ( json ) ; 1 ) = "?" ; 5 ; // If JSON is invalid, return 5 ("command is invalid")
	
	Let ( [ 
		~keys = JSONListKeys ( json ; "." ) ; // Get keys from JSON document's root node
		~key = GetValue ( ~keys ; ValueCount ( ~keys ) ) // Process keys starting with the last one; otherwise JSON arrays won't process correctly
	] ; 
		If ( 
			IsEmpty ( ~key ) ; 0 ; // If the JSON document's root node doesn't contain any keys, return 0 ("no error")
			
			// Create variable based on key, then delete key from JSON, and then recursively call CF again to process remaining keys
			Let ( [ 
				// Get value for key
				~value = JSONGetElement ( json ; ~key ) ; 
				
				// Ensure correct typecasting of value; without this, everything would get typecast as text
				// This next section was taken from the the # custom function and (I think) was written by Daniel Smith (github.com/dansmith65) and Jeremy Bante (github.com/jbante)
				// See https://github.com/filemakerstandards/fmpstandards/blob/master/Functions/%23Name-Value/%23.fmfn
				~text = GetAsText ( ~value ) ; 
				~number = GetAsNumber ( ~value ) ; 
				~validDate = IsValid ( GetAsDate ( ~text ) ) and not IsEmpty ( ~number ) ; 
				~validTime = IsValid ( GetAsTime ( ~text ) ) and Position ( ~text ; ":" ; 1 ; 1 ) > 0 and not IsEmpty ( ~number ) ;
				~value = Case ( 
					~value = "" or ~value = "?" ; Quote ( ~value ) ;
					~validTime and ~validDate ; "GetAsTimestamp ( " & Quote ( ~value ) & " )" ;
					~validTime ; "GetAsTime ( " & Quote ( ~value ) & " )" ;
					~validDate ; "GetAsDate ( " & Quote ( ~value ) & " )" ;
					~text ≠ GetAsText ( ~number ) ; Quote ( ~value ) ; 
					~number
				) ; 

				
				// Create variable based on key and value (and namespace)
				~error = EvaluationError ( Evaluate ( "Let ( $" & namespace & ~key & " = " & ~value & " ; \"\" ) " ) ) 
			] ; 
				If ( 
					~error ≠ 0 ; ~error ; // If we encountered an error, return the error code and don't bother processing the rest of the keys
					Let ( 
						json = JSONDeleteElement ( json ; ~key ) ; // Delete key from JSON
						JSONCreateVarsFromKeys ( json ; namespace ) // Recursively call custom function to process remaining keys
					)
				)
			)
		)
	)
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="125" name="key _____ Keyboard Codes ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Keyboard code constants.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="126" name="key.Delete"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Delete
// Purpose:		Return the code for the delete key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the delete character…
//				$_char = key.Delete

Char ( key.DeleteCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="127" name="key.DeleteCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.DeleteCode
// Purpose:		Return the code for the delete key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the delete character…
//				Code ( $_char ) = key.DeleteCode

8]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="128" name="key.DownArrow"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.DownArrow
// Purpose:		Return the character for the down arrow key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the down arrow character…
//				$_char = key.DownArrow

Char ( key.DownArrowCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="129" name="key.DownArrowCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.DownArrowCode
// Purpose:		Return the code for the down arrow key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the down arrow character…
//				Code ( $_char ) = key.DownArrowCode

31]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="130" name="key.Enter"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Enter
// Purpose:		Return the code for the enter key (line feed)
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the line feed character…
//				$_char = key.Enter

Char ( key.EnterCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="131" name="key.EnterCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.EnterCode
// Purpose:		Return the code for the enter key (line feed)
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the line feed character…
//				Code ( $_char ) = key.EnterCode

10]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="132" name="key.Escape"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Escape
// Purpose:		Return the code for the escape character
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the escape character…
//				$_char = key.Escape

Char ( key.EscapeCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="133" name="key.EscapeCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.EscapeCode
// Purpose:		Return the code for the escape key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the escape character…
//				Code ( $_char ) = key.EscapeCode

27]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="134" name="key.LineFeed"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.LineFeed
// Purpose:		Return the code for the linefeed
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the linefeed character…
//				$_char = key.LineFeed

Char ( key.LinefeedCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="135" name="key.LinefeedCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.LinefeedCode
// Purpose:		Return the code for the line feed character
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the line feed character…
//				Code ( $_char ) = key.LinefeedCode

10]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="136" name="key.Return"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Return
// Purpose:		Return the code for the return key (carriage return)
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the carriage return character…
//				$_char = key.Return

Char ( key.ReturnCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="137" name="key.ReturnCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.ReturnCode
// Purpose:		Return the code for the return key (carriage return)
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the carriage return character…
//				Code ( $_char ) = key.ReturnCode

13]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="138" name="key.Tab"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.Tab
// Purpose:		Return the code for the tab key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the tab character…
//				$_char = key.Tab

Char ( key.TabCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="139" name="key.TabCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.TabCode
// Purpose:		Return the code for the tab key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the tab character…
//				Code ( $_char ) = key.TabCode

9]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="140" name="key.UpArrow"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.UpArrow
// Purpose:		Return the code for the up arrow key
// Version:		1.0 - Charles Ross - 17-04-21
// Example:		// When $_char holds the up arrow character…
//				$_char = key.UpArrow

Char ( key.UpArrowCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="141" name="key.UpArrowCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.UpArrowCode
// Purpose:		Return the code for the up arrow key
// Version:		1.0 - Charles Ross - 17-04-03
// Example:		// When $_char holds the up arrow character…
//				Code ( $_char ) = key.UpArrowCode

29]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="142" name="key.VerticalTab"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.VerticalTab
// Purpose:		Return the code for the vertical tab character
// Version:		1.0 - Charles Ross - 17-07-28
// Example:		// When $_char holds the vertical tab character…
//				$_char = key.VerticalTab

Char ( key.VerticalTabCode )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="143" name="key.VerticalTabCode"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// key.VerticalTabCode
// Purpose:		Return the code for the vertical tab character
// Version:		1.0 - Charles Ross - 17-07-28
// Example:		// When $_char holds the vertical tab character…
//				Code ( $_char ) = key.VerticalTabCode

11]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="144" name="let_____ Let Notation Functions ___________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for easy manipulation of let notation strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="145" name="let._EscapeComments"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let._EscapeComments ( _text )
// Purpose:		Passes FileMaker calculation code and returns it with comments escaped.
// Parameters:		_text:	The text to escape the comments of.
// Version:		1.0 written 15-11-26 by Charles Ross
// Notes:			Utility function only meant to be called by other functions.
// Example:		sample = result

Quote ( Substitute (
  _text ;
  [ "*/"	; "\*\/"	] ;
  [ "/*"	; "\/\*"	]
) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="146" name="let._IndexedName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let._IndexedName
// Purpose:		Assuming a valid name and index, returns the name with FileMaker's index notation.
// Parameters:		_name:	The name to index
//				_index:	The index to use
// Version:		1.0 written 15-11-26 by Charles Ross
// Notes:			Utility function only meant to be called by other functions.
// Example:		letn.IndexedName ( "name" ; 5 ) = "name[5]"

_name &
Case (
  _index ≠ 1 or IsEmpty ( _name )	; "[" & _index & "]"
							; dev.Nil
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="147" name="let.Array"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Array ( _name ; _index ; _value )
// Purpose:		Serves as syntactic sugar for creating array values in Let notation.
// Parameters:		_name:	The name for the returned name/value pair, can be any value that would be a
//						valid local variable name
//				_index:	A numeric index for a repeating variable.
//				_value:	The value for the returned name/value pair.
// Requirements: 	let.Set
//				let.IndexedName
// Version:		1.0 written 13-07-26 by Jeremy Bante
//				1.1 edited 15-11-26 by Charles Ross, improve readability, use letn.IndexedName.
// Example:		let.Array ( "name" ; 1 ; "foo" ) & let.Array ( "name" ; 2 ; "bar" )
//				  = "$name = \"foo\" ;¶$name[2] = \"bar\" ;¶"

Let (
  [
    _indexed_name = let._IndexedName ( _name ; _index ) ;

    _result = let.Set ( _indexed_name ; _value )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="148" name="let.ArrayFromList"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.ArrayFromList ( _name ; _list )
// Purpose:		Converts a return-delimited list to a Let notation array.
// Parameters:		_name:	The name for the returned name/value pair.
//				_list:		A return-delimited list of values.
// Requirements: 	let.Array
//				dev.ClearVars
// Version:		1.0 written 13-07-26 by Jeremy Bante
//				1.1 edited 15-11-26 by Charles Ross, use more descriptive variable names, restructure
//					recursive code.
// Example:		let.ArrayFromList ( "name" ; List ( "one" ; "two" ; "three" ) )
//				  = "$name = \"one\" ;¶$name[2] = \"two\" ;¶$name[3] = \"three\" ;¶"

Case (
  ( not IsEmpty ( $_letn_ArrayFromList_count ) )
    and ( $_letn_ArrayFromList_index = $_letn_ArrayFromList_count ) ;
  dev.ClearVars ( List ( "$_letn_ArrayFromList_index" ; "$_letn_ArrayFromList_count" ) ) ;

  Let (
    [
      $_letn_ArrayFromList_count	= ValueCount ( _list ) ;
      $_letn_ArrayFromList_index	= $_letn_ArrayFromList_index + 1 ;

      _value	= GetValue ( _list ; $_letn_ArrayFromList_index ) ;
      _entry	= let.Array ( _name ; $_letn_ArrayFromList_index ; _value ) ;

      _result = _entry & let.ArrayFromList ( _name ; _list )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="149" name="let.ArrayGet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.ArrayGet ( _params ; _name ; _index )
// Purpose:		Serves as syntactic sugar for retireving array values from Let notation. Returns a named
//				value from a string of name/value pairs.
// Parameters:		_params:	A string of name/value pairs in Let notation
//				_name:	The name of the value to retrieve
//				_index:	The index of a repeating variable
// Requirements: 	let.Get
//				let.IndexedName
// Version:		1.0 written 13-07-27 by Jeremy Bante
//				1.1 edited 15-11-26 by Charles Ross, improve readability, use letn.IndexedName
// Example:		sample = result

Let (
  [
    _indexed_name	= let._IndexedName ( _name ; _index );
    _result			= let.Get ( _params ; _indexed_name )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="150" name="let.Assign"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Assign ( _params )
// Purpose:		Parses a Let dictionary of name-value parameters into a series of locally scoped
//				$variables.
// Parameters:		_params:	A Let notation dictionary, such as produced by letn.Set.
// Requirements: 	let.Enclose
// Version:		created 12-11-11 by Jeremy Bante
//				modified 12-11-28 by Jeremy Bante, support "$" prefix values as default
//				modified 13-03-15 by David Smith, update documentated return value
//				modified 15-11-25 by Charles Ross, rework to conform to custom function standards,
//					improve readability
// Notes:			Returns 1 when _params is a valid set of name/value pairs (which includes the empty
//				string, 0 otherwise. When 0 is returned, error code is sent to $_letn_Assign_error.
// Example:		List (
//				  let.Assign ( letn.Set ( "name" ; "value" ) ) ;
//				  $name
//				) = List ( 1 ; "value" )

Let (
  [
    // Convert global variables to local variables
    _params = Substitute (
          ¶ & _params;
          [ "¶$$"; "¶$" ]
        ) ;

    _code	= let.Enclose ( _params ) ;
    _error	= EvaluationError ( Evaluate ( _code ) ) ;

    _result = ( _error = 0 )						// indicate success or failure of Evaluate()
      or Let ( $_letn_Assign_error = _error ; False )	// only runs on error
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="151" name="let.AssignGlobal"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.AssignGlobal ( _params )
// Purpose:		Parses a Let dictionary of name-value parameters into a series of globally scoped
//				$$VARIABLES
// Parameters:		_params:	A Let format dictionary, such as produced by the letn.Set ( name ; value )
//				function
// Version:		1.0 written 12-12-04 by Jeremy Bante
// Notes:			Returns 1 when _params is a valid set of name/value pairs (which includes the empty
//				string, 0 otherwise. When 0 is returned, error code is sent to $letn.AssignGlobal.error.
// Example:		sample = result

Let (
  [
    // Convert local variables to global variables
    _params = Substitute (
          ¶ & _params;
          [ "¶$$"	; "¶$"	] ; // without renaming existing globals
          [ "¶$"	; "¶$$"	]
        ) ;

    _code	= let.Enclose ( _params ) ;
    _error	= EvaluationError ( Evaluate ( _code ) )
  ];

  ( _error = 0 )	// indicate success or failure of Evaluate()
    or Let ( $letn.AssignGlobal.error = _error ; False )	// only runs on error
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="152" name="let.ContainsName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.ContainsName ( _params ; _name )
// Purpose:		Returns True if the name is defined in the parameters.
// Parameters:		_params:	The list of parameters to check
//				_name:	The name to look for
// Requirements: 	list.IsMember
//				let.GetNames
// Version:		1.0 written 17-02-24 by Charles Ross
// Example:		sample = result

list.IsMember ( _name ; let.GetNames ( _params ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="153" name="let.Enclose"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Enclose ( _params )
// Purpose:		Surrounds the _params in a `Let` function for evaluation. The `Let` funciton itself
//				returns an empty string.
// Parameters:		_params:	The parameters to enclose within a `Let` function.
// Version:		1.0.0 - Charles Ross - 15-11-26
//				1.0.1 - Charles Ross - 18-04-23 - Change name to indicate it's no longer a "private" custom function.
// Notes:			Utility function only meant to be called by other functions.
// Example:		let.Enclose ( letn.Set ( "name" ; "value" ) )
//				  = "Let ( [¶$name = \"value\" ;¶¶_ = \"\"¶] ; _ )"

List (
  "Let ( ["			;
  _params		;
  "_ = \"\""		; // Alows the params to terminate with a semicolon
  "] ; _ )"
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="154" name="let.First"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.First ( _params )
// Purpose:		Returns the first name in the let notation defined in _params
// Parameters:		_params:	The let notation parameters to get the name from
// Requirements: 	let.GetNames
// Version:		1.0 written 17-02-24 by Charles Ross
// Example:		sample = result

GetValue ( let.GetNames ( _params ) ; 1 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="155" name="let.Get"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Get ( _params ; _name )
// Purpose:		Returns the value of name from the list of parameters, assumed to be in Let notation.
// Parameters:		_params:	Name/value paris in Let notation
//				_name:	The name of the value to retrieve
// Requirements: 	dev.Nil
// Version:		1.0 written 12-12-05 by Jeremy Bante
//				1.1 edited 13-01-08 by Jeremy Bante to handle leading $$ and $ in the name parameter
//					the same as the letn.Set function, based on a comment by Dan Smith.
//				1.2 edited 15-11-26 by Charles Ross, conform to custom function library standards
// Example:		let.Get ( letn.Set ( "var" ; "foo" ) ; "var" ) = "foo"

Let (
  [
    _params = ¶ & _params & ¶;

    // strip any leading $$ or $ for backwards compatibility
    _name = Substitute (
      ¶ & _name ;
      [ "¶$$"	; dev.Nil ] ;
      [ "¶$"		; dev.Nil ] ;
      [ ¶		; dev.Nil ]
    ) ;

    _length = Length ( _params );

    // position of last occurrence of name
    _position = Position ( _params ; "¶$" & _name & " = " ; _length ; -1 );

    // check for $$global name for backwards compatibility
    _position = Case (
      _position > 0	; _position
				; Position ( _params ; "¶$$" & _name & " = " ; _length ; -1 )
    ) ;

    _start	= Position ( _params ; " = " ; _position ; 1 ) + 3;
    _end	= Position ( _params ; ";¶" ; _position ; 1 );
    _value	= Middle ( _params ; _start ; _end - _start ) ;

    // check that _value exists and is valid
    _result = Case (
      ( _position > 0 )
        and IsValidExpression ( _value );
      Evaluate ( _value )
    )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="156" name="let.GetNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.GetNames ( _params )
// Purpose:		Returns a list of names from the name/value pairs in Let notation.
// Parameters:		_params:	Let notation string
// Requirements: 	list.IsMember
// Version:		1.0 written 13-01-24 by Daniel Smith
//				1.1 edited 13-12-23 by John Jones to use Position/Middle
//				1.2 edited 13-12-24 by Jeremy Bante to improve efficiency
// Example:		let.GetNames ( let.Set ( "var1" ; "foo" ) & let.Set ( "var2" ; "bar" ) ) = List ( "var1" ; "var2" )

Case (
  // ========================================
  // Step 0, set-up
  not $_letn_GetNames_step ;
  Let (
    [
      _empty = IsEmpty ( Trim ( _params ) ) ;

      _params = Substitute (
        ¶ & _params ;
        [ "¶$"	; ¶	] ;		// remove "$" prefix
        [ "¶$"	; ¶	] ;		// remove "$$" prefix
        [ "¶¶"	; ¶	]		// remove empty values
      ) ;

      $_letn_GetNames_length = Length ( _params ) ;

      $_letn_GetNames_step = Case ( 
        _empty	; 2
			; 1
        )
    ] ;

    let.GetNames ( _params )
  ) ;

  // ========================================
  // Step 1, check each parameter
  $_letn_GetNames_step = 1 ;
  Let (
    [
      _start				= $_letn_GetNames_end + 1 ;
      $_letn_GetNames_end	= Position ( _params ; ¶ ; _start ; 1 ) ;
      _end_of_list		= $_letn_GetNames_end = 0 ;

      _length = Case (
        _end_of_list	; $_letn_GetNames_length + 1
				; $_letn_GetNames_end
      ) - _start ;

      _pair = Middle ( _params ; _start ; _length ) ;
      _name = Left ( _pair ; Position ( _pair ; " = " ; 1 ; 1 ) - 1 ) ;

      // only include _name if it isn't already in the result
      _include = not list.IsMember ( _name ; $_letn_GetNames_result ) ;

      $_letn_GetNames_result = List (
        $_letn_GetNames_result ;
        Case ( _include ; _name )
      ) ;

      _end_of_list = _end_of_list or ( $_letn_GetNames_end ≥ $_letn_GetNames_length ) ;

      $_letn_GetNames_step = Case (
        _end_of_list	; 2
				; 1
      )
    ] ;

    let.GetNames ( _params )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  $_letn_GetNames_step = 2 ;
  Let (
    [
      _result = $_letn_GetNames_result ;

      // purge variables
      _var_list = List ( "$_letn_GetNames_end" ; "$_letn_GetNames_length" ; "$_letn_GetNames_result"; "$_letn_GetNames_step" ) ;
      _ = dev.ClearVars ( _var_list )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="157" name="let.List"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.List ( _value )
// Purpose:		Encoded value with trailing return and data type preserved
// Parameters:		_value:	The value to encode
// Requirements: 	dev.IsDataType
//				dev.Nil
// Version:		1.0 written 12-11-26 by Daniel Smith
//				1.1 edited 13-05-09 by Daniel Smith to encode a value like the current version of
//					letn.Set custom function
//				1.2 edited 13-12-24 by Jeremy Bante to specially encode newline characters in values,
//					and to update type detection to match the # function.
//				1.3 edited 14-05-26 by Jeremy Bante to detect type using a different method suggested
//					by Arnold Kegebein.
//				1.4 edited 14-06-06 by Jeremy Bante to fix an issue where long sequences of digits
//					could be interpreted as timestamps.
//				1.5 edited 15-11-26 by Charles Ross to conform to custom function library standards
// Example:		let.List ( "value1" )
//				  & let.List (
//				  let.List ( "subValue" )
//				  & let.List ( "subValue2" )
//				) = "\"value1\"¶\"\\\"subValue\\\"\¶\\\"subValue2\\\"\¶\"¶"

Let (
  [
    _number = GetAsNumber ( _value ) ;

    _value = Case (
      dev.DataTypeMustBeText ( _value ) ;
      Quote ( _value ) ;

      dev.IsDataType ( _value ; "timestamp" ) ;
      "GetAsTimestamp ( " & Quote ( _value ) & " )" ;

      dev.IsDataType ( _value ; "time" ) ;
      "GetAsTime ( " & Quote ( _value ) & " )" ;

      dev.IsDataType ( _value ; "date" ) ;
      "GetAsDate ( " & Quote ( _value ) & " )" ;

      _value ≠ _number ;
      Substitute ( Quote ( _value ) ;
        [ Char ( 10 )	; "\" & Char ( 10 ) & \""	] ;
        [ Char ( 8232 )	; "\" & Char ( 8232 ) & \""	] ;
        [ Char ( 8233 )	; "\" & Char ( 8233 ) & \""	]
      ) ;

      _number
    ) ;

    _result = Case (
      IsValidExpression ( _value )
        // The following `Evaluate` slows the calc by ~30%, only include during dev and debug
        // and Evaluate ( _value ) = _value
      ;
      _value & ¶ ;

      "/* Error " & err.GenericCalcError & " value: " & let._EscapeComments ( _value ) & " */" & ¶
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="158" name="let.ListGet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.ListGet ( _values ; _index )
// Purpose:		Retrieve a value from a list created with the #List ( value ) function. Preserve the data
//				type and all special characters of the original value.
// Parameters:		_values:	List of encoded values
//				_index:	The position of the value to retrieve
// Version:		1.0 written 12-11-26 by Daniel Smith
// Example:		let.ListGet ( let.List ( "value1" ) & letn.List ( "value2" ) ; 1 ) = "value1"
//				  and let.ListGet ( let.List ( "" ) & letn.List ( "value2" ) ; 2 ) = "value2"
//				  and let.ListGet ( let.List ( "value1" ) & letn.List ( "value2" ) ; 3 ) = ""
//				  and let.ListGet ( "This is not a valid #List string" ; 1 ) = ""

Let (
  [
    _value = GetValue ( _values ; _index ) ;

    _result = Case (
      IsValidExpression ( _value )	; Evaluate ( _value )
						; dev.Nil
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="159" name="let.Remove"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Remove
// Purpose:		Returns a Let notation string from _params with names found in _remove taken out.
// Parameters:		_params:	A Let notation string
//				_remove:	The list of names to remove
// Requirements: 	devp.Nil
// Version:		1.0 written 12-12-20 by Daniel Smith
//				1.1 edited 13-01-08 by Jeremy Bante to extend the function to remove multiple names from
//					a return-delimited list
//				1.2 edited 13-03-15 by Daniel Smith to add trailing return if it doesn't exist
//				1.3 edited 13-12-23 by John Jones to use Middle/Position instead of GetValue
//				1.4 edited 13-12-24 by Jeremy Bante to improve efficiency
//				1.5 edited 15-11-26 by Charles Ross, improve readability, conform to standards
// Example:		let.Remove ( let.Set ( "var_1" ; "val_1" ) & let.Set ( "var_2" ; "val_2" ) ; "var_1" )
//				  = let.Set ( "var_2" ; "val_2" )

Case (
  // ========================================
  // Step 0, set-up
  not $_letn_Remove_step ;
  Let (
    [
      _empty = IsEmpty ( _params ) or IsEmpty ( _remove ) ;

      // add "$" prefix for matching
      _remove = Substitute ( ¶ & _remove ; ¶ ; "¶$" ) ;

      // add "$$" prefix for backwards-compatibility
      _remove = _remove & Substitute ( _remove ; ¶ ; "¶$" ) & ¶ ;

      $_letn_Remove_length = Length ( _params ) ;

      $_letn_Remove_step = Case (
        _empty	; -1
			; 1
      )
    ] ;

    let.Remove ( _params ; _remove )
  ) ;

  // ========================================
  // Step 1, check each parameter
  $_letn_Remove_step = 1 ;
  Let (
    [
      _start				= $_letn_Remove_end + 1 ;
      $_letn_Remove_end	= Position ( _params ; ¶ ; _start ; 1 ) ;
      _end_of_list		= $_letn_Remove_end = 0 ;

      _length = Case (
        _end_of_list	; $_letn_Remove_length + 1
				; $_letn_Remove_end
      ) - _start ;

      _pair		= Middle ( _params ; _start ; _length ) ;
      _name		= Left ( _pair ; Position ( _pair ; " = " ; 1 ; 1 ) - 1 ) ;

      // only include if ~name is not in removeParameters
      _include = ( not IsEmpty ( _name ) )
        and ( Position ( _remove ; ¶ & _name & ¶ ; 1 ; 1 ) = 0 ) ;

      $_letn_Remove_result = $_letn_Remove_result & Case ( _include ; _pair & ¶ ) ;

      _end_of_list = _end_of_list
      or ( $_letn_Remove_end ≥ $_letn_Remove_length ) ;

      $_letn_Remove_step = Case (
        _end_of_list	; 2
				; 1
      )
    ] ;

    let.Remove ( _params ; _remove )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  ( $_letn_Remove_step = 2 )
    or ( $_letn_Remove_step = -1 ) ;
  Let (
    [
      _empty = $_letn_Remove_step = -1 ;
      _result = Case (
        _empty	; _params
			; $_letn_Remove_result
      ) ;

      // purge variables
      _var_list = List ( "$_letn_Remove_end" ; "$_letn_Remove_length" ; "$_letn_Remove_result" ; "$_letn_Remove_step" ) ;
      _ = dev.ClearVars ( _var_list )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="160" name="let.Replace"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Replace ( _params ; _name ; _value )
// Purpose:		Replaces the existing value in name with the new one passed.
// Parameters:		_params:	The let notation parameters to replace the name in
//				_name:	The name to replace the value of
//				_value:	The new value to store in the name
// Requirements: 	let.Remove
//				let.Set
// Version:		1.0 written 17-02-24 by Charles Ross
// Example:		Let (
//				  [
//				    _letn = let.Set ( "var_1" ; "val_1" ) & let.Set ( "var_2" ; "val_2" ) ;
//				    _letn = let.Replace ( _letn ; "var_1" ; "new" )
//				  ] ;
//				  let.Get ( _letn ; "var_1" ) = "new"
//				)

let.Remove ( _params ; _name ) & let.Set ( _name ; _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="161" name="let.ReverseLookup"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		Return the first key in the let notation dictionary that has the given value.
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			Implement this function
// Example:		sample = result

Let (
  [
    _ = ""
  ] ;

  "unimplemented"
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="162" name="let.Set"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// let.Set ( _name ; _value )
// Purpose:		Returns a name/value pair in Let notation.
// Parameters:		_name:	The name for the returned name/value pair, name can be any value that
//						would be a valid local variable name.
//				_value:	The value for the returned name/value pair.
// Requirements: 	devp.Nil
//				devp.DataTypeMustBeText
//				devp.IsDataType
//				letn.EncloseInLet
//				letn.EscapeComments
//				errn.NameNotValid
//				errn.GenericCalcError
// Version:		created 12-11-10 by Jeremy Bante
//				modified 12-11-28 by Jeremy Bante, to return error feedback and prefix names with "$".
//				modified 12-12-07 by Jeremy Bante, corrected error result that could create invalid
//					syntax for values containing a comment close sequence
//				modified 12-12-12 by Daniel Smith, preserve data type of value
//				modified 13-01-14 by Daniel Smith, include trailing return on error result and accept
//					a value of "?"
//				modified 13-04-15 by Jeremy Bante, to not wrap numbers in GetAsNumber
//				modified 13-07-27 by Jeremy Bante, fix a type misidentification bug
//				modified 13-09-02 by Daniel Smith, fix a type misidentification bug
//				modified 13-12-12 by John Jones, explicitly encode line feed characters in text values
//				modified 13-12-24 by Jeremy Bante, return an error if name contains a carriage return,
//					remove explicit encoding for line feeds
//				modified 14-05-25 by Jeremy Bante, detect type using a different method suggested by
//					Arnold Kegebein
//				modified 14-06-06 by Jeremy Bante, fix an issue where long sequences of digits could
//					be interpreted as timestamps
//				modified 14-10-07 by Daniel Smith, prevent from returning an EvaluationError
//				1.13 modified 15-11-25 by Charles Ross, rework for custom function standards
// Notes:			https://github.com/filemakerstandards/fmpstandards/blob/master/Functions/%23Name-Value/%23.fmfn
// Todo:			To dos
// Example:		let.Set ( "name" ; "value" ) = "$name = \"value\" ;¶"

Let (
  [
    // strip leading "$$" and "$"
    _name = Substitute (
      "/*start*/" & _name ;
      [ "/*start*/$$"	; dev.Nil ] ;
      [ "/*start*/$"	; dev.Nil ] ;
      [ "/*start*/"		; dev.Nil ]
    ) ;

    _is_valid_date	= not EvaluationError ( GetAsDate ( _value ) ) ;
    _is_valid_time	= not EvaluationError ( GetAsTime ( _value ) ) ;
    _number		= GetAsNumber ( _value ) ;

    _value =  Case (
      dev.DataTypeMustBeText ( _value ) ;
      Quote ( _value ) ;

      _is_valid_date
        and _is_valid_time
        and dev.IsDataType ( _value ; "timestamp" ) ;
      "GetAsTimestamp ( " & Quote ( _value ) & " )" ;

      _is_valid_time
        and dev.IsDataType ( _value ; "time" ) ;
      "GetAsTime ( " & Quote ( _value ) & " )" ;

      _is_valid_date
        and dev.IsDataType ( _value ; "date" ) ;
      "GetAsDate ( " & Quote ( _value ) & " )" ;

      _value ≠ _number ;
      Quote ( _value ) ;

      _number
    ) ;

    _result = "$" & _name & " = " & _value & " ;¶" ;

    _test_expr = let.Enclose ( _result ) ;

    _error = Case (
      IsEmpty ( _name )
        or ( Position ( _name ; ¶ ; 1 ; 1 ) ≠ 0 ) ;
      err.NameNotValid ;

      not IsValidExpression ( _test_expr ) ;
      err.GenericCalcError
    ) ;

    // prevent bad pairs from affecting evaluation by commenting
    _err_msg = "/* Error " & _error & " name: " &
        let._EscapeComments ( _name ) & " value: " &
        let._EscapeComments ( _value ) & " */" & ¶ ;

    _result = Case (
      _error		; _err_msg
			; _result
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="163" name="list_____ Lists ____________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that assist with list manipulation.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="164" name="list.Append"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Append ( _list; _value )
// Purpose:		If the list is empty, just return the value. Otherwise return the list with the value
//				appended to the end.
// Parameters:		_list:		The list to append the value to.
//				_value:	The value to append to the list.
// Version:		1.0 written 15-03-06 by Charles Ross
// Example:		list.Append ( list.Append ( devp.Nil; "one" ); "two" ) = "one¶"two"

Case (
  ValueCount ( _list ) = 0;	dev.Nil;
					_list & "¶"
) & _value]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="165" name="list.AppendIf"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.AppendIf
// Purpose:		Appends the value to the list if the condition is true.
// Parameters:		_list:			T?he list to conditionally append to
//				_value:		The value to append
//				_condition:	The condition to evaluate
// Requirements: 	list.Append
// Version:		1.0 - Charles Ross - 17-12-11
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  _condition	; list.Append ( _list ; _value )
			; _list
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="166" name="list.Concatenate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Concatenate ( _list_1; _list_2; _sep )
// Purpose:		Takes two lists with the same number of items and returns a new list with the matching
//				items in each of the lists concatenated with the separator between them.
// Parameters:		_list_1:	The first list.
//				_list_2:	The second list.
//				_sep:		The character (or string) to separate matching entries with.
// Requirements: 	lsts.First
//				lsts.Rest
// Version:		1.0 written 15-03-06 by Charles Ross
// Notes:			The lists being the same length is *not* a requirement. Blanks will be inserted for the
//				shorter list when there is a difference.
// Example:		list.Concatenate ( "1¶2¶3"; "A¶B¶C"; "-" ) = "1-A¶2-B¶3-C"

Case (
  // Recursive exit condition
  ( ValueCount ( _list_1 ) = 0 )
    and ( ValueCount ( _list_2 ) = 0 );		dev.Nil;

  Let(
    [
      _1_first = list.First ( _list_1 );
      _2_first = list.First ( _list_2 );

      _1_rest = list.Rest ( _list_1 );
      _2_rest = list.Rest ( _list_2 );

      _first = _1_first & _sep & _2_first;

      _list = _first & ¶ & list.Concatenate ( _1_rest; _2_rest; _sep )
    ];

    _list
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="167" name="list.CreateList"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.CreateList ( _text ; _separator )
// Purpose:		Returns a list where each item in the list is delineated by the _separator.
// Parameters:		_text:		The text to create the list from.
//				_separator:	The character that separates each item in the list.
// Version:		1.0 written 15-08-24 by Charles Ross
// Example:		list.CreateList ( "1,2,3" ; "," ) = List ( 1 ; 2 ; 3 )

Substitute ( _text ; _sep ; "¶" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="168" name="list.CustomList"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// lsts.CustomList ( _start; _end; _funciton )
//
// Purpose:		Return a list that applies the start and end values to the function's "[n]" token
//
// Parameters:		_start:	description
//              		_end:	description
//				_function:	description
//
// Requirements:	devp.Nil
//				sysk.PlatformIsGo
//				sysk.PlatformIsServer
//				sysk.PlatformIsWeb
//				txtp.StartsWith
//
// Author:			Agnès Barouh (filemaker@tictac.fr), Ugo Di Luca, Grazie Mille, cleanup by Charles Ross
// Version:		updated 08-07-01 by Agnès Barouh
//				updated 10-08-01 by Agnès Barouh to work with FM Go
//				updated 11-11-01 by Agnès Barouh to work with FM SErver
//				4.8 updated 12-11-01 by Agnès Barouh to work with IWP
//
// Notes:			Please, do not used "_custom_list_num" in your calculation with Let()
//
//				Build any list based on all Native or Custom Functions involving a 'Number' value
//				as a parameter, such as : Left(), Middle(), GetValue(), GetRepetitionNumber (),
//				GetNthRecord(), GetLayoutObjectAttribute () ... ex : -
//				CustomList ( 1 ; Get ( FoundCount ) ; "GetNthRecord ( FirstName ; [n] )" ) 
//				will return James¶Henry¶Susan if your foundset has 3 records.
//
//				Build any range based on Dates, Times, TimeStamps, and obviously Numbers
//				ex : CustomList ( 1 ; 5 ; "GetAsDate ( StartingDate ) + [n]" )
//				will return a range of 5 dates starting from the specified StartingDate
//
//				The 'Function' Parameter is nothing else than a litteral calculation expression. 
//				Therefore, CustomList allows for any filtering or parsing process based on any
//				condition you may need. ex : 
//				CustomList ( 10 ; 100 ;
//				  "Let ( [ Value = GetValue ( MyList ; [n] ) ] ; Case ( PatternCount ( Value ; "X" ) ; Value ))" )
//				will parse any value containing a "X" in  the 'MyList' chain, in between the 10th
//				and the 100th values.
//
//				CustomList is based on a totally new algorithm, and is now volontarily bridled
//				to a maximum range of 500,000 values, where the first version was technically
//				limited to a max of 18,700 values. Previous version still available here:
//				http://www.briandunning.com/cf/747
//
//				The new CustomList() is faster and still is NOT recursive. The arguments are
//				unchanged which makes it compatible with all your previous developments
//				involving CustomList().
//
//				For Developper ease, the new CustomList() includes a debugging mode. find
//				the "*****DEBUGGING MODE*****" tag in the formula below to switch mode.
//				When debug is set to 1, any error will be returned with its appropriate
//				explanatory code, else the result will be set to "?"
//
//				Basically, CustomList() does two things :
//				1: Transform your formula in a litteral chain :
//
//				CustomList ( 1; 4; "GetNthRecord ( Field ; [n])")
//				therefore becomes
//				"Let ( [ _custom_list_num = 1 ] ; GetNthRecord ( Field ; _custom_list_num ) ) & ¶ &
//				Let ( [ _custom_list_num = 2 ] ; GetNthRecord ( Field ; _custom_list_num ) ) & ¶ &
//				Let ( [ _custom_list_num = 3 ] ; GetNthRecord ( Field ; _custom_list_num ) ) & ¶ &
//				Let ( [ _custom_list_num = 4 ] ; GetNthRecord ( Field ; _custom_list_num ) )"
//
//				2: Evaluates this chain.
//
//				Interrested in the mechanism ?
//				My advice then : dissect this function by escaping the 'Result' and placing one
//				of the numerous intermediary variables available. Special attention should be
//				paid to the 'First' Variable, everything starts from there!
//
// Todo:			Other functions I've written that have placeholders, such as tmsp.FormatTimestamp,
//				use the percent character to represent the placeholder. Add that as an option to this.
//
// Example:
// lsts.CustomList ( 1 ; 5 ; "Date ( 3; 17; 2015 ) + [n]" ) =
//   "3/18/2015¶3/19/2015¶3/20/2015¶3/21/2015¶3/22/2015"

Case (
  // This function will not evaluate if Invalid parameters were passed for Start and End.
  IsEmpty ( _start )
    or IsEmpty ( _end )
    or ( _end < 1 )
    or ( _start < 1 );
  dev.Nil;

  Let (
    [
      _function = Substitute ( _function; "%n"; "[n]" );

      _start	= GetAsNumber ( _start );
      _end	= GetAsNumber ( _end );
      _diff	= _end - _start + 1;

      _version =  Case (
        platform.IsGo;		1;
        platform.IsServer;	2;
        platform.IsWeb;		3;
						0
      ) ;

      _stack_size = Choose (
        _version ;
        1700  ;	400 ;		300 ;		900
      ) ;

      // Check for a range higher than 500,000 values  ( max 150000 values for FmGo and
      // 120000 for FmS and 250000 for IWP ). For FMPro/Adv, CustomList() is volontarily
      // restrained to 500 000 but you can but you can go beyond.

      _end = Case (
        ( _diff > Choose ( _version ; 500000  ; 150000 ; 120000 ; 250000 ) )
          or ( _end < _start )
          or IsEmpty ( _start )
          or IsEmpty ( _end );
        "Error";
        _end
      );

      $_custom_list_nil = Quote ( dev.Nil );

      // CustomList has its own recursion model. As CustomList may be involved into the
      // "function" argument, each CustomList expression used is passed to a repeating
      // variable for evaluation

      _index = Let (
        [
          $_custom_list_execute_count = $_custom_list_execute_count + 1
        ];

        $_custom_list_execute_count & PatternCount ( _function ; "CustomList" ) + 1
      ) ;

      $_custom_list_n[ _index ]  = _start - 1;

      _calc = Case (
        _diff ≥ ( _stack_size - 10 ) ;	( _stack_size / 10 )  ;
							Floor ( _diff / 10 ) + 1
      );

      // Here starts the "magic" of the Substitutions and the whole mechanism.
      // CustomList() is set to evaluate stacks of 1,700 values at a time ( 400 for
      // FileMakerGo), which is the current limit of FileMaker internal Evaluate function

      _first							= Substitute ( ( 10 ^ _calc ) - 1; 9; "__________" ) ;  
      _x							= Floor ( _diff / _stack_size );
      $_custom_list_remainder[ _index ]	= _diff - ( _x * _stack_size );

      // When the "Function" argument is left empty, CustomList() will return a numeric
      // list based on the range defined

      _function_r = Case (
        IsEmpty ( _function );	"_custom_list_num";
						Substitute ( _function; ["[n]"; "_custom_list_num"] ; [¶ ; ""] )
      );

      // Each repeating variable content is parsed in order to get our String ready for the
      // last evaluation - Special care is made for French users here, please substitute
      // the "definir" below with your local translation of the "Let" function if you're not
      // using an english version. The use of "Let ([" is recommanded anyway

      // Removed localized "Let" translation.
      _normalized_fn = Substitute (
        Lower ( _function );
        [ " ";		dev.Nil ];
        [ "¶";		dev.Nil ]
      );
      _starts_with_let = text.StartsWith ( _normalized_fn ; "Let([" );

      _base_fn = "
        Let (
          [
            $_custom_list_n[<<index>>] = $_custom_list_n[<<index>>] + 1;" & "
            _custom_list_num = $_custom_list_n[<<index>>]";

      _base_fn = Substitute ( _base_fn; "<<index>>"; _index );
      _base_fn = _base_fn & Case (
        _starts_with_let;	";";
					"];"
      );

      _fn_append = Case (
        _starts_with_let;	Replace ( _function_r; 1; Position ( _function_r; "["; 1; 1 ); "" ) & "&\¶&¶";
					_function_r & ")&\¶&¶"
      );

      $_custom_list_execute[ _index ] = Substitute ( _first ; "_";  _base_fn & _fn_append );

      // Final compilation starts here. The reminder part above each 1,700 values is
      // treated now.
  
      _eval_1 = "
        Evaluate ( $_custom_list_execute[<<index>>] & $_custom_list_nil ) & ";
      _eval_1 = Substitute ( _eval_1; "<<index>>"; _index );

      _eval_2 = "
        Evaluate(
          LeftValues ( $_custom_list_execute[<<index>>] ; $_custom_list_remainder[<<index>>]  ) &
            $_custom_list_nil
        ) & " & $_custom_list_nil;
        _eval_2 = Substitute ( _eval_2; "<<index>>"; _index );

      _final = Case (
        _x > 0;
        Substitute ( ( 10 ^ _x ) - 1; 9; _eval_1 )
      ) & _eval_2;

      // The Final variable can now be evaluated to get our List

      _result  =   Case (
        _end <> "Error";
        Substitute (
          "#^#" & Evaluate  ( _final ) & "#^#";
          [ "#^#|#^#";	"¶"		];
          [ "¶";		"¶#^#"	];
          [ "#^#¶";		""		];
          [ "¶#^#";		"¶"		];
          [ "¶#^#";		""		];
          [ "#^#";		""		]
        )
      ) ;

      $_custom_list_execute[ _index ]  = dev.Nil ;
      $_custom_list_remainder [ _index ] = dev.Nil ;
      $_custom_list_nil = dev.Nil ;
      $_custom_list_execute_count = dev.Nil ;
      $_custom_list_n[ _index ] = dev.Nil

      // ----------- FUNCTION RESULT BELOW -----------
    ];


    // CustomList returns either the valid result, or an error formatted according to the debugging
    // mode chosen above

    Case (
      ( Length ( _result )
        and ( _result = Filter ( _result; "?" ) ) )
      or ( _end =  "Error" );
      Let (
        [
          /*****DEBUGGING MODE*****/

          // Case Debug = 1, returned error "[error_CL], Number, Name and Calculation error",
          // if Debug  <> 1, returned error is "?"

          _debug		= False ;
          _write		= Substitute ( _function; "[n]"; 1 );
          _num_error	= EvaluationError ( Evaluate ( _write ) );

          _error = "[" & _num_error & "] " &
            "Unlisted error | Unknown error, check calculation or check \"Start\" and \"End\" ¶" &
            "102 | Field is missing¶" &
            "103 | Relationship is missing¶" &
            "106 | Table is missing¶" &
            "113 | Function is missing¶" &
            "1204 | Number, text constant, field name or \"(\" expected¶" &
            "1205 | Comment is not terminated with \"*/\"¶" &
            "1206 | Text constant must end with a quotation mark¶" &
            "1207 | Unbalanced parenthesis¶" &
            "1208 | Operator or function missing or \"(\" not expected¶" &
            "1211 | List usage is not allowed in this function¶" &
            "1212 | An operator (for example, +, -, *,;) is expected here¶" &
            "1215 | This parameter is an invalid Get function parameter";
          _pos = ValueCount ( Left ( _error; Position ( _error; _num_error & " "; 1; 1 ) ) )
        ];

        Case (
          _debug = 1;	"[Error_CL]  | Return error : " & GetValue ( _error; Case ( _pos = 0; 1; _pos ) ) &
				  ¶ & TextStyleAdd ( "Calculation ( for [n] = 1 ) : "; Bold ) & _write;
				"?"
        )
      );

      _result
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="169" name="list.First"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.First ( _list )
// Purpose:		Return the first item of the passed list. Generally used to loop through a list.
// Parameters:		_list: The list to return the first item of
// Version:		1.0 written 15-03-11 by Charles Ross
// Example:		list.First ( "1¶2¶3" ) = "1"

GetValue ( _list; 1 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="170" name="list.Insert"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Insert ( _list ; _item ; _position )
// Purpose:		Inserts the item into the list at the position, padding the list if necessary with blank values.
// Parameters:		_list:		The list to insert the item into
//				_item:	The item to insert
//				_position:	The position to insert the item at
// Version:		1.0 - Jim Feuerstein - 17-03-08
// Notes:			Copyright © 2017 Labor Street
// Example:		sample = result

Let (
  [
    _size = ValueCount ( _list ) ;

    _list = Case (
     _position > ( _size + 1 )	; _list
						; list.Pad ( _list ; _position - 1 )
    ) ;

    _pre	= LeftValues ( _list ; _position - 1 ) ;
    _post	= RightValues ( _list ; _size - _position + 1) ;

    _result = _pre & _item & "¶" & _post
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="171" name="list.Intersection"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Intersection ( _list_1; _list_2 )
// Purpose:		Returns the intersection of the two lists, that is, returns the members of the list that
//				exist in both.
// Parameters:		_list_1: A list
//              		_list_2: Another list
// Requirements: 	lsts.First
//				lsts.Rest
// Version:		1.0 written 15-03-11 by Charles Ross
// Example:
// list.Intersection ( "1¶2¶3"; "2¶3¶4¶5" ) = "2¶3"

Case (
  ValueCount ( _list_1 ) = 0; // The exit condition
  dev.Nil;

  Let (
    [
      _first	= list.First ( _list_1 );
      _rest	= list.Rest ( _list_1 );

      _rest_intersection = list.Intersection ( _rest; _list_2 );

      _result = Case (
        list.IsMember ( _first; _list_2 );		List ( _first; _rest_intersection );
								_rest_intersection
      )
    ];

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="172" name="list.IsMember"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.IsMember ( _item; _list )
// Purpose:		Returns True if _item is in _list. The surrounding paragraphs marks make sure that
//				we aren't returning true when the item exists as a substring within another item.
// Parameters:		_item:	The item to search for in the list.
//				_list:		This list to search
// Version:		1.0 - Charles Ross - 15-03-12
//				1.1 - Charles Ross - 17-09-10 - Simplify with use of `FilterValues`
// Example:		list.IsMember ( "1"; "1¶2¶3" )
//				  and ( not list.IsMember ( "4"; "1¶2¶3" ) )

not IsEmpty ( FilterValues ( _item ; _list ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="173" name="list.KeepItems"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.KeepItems ( _list ; _test )
// Purpose:		Return a list of items in the given list that pass the given test.
// Parameters:		_list:		The list of items to compare
//				_test:	The test to use on each item in the list
//				_type:	The type of data found in the list. Should be one of FileMaker's data types
// Version:		1.0 - Charles Ross - 19-08-12
// Notes:			Only type "Text" and "Number" are supported so far. "Date", "Time", and "Timestamp" coming soon.
//				_test should return a boolean value when "%t" is replaced by an item in the list.
// Todo:			To dos
// Example:		sample = result

While (
  [
    _result = dev.Nil ;
    _i = 0 ;

    _type = "Text" ;

    _ = ""
  ] ;

  _i ≤ ValueCount ( _list ) ;

  [
    _i = _i + 1 ;

    _item = GetValue ( _list ; _i ) ;
    _item = Case (
      _type = "Text"		; Quote ( _item )	;
      _type = "Number"	; _item
    ) ;

    _code = Substitute ( _test ; "%t" ; Quote ( _item ) ) ;
    _keep = Evaluate ( _code ) ;

    _result = Case (
      _keep	; List ( _result ; GetValue ( _list ; _i ) )
		; _result
    ) ;
 
    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="174" name="list.Last"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Last ( _list )
// Purpose:		Returns the last item in the given list
// Parameters:		_list:	The list to return the last item of
// Version:		1.0 - Charles Ross - 17-09-14
// Example:		list.Last ( List ( "one" ; "two" ; "three" ) ) = "three"

GetValue ( _list ; ValueCount ( _list ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="175" name="list.LocalList"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.LocalList ( _field ; _start ; _end ; _exclude_empty )
// Purpose:		A version of `List` that works with the local table to get a list of field values for
//				the current found set.
// Parameters:		_field_name:		The name of the field to retrieve values for
//				_start:			The record number to start at
//				_end:			The ending record number
//				_exclude_empty:	Omit empty values from the list if True
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein - 17-03-08
// Notes:			Copyright © 2017 Labor Street
// Example:		sample = result

Case (
  _start ≤ _end ;
  Let (
    [
      _value = GetNthRecord ( _field_name ; _start )
    ] ;
    Case (
      IsEmpty ( _value ) and _exclude_empty	; dev.Nil
									; _value & "¶" & list.LocalList ( _field_name ; _start + 1 ; _end ; _exclude_empty )
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="176" name="list.MaxNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.MaxNumber
// Purpose:		Return the maximum value from a list of numbers
// Parameters:		_list:	The list of numbers to return the maximum value of
// Requirements: 	list.First
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		list.MaxNumber ( List ( 1 ; 9 ; 3 ; 2 ) ) = 9

list.First ( SortValues ( _list ; sort.NumberDesc ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="177" name="list.MinNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.MinNumber
// Purpose:		Return the minimum value from a list of numbers
// Parameters:		_list:	The list of numbers to return the minimum value of
// Requirements: 	list.First
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		list.MinNumber ( List ( 9 ; 1 ; 3 ; 2 ) ) = 1

list.First ( SortValues ( _list ; sort.NumberAsc ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="178" name="list.NextValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.NextValue ( _list ; _item ; _loop )
// Purpose:		Given a list and an item in the list, return the next item in the list.
// Parameters:		_list:		The list to get the next value of
//				_item:	The current item
//				_loop:	If `True`, return the first item if the current item is the last
// Requirements: 	list.RemoveValue
//				list.ValuePosition
// Version:		1.0.0 - Charles Ross - 18-10-27
//				1.0.1 - Charles Ross - 18-10-29 - Return original item if on last item and loop is false
// Notes:			Removes dash values that might be present in value lists.
// Example:		list.NextValue ( List ( "one" ; "two" ; "three" ) ; "two" ; True ) = "three"

Let (
  [
    _list = list.RemoveValue ( _list ; "-" ) ;

    _pos = list.ValuePosition ( _item ; _list ; 1 ) + 1 ;
    _next_value = GetValue ( _list ; _pos ) ;

    _next_value = Case (
      _loop and IsEmpty ( _next_value )	; GetValue ( _list ; 1 ) ;
      IsEmpty ( _next_value )			; _item
								; _next_value
    ) ;

    _ = ""
  ] ;

  _next_value
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="179" name="list.Pad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Pad ( _list ; _count )
// Purpose:		Appends empty values to the given list until the value count ≥ the given count.
// Parameters:		_list:		The list to append empty values to
//				_count:	The minimum number of values the result must have
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein - 17-03-08
// Notes:			Copyright © 2017 Labor Street
// Example:		sample = result

Case (
  ValueCount ( _list ) ≥ _count ;
  _list ;

  list.Pad ( _list & "¶" ; _count )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="180" name="list.Pop"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Pop ( _var_name )
// Purpose:		Pops the virst value off of the named variable and returns it.
// Parameters:		_var_name:	The name of the variable to pop the first value off of.
// Requirements: 	list.First
//				list.Rest
// Version:		1.0 written 15-03-11 by Geoff Coffey
// Notes:			http://sixfriedrice.com/wp/pop-goes-the%E2%80%A6um%E2%80%A6variable/
// Example:		Let (
//				  [
//				    $_var = "1¶2¶3";
//				    _first = list.Pop ( "$_var" )
//				  ];
//				  $_var
//				) = "2¶3"

Let (
  [
    _list	= Evaluate ( _var_name );
    _first	= list.First ( _list );

    _calc = "Let ( " & _var_name & " = list.Rest ( " & _var_name & " ); dev.Nil )";

    _ = Evaluate ( _calc )
  ];

  _first
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="181" name="list.Remove"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Remove ( _list ; _position )
// Purpose:		Removes the item from the list at the position.
// Parameters:		_list:		The list to remove the item from
//				_position:	The position to remove the item from
// Version:		1.0 - Jim Feuerstein - 17-03-08
// Notes:			Copyright © 2017 Labor Street
// Example:		sample = result

Let (
  [
    _size = ValueCount ( _list ) ;

    _pre	= LeftValues ( _list ; _position - 1 ) ;
    _post	= RightValues ( _list ; _size - _position ) ;

    _result = _pre & _post
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="182" name="list.RemoveBlanks"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.RemoveBlanks ( _list )
// Purpose:		Returns the passed list with blank items removed.
// Parameters:		_list:	The list to remove blanks from.
// Requirements: 	list.First
//				list.Rest
// Version:		1.0 written 15-09-12 by Charles Ross
// Example:		list.RemoveBlanks ( List ( 1 ; 2 & ¶ ; 3 ) ) = List ( 1 ; 2 ; 3 )

Case (
  ValueCount ( _list ) = 0 ;
  dev.Nil ;

  List (
    list.First ( _list ) ;
    list.RemoveBlanks ( list.Rest ( _list ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="183" name="list.RemoveValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.RemoveValue
// Purpose:		Removes all occurrences of value from the list
// Parameters:		_list:		The list to rmove the value from
//				_value:	The value to remove from the list
// Requirements: 	list.Subtract
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

list.Subtract ( _list ; _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="184" name="list.Replace"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Replace ( _list ; _item ; _position )
// Purpose:		Replaces the item in the list at the position with the passed item.
// Parameters:		_list:		The list to insert the item into
//				_item:	The item to replace
//				_position:	The position to insert the item at
// Requirements: 	list.Insert
//				list.Remove
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

list.Insert ( list.Remove ( _list ; _position ) ; _item ; _position )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="185" name="list.ReplaceSeparator"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ReplaceSeparator ( _list )
// Purpose:		Replaces the default list separator with the specified string. Can be used to convert a list
//				to some other data structure, such as a comma separated string.
// Parameters:		_list:		The list to process
//              		_string:	The string to use instead of a paragraph return
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		lsts.ReplaceSeparator ( "1¶2¶3"; ", " ) = "1, 2, 3"

Substitute( _list; "¶"; _string )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="186" name="list.ReplaceValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ReplaceValue ( _lsit ; _old ; _new )
// Purpose:		Replaces every occurrence of the old value in the list with the new value.
// Parameters:		_list:		The list to replace the items in.
//				_old:		The value to replace.
//				_new:	The value to replace it with.
// Requirements: 	list.ValuePosition
//				list.Replace
// Version:		1.0 - Charles Ross - 17-03-13
// Example:		list.ReplaceValue ( List ( "one" ; "two" ; "one" ; "four" ) ; "one" ; "1" ) = List ( 1 ; "two" ; 1 ; "four" ) & ¶

Case (
  not list.IsMember ( _old ; _list ) ;
  _list ;

  Let (
    [
      _pos = list.ValuePosition ( _old ; _list ; 1 ) ;

      _list = list.Replace ( _list ; _new ; _pos )
    ] ;

    list.ReplaceValue ( _list ; _old ; _new )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="187" name="list.Rest"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Rest ( _list )
// Purpose:		Returns the passed list with the first item removed. Usually used to loop through a list of
//				items.
// Parameters:		_list:	A list.
// Version:		1.0 written 15-03-12 by Charles Ross
// Note:			RightValues appends a return to the last item in the list. The List function, which seems
//				to be more commonly used, does not. Therefore this function lops off the last character
//				which should always be a carriage return.
// Example:		list.Rest ( "1¶2¶3" ) = "2¶3"

Let (
  [
    _list	= RightValues ( _list; ValueCount ( _list ) - 1 );
    _len	= Length ( _list )
  ];

  Left ( _list; _len - 1 )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="188" name="list.Reverse"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Reverse ( _list )
// Purpose:		Returns the list with the order of items reversed.
// Parameters:		_list:	The list with items to reverse the order of
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-09-14
// Example:		list.Reverse ( List ( "one" ; "two" ; "three" ) = List ( "three" ; "two" ; "one )

Let (
  [
    _count = ValueCount ( _list ) ;
    _last = GetValue ( _list ; _count ) ;
    _rest = LeftValues ( _list ; _count - 1 )
  ] ;

  Case (
    _count = 0 ;
    dev.Nil ;

    List ( _last ; list.Reverse ( _rest ) )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="189" name="list.Shuffle"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Shuffle
// Purpose:		Return the given list with its items randomized.
// Parameters:		_list: The list of items to shuffle
// Requirements: 	random.ListItem
//				list.RemoveValue
// Version:		1.0 - Charles Ross - 19-01-23
// Example:		sample = result

Case (
  ValueCount ( _list ) = 0 ;
  dev.Nil ;

  Let (
    [
      _item = random.ListItem ( _list ) ;
      _list = list.RemoveValue ( _list ; _item ) ;

      _ = ""
    ] ;

    List (
      _item ;
      list.Shuffle ( _list )
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="190" name="list.Subtract"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.Subtract ( _list_1; _list_2 )
// Purpose:		Returns the elements in _list_1 that do not exist in _list_2.
// Parameters:		_list_1: A list of items
//              		_list_2: A list of items that should have at least some members in common with _list_1.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Is this the mathematical concept of relative complement?
// Example:		lsts.Subtract ( "1¶2¶3"; "2¶3¶4" ) = "1"
//				  and lsts.Subtract ( "2¶3¶4"; "1¶2¶3" ) = "4"

Case (
  ValueCount ( _subtract_from ) = 0;
  dev.Nil;

  Let (
    [
      _first = list.First ( _subtract_from );
      _rest = list.Rest ( _subtract_from );

      _is_member = list.IsMember ( _first; _subtract );

      _entry = Case (
        _is_member;	dev.Nil;
				_first & "¶"
      )
    ];

    _entry & list.Subtract ( _rest; _subtract )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="191" name="list.ToggleValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ToggleValue ( _list ; _value )
// Purpose:		Append the value to the list if it's absent from the list, remove it if present.
// Parameters:		_list:		The list to toggle the presence of the value
//				_value:	The value to toggle the presence within the list
// Requirements: 	list.IsMember
//				list.RemoveValue
//				list.Append
// Version:		1.0 - Charles Ross - 18-02-09
// Example:		list.ToggleValue ( list ( "one" ; "two" ; "three" ) ; "three" ) = List ( "one" ; "two" ) & ¶

Case (
  list.IsMember ( _value ; _list ) ;
  list.RemoveValue ( _list ; _value ) ;

  list.Append ( _list ; _value )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="192" name="list.ValuePosition"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// list.ValuePosition ( _item; _list )
// Purpose:		Returns which occurrence in the list the given item is at. In other words,
//				MiddleValues( TheList; ItemPosition( Item; TheList ); 1 ) = TheItem & "¶" (since
//				MiddleValues appends a carriage return to the end of it's return value).
// Parameters:		_list:			The list to search in
//				_item:		The item to search for
//				_start:		Which occurrence to begin looking at
// Version:		1.0 - Charles Ross 15-03-11
//				1.1 - Charles Ross - 17-09-10 - Changed to use Jim's algorithm
// Notes:			Add `occurrence` parameter.
// Example:		list.ValuePosition ( "4" ; "1¶2¶3¶4¶5" ; 1  ) = 4

Case (
  _start > ValueCount ( _list ) ;
  0 ;

  _item = GetValue ( _list ; _start ) ;
  _start ;

  list.ValuePosition ( _item ; _list ; _start + 1 )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="193" name="log_____ Log Module Functions ______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for easy manipulation of let notation strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="194" name="log.SystemState"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// log.SystemState
// Purpose:		Record the (nearly) complete state of the system in let-notation
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-18
// Notes:			Let-notation result has keys of `Get` function parameters with values of them being executed.
// Example:		sample = result

Case (
  // ========================================
  // Step 0: Setup
  IsEmpty ( $_log_systemstate_step ) ;
  Let (
    [
      $_log_systemstate_debug = False ;

      $_log_systemstate_get_params = List (
        "AccountExtendedPrivileges" ;
        "AccountName" ;
        "AccountPrivilegeSetName" ;
        "ActiveFieldName" ;
        "ActiveFieldTableName" ;
        "ActiveLayoutObjectName" ;
        "ActiveModifierKeys" ;
        "ActiveSelectionSize" ;
        "ActiveSelectionStart" ;
        "AllowAbortState" ;
        "ApplicationLanguage" ;
        "ApplicationVersion" ;
        "ConnectionAttributes" ;
        "ConnectionState" ;
        "CurrentHostTimestamp" ;
        "CurrentTimestamp" ;
        "CustomMenuSetName" ;
        "Device" ;
        "EncryptionState" ;
        "ErrorCaptureState" ;
        "FilePath" ;
        "FileMakerPath" ;
        "FoundCount" ;
        "HighContrastColor" ;
        "HighContrastState" ;
        "HostApplicationVersion" ;
        "HostIPAddress" ;
        "HostName" ;
        "InstalledFMPlugins" ;
        "LayoutAccess" ;
        "LayoutName" ;
        "LayoutTableName" ;
        "MultiUserState" ;
        "RecordAccess" ;
        "RecordID" ;
        "RecordNumber" ;
        "RecordOpenCount" ;
        "RecordOpenState" ;
        "PersistentID" ;
        "ScreenDepth" ;
        "ScreenHeight" ;
        "ScreenScaleFactor" ;
        "ScreenWidth" ;
        "ScriptName" ;
        "ScriptParameter" ;
        "ScriptResult" ;
        "SortState" ;
        "SystemIPAddress" ;
        "SystemLanguage" ;
        "SystemNICAddress" ;
        "SystemPlatform" ;
        "SystemVersion" ;
        "TotalRecordCount" ;
        "UserCount" ;
        "UserName" ;
        "UseSystemFormatsState" ;
        "WindowMode" ;
        "WindowHeight" ;
        "WindowLeft" ;
        "WindowName" ;
        "WindowOrientation" ;
        "WindowStyle" ;
        "WindowWidth" ;
        "WindowZoomLevel"
      ) ;

      $_log_systemstate_step = 1
    ] ;

    log.SystemState
  ) ;

  // ========================================
  // Step 1: Recursion
  $_log_systemstate_step = 1 ;
  Let (
    [
      _param = list.Pop ( "$_log_systemstate_get_params" ) ;

      $_log_systemstate_result = $_log_systemstate_result &
        let.Set ( _param ; Evaluate ( "Get ( " & _param & " )" ) ) ;

      $_log_systemstate_step = Case (
        ValueCount ( $_log_systemstate_get_params ) = 0	; 2
											; 1
      )
    ] ;
    log.SystemState
  ) ;

  // ========================================
  // Step 2: Cleanup
  $_log_systemstate_step = 2 ;
  Let (
    [
      _result = $_log_systemstate_result ;

      _ = Case (
        not $_log_systemstate_debug ;
        dev.ClearVars ( List ( "$_log_systemstate_debug" ; "$_log_systemstate_step" ; "$_log_systemstate_result" ; "$_log_systemstate_get_params" ) )
      ) ;

      // Step is always cleared regardless of debug mode.
      $_log_systemstate_step = dev.Nil
    ] ;
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="195" name="math_____ Math Functions ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that manipulate numbers in various ways.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="196" name="math.BaseToInteger"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.BaseToInteger ( _int_text; _base )
// Purpose:		Converts _number from the passed _base to base-10.
// Parameters:		_int_text:	An integer to convert.
//				_base:	The base to convert from.
// Requirements:	dev.Nil
// Version:		1.0 written 05-10-01 by Mikhail Edoshin
// Notes:			http://web.archive.org/web/20090707091229/
//				  http://edoshin.skeletonkey.com/2005/10/number_to_decim.html
// Example:		math.BaseToInteger ( "11F" ; 16 ) = 287

Case (
  IsEmpty ( _int_text )
    or ( _base < 2 )
    or ( _base > 36 );		dev.Nil;

  Let (
    [
      _len = Length ( _int_text );

      _chars			= data.Digits & data.Alphabet ;
      _pos			= Position ( _chars; Left ( _int_text; 1 ); 1; 1 );
      _digit_value	= ( _pos - 1 ) * ( _base ^ ( _len - 1 ) );
      _rest			= Right ( _int_text; _len - 1 );

      _result = _digit_value + math.BaseToInteger ( _rest; _base )
    ];
    
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="197" name="math.Format"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Format ( _number; _precision; _separator )
// Purpose:		Formats the number to the given precision with the given separator between thousands.
// Parameters:		_number: 		The number to format.
//				_precision:	The precision to format the number to, with dollars and cents, would
//							be 2, for example.
//				_separator:	The string to place between thousands.
// Author:			Agnès Barouh
// Version:		3.1 written 08-01-01
// Notes:			barouh.agnes@wanadoo.fr
//				The decimal separator should work for the locale it's run in.
// Example:		math.Format ( "69584" ; 2 ; " " ) = "69 584.00"

Let(
  [
    _rounded = Abs ( Round ( _number; _precision ) );

    _minus = Case (
      _number < 0;	"-";
				dev.Nil
    );

    _separated = Substitute (
      NumToJText ( Int ( _rounded ); 1; 0 );
      ",";	_separator
    );

    _decimal_separator = Filter ( 1 / 2; ".," ); // Will work based on locale.;

    // Fills precision with trailing zeros if needed.
    _frac = Middle ( _rounded - Int ( _rounded ) & Substitute ( ( 10 ^ _precision ) - 1; 9; 0 ); 2; _precision )
  ];
  
  Case (
    not IsEmpty ( _number );
   _minus & _separated &
    Case (
      _precision > 0;
      _decimal_separator & _frac
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="198" name="math.FormatCurrency"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.FormatCurrency ( _number )
// Purpose:		Converts the number to a currency representation of dollars and cents.
// Parameters:		_number:	The amount of money to represent.
// Requirements: 	numbers.Format
// Version:		1.0 written 15-03-11 by Charles Ross
// Example:		math.FormatCurrency ( 12345.67 ) = "$12,345.67"

"$" & math.Format ( _number; 2; "," )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="199" name="math.FormatOrdinal"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.FormatOrdinal ( _number )
// Purpose:		Returns the number as ordinal text ("1st", "3rd", etc.) with the ordinal text superscripted.
// Parameters:		_number:	The number to return as an ordinal.
// Author:			Vaughan Bromfield, Bob Weaver, LaRetta
// Version:		1.0 - Vaughan Bromfield, Bob Weaver, LaRetta
//				1.2 - 15-03-26 - make superscript a constant instead of string
// Notes:			The superscript feature was added by an unknown individual.
//				Adapted from http://www.briandunning.com/cf/737
// Example:		math.FormatOrdinal ( 4 ) = "4th" // with "th" as a superscript.

Let (
  [ 
    _style	= Superscript; // Can be made null to remove formatting
    _digit	= Int( GetAsNumber( _number ) );
    _tens	= Mod ( Abs( _digit ); 100 );

    _ordinal = Choose (
      Min ( 4 ; Mod ( _tens ; 10 ) ) * ( ( _tens < 11 ) or ( _tens > 13 ) );
      "th"; "st"; "nd"; "rd"; "th"
    )
  ];

  _digit & TextStyleAdd ( _ordinal; _style )

)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="200" name="math.Fractile"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Fractile ( _value ; _list ; _pieces )
// Purpose:		Which fractile does the value fall in when the list is sorted?
// Parameters:		_value:	The value to find the fractile for
//				_list:		The list that contains the value
//				_pieces:	How many pieces to break the list into
// Requirements: 	list.ValuePosition
//				math.RoundUpTo
// Version:		1.0 - Charles Ross - 17-12-13
// Example:		math.Fractile ( -10 ; List ( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; -10 ) ; 5 ) = 1

Let (
  [
    _list  = SortValues ( _list ; 2 ) ;

    _pos = list.ValuePosition ( _value ; _list ; 1 ) ;
    _count = ValueCount ( _list ) ;

    _fraction = _pos / _count
  ] ;

  math.RoundUpTo ( _fraction ; 1 / _pieces ) * _pieces
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="201" name="math.IntegerToBase"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IntegerToBase ( _int_text; _base )
// Purpose:		Converts an integer into a textual represention of the number in the given base.
// Parameters:		_int_text:	A textual representation of the integer in the tiven base
//				_base:	The base to convert from.
// Requirements: 	dev.Nil
// Version:		1.0 written 05-10-01 by Mikhail Edoshin
// Notes:			http://web.archive.org/web/20100117170354/
//				  http://edoshin.skeletonkey.com/2005/10/number_to_base.html
// Example:		math.IntegerToBase ( 287 ; 16 ) = "11F"

Case(
  IsEmpty ( _int )
    or ( _base < 2 )
    or ( _base > 36 )
    or ( Int ( _int ) ≠ _int ) ;		dev.Nil ;

  Let(
    [
      _chars = data.Digits & data.Alphabet ;

      _current_digit = Middle ( _chars ; Mod ( _int ; _base ) + 1 ; 1 )
    ];
    
    Case(
      _int ≥ _base;	math.IntegerToBase( Div ( _int ; _base ) ; _base )
    )  & _current_digit
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="202" name="math.IntegerToHex"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IntegerToHex ( _int )
// Purpose:		Converts an decimal integer into its hexadecimal form.
// Parameters:		_int:	The integer to convert.
// Requirements: 	nump.IntegerToBase
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		math.IntegerToHex ( 287 ) = "11F"

math.IntegerToBase ( _int ; 16 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="203" name="math.IsInteger"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IsInteger ( _number )
// Purpose:		Returns true if the number is an integer.
// Parameters:		_number:	The number to test for being an integer.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		( math.IsInteger ( 6 ) = 1 ) and ( math.IsInteger ( 3.14 ) = 0 )

Int( _number ) = _number]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="204" name="math.IsNumber"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.IsNumber ( _value )
// Purpose:		Determine if the supplied value is numeric
// Parameters:		_value: The value to test.
// Version:		1.0 - Unknown - 15-03-11
// Notes:			Adapted from http://fmfunctions.com/functions_display_record.php?functionId=161
// Example:		math.IsNumber ( 0 ) and math.IsNumber ( -0 ) and math.IsNumber ( 0.1 ) and math.IsNumber ( 1 ) and math.IsNumber ( 1.2 )
//				  and math.IsNumber ( -1.2 ) and math.IsNumber ( 1.234e+124 ) and math.IsNumber ( -1.234e+124 )
//				  and math.IsNumber ( 10^50 ) and ( not math.IsNumber ( "abc" ) ) and ( not math.IsNumber ( "1.2.3" ) )
//				  and ( not math.IsNumber ( "0001" ) )

Let(
  [
    _decimal_separator = Middle( 3 / 2; 2; 1 ); // do some division to get separator

    _cleaned_value = Substitute(
      _value ;
      [ "e+" ;	"" ];
      [ "E+" ;	"" ];
      [ "e-" ;		"" ];
      [ "E-" ;		"" ]
    );

    _filtered_value = Filter( _cleaned_value; "1234567890-" & _decimal_separator );

    _decimal_count = PatternCount( _value; _decimal_separator )
  ];

  Exact( _filtered_value ; _cleaned_value )
    and ( Left( _value; 1 ) ≠ "0"
      or _value = "0"
      or Left( _value; 2 ) = "-0"
      or Left( _value; 2 ) = "0" & _decimal_separator
    )
    and _decimal_count ≤ 1
    and _value ≠ "-"
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="205" name="math.Permutations"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Permutations ( _list )
// Purpose:		Return a list of pseudo-lists of the permutations of the given list.
// Parameters:		_list:	The list of items to permute.
// Version:		1.0 - Jed Verity
//				2.0 - Charles Ross - 18-09-05
// Notes:			https://www.briandunning.com/cf/208
// Todo:			To dos
// Example:		sample = result

// after first call, text looks like: text|sub(or)main|counter|subcounter|output

Let (
  [
    _nil = "" ;
    _first = not PatternCount ( _list ; "|" ) ;

    _p1 = Position ( _list ; "|" ; 1 ; 1 ) ;
    _pz = Position ( _list ; "|" ; 1 ; PatternCount ( _list ; "|" ) ) ;

    _output = Case (
      not _first	; Right ( _list ; Length ( _list ) - _pz - 1 )
			; _nil
    ) ;

    _v = Case (
      _first	; _list
		; Left( _list ; _p1 - 1 ) 
    ) ;

    _textvals = Case (
      not _first	; Substitute ( Middle ( _list ; _p1 + 1 ; _pz - _p1 - 1 ) ; "|" ; "¶" )
			; _nil
    ) ;

    _method = Case (
    not _first	; GetValue ( _textvals ; 1 )
			; _nil
    ) ;

    _c		= Case ( _first ; 1 ; GetValue ( _textvals ; 2 ) ) ;
    _cs	= Case ( _first ; 1 ; GetValue ( _textvals ; 3 ) )
  ] ;

  Case ( 
    _method = "sub" ;

    Case (_cs ≤ ValueCount(_v);

    Let (
      [
        _values_temp = _v 
;
        _counter_item		= MiddleValues ( _values_temp ; _c	; 1 ) ;
        _subcounter_item	= MiddleValues ( _values_temp ; _cs	; 1 ) ;

        _values_output = Substitute (
          Substitute (
            Substitute (
              _values_temp ;
              _counter_item ;
              Substitute (
                _subcounter_item ;
                "¶" ;
                _nil
              ) & "_zub¶" ) ;
              _subcounter_item ;
              _counter_item ) ;
            "_zub" ;
            _nil
          )
      ] ;

      math.Permutations (_values_output & "|main|" & _c+1 & "|0|" & _output) &
      math.Permutations (_v & "|sub|" & _c & "|" & _cs+1 & "|" & _output )

      )
    ) ;

    If (
      _c = ValueCount (_v);
      _output & _v & "¶"; 
      math.Permutations ( _v & Case (Right (_v;1) ≠ "¶";"¶") & "|sub|" & _c & "|" & _c & "|" & _output )
    ) & _output
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="206" name="math.RoundDownTo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.RoundDownTo ( _number; _precision )
// Purpose:		Rounds the number down to the nearest multiple of the precision.
// Parameters:		_number:		The number to round.
//				_precision:	The multiple to round to.
// Version:		1.0 - Mikhail Edoshin - 06-01-01
// Notes:			http://web.archive.org/web/20100122090742/
//				  http://edoshin.skeletonkey.com/2006/01/rounding_to_a_g.html
//				To round time use a precision that is the number of seconds you want to round to, for
//				example, a precision of 300 woiuld round to the nearest 15 minutes.
//				To round currency to the nearest quarter, use a precision of 0.25.
// Example:		( math.RoundDownTo ( 5; 2 ) = 4 )
//				  and ( math.RoundDownTo ( Time ( 1; 23; 45 ); 15 * 60 ) = Time ( 1; 15; 0 ) )

Floor( _number / _precision ) * _precision]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="207" name="math.RoundTo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.RoundTo ( _number; _precision )
// Purpose:		Rounds the number to the nearest multiple of the precision.
// Parameters:		_number:		The number to round.
//				_precision:	The multiple to round to.
// Version:		1.0 - Mikhail Edoshin - 06-01-01
// Notes:			http://web.archive.org/web/20100122090742/
//				  http://edoshin.skeletonkey.com/2006/01/rounding_to_a_g.html
//				To round time use a precision that is the number of seconds you want to round to, for
//				example, a precision of 300 woiuld round to the nearest 15 minutes.
//				To round currency to the nearest quarter, use a precision of 0.25.
// Example:		( math.RoundTo ( 5; 3 ) = 6 )
//				  and ( math.RoundTo ( Time ( 1; 23; 45 ); 15 * 60 ) = Time ( 1; 30; 0 ) )

Round( _number / _precision; 0 ) * _precision

/*Don't calculate the number of seconds: use the Time() function instead. For example, to round to an hour:

math.RoundTo( Time Field, Time( 1, 0, 0 ) )
to 15 minutes:

math.RoundTo( Time Field, Time( 0, 15, 0 ) )
You might also want to make a few constant custom functions: HOURS and MINUTES. These function must return Time( 1, 0, 0 ), Time( 0, 1, 0 ) respectively. (You could make a function for seconds, if you need them, but you'll need to select a name carefully, because Seconds is taken already.) With such functions your code will be more readable, like this:

math.RoundTo( Time Field, 2 * HOURS )

math.RoundTo( Time Field, 0.5 * HOURS )

math.RoundTo( Time Field, 15 * MINUTES )

math.RoundTo( Time Field, 1/2 * MINUTES )*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="208" name="math.RoundToSignificantDigits"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// nump.RoundToSignificantDigits ( _number ; _digits )
// Purpose:		Rounds the passed number to the passed significant digits.
// Parameters:		_number:	The number to round
//				_digits:	The number of significant digits to round to
// Version:		1.0 written 15-11-06 by Charles Ross
// Example:		( nump.RoundToSignificantDigits ( 12345.6789 ; 3 ) = 12300 )
//				  and
//				( nump.RoundToSignificantDigits ( 12345.6789 ; 6 ) = 12345.7 )

Let (
  [
    // Find out how many integer digits the number has
    _ceiling = Ceiling ( Log ( _number ) ) ;

    _precision = ( _ceiling * -1 ) + _digits ;

    _round = Round ( _number ; _precision )
  ] ;

  _round
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="209" name="math.RoundUpTo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.RoundUpTo ( _number; _precision )
// Purpose:		Rounds the number up to the nearest multiple of the precision.
// Parameters:		_number:		The number to round.
//				_precision:	The multiple to round to.
// Version:		1.0 - Mikhail Edoshin - 06-01-01
// Notes:			http://web.archive.org/web/20100122090742/
//				  http://edoshin.skeletonkey.com/2006/01/rounding_to_a_g.html
//				To round time use a precision that is the number of seconds you want to round to, for
//				example, a precision of 300 woiuld round to the nearest 15 minutes.
//				To round currency to the nearest quarter, use a precision of 0.25.
// Example:		( math.RoundUpTo ( 5; 2 ) = 2 )
//				  and ( math.RoundUpTo ( Time ( 1; 23; 45 ); 15 * 60 ) = Time ( 1; 30; 0 ) )

Ceiling( _number / _precision ) * _precision]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="210" name="math.StDev"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.StDev ( _list )
// Purpose:		Returns the standard deviation given a list of sampled data
// Parameters:		_list:	The list of sampled data
// Requirements:	lsts.RemoveBlanks
// Version:		1.0 written 15-09-12 by Charles Ross
// Example:		Round ( math.StDev ( List ( 5, 6, 7, 8 ) ) ; 2 ) = 1.29

Let (
  [
    _params = Substitute ( list.RemoveBlanks ( _list ) ; "¶" ; " ; " ) ;
    _calc = "StDev ( " & _params & " )" ;
    _stdev = Evaluate ( _calc ) ;

    _result = Case (
      ValueCount ( _list ) = 0 ;	0 ;
						_stdev
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="211" name="math.StDevP"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.StDevP ( _list )
// Purpose:		Returns the standard deviation given a list of population data
// Parameters:		_list:	The list of population data
// Requirements:	lsts.RemoveBlanks
// Version:		1.0 written 15-09-12 by Charles Ross
// Example:		Round ( math.StDevP ( List ( 5; 6; 7; 8 ) ) ; 2 ) = 1.12

Let (
  [
    _params = Substitute ( list.RemoveBlanks ( _list ) ; "¶" ; " ; " ) ;
    _calc = "StDevP ( " & _params & " )" ;
    _stdevp = Evaluate ( _calc ) ;

    _result = Case (
      ValueCount ( _list ) = 0 ;	0 ;
						_stdevp
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="212" name="math.Sum"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.Sum ( _list )
// Purpose:		Returns the sum of a list of numbers.
// Parameters:		_list:	The list to produce the sum of.
// Requirements: 	lsts.First
//				lsts.Rest
// Version:		1.0 - Charles Ross - 15-03-06
// Notes:			Might it be better to write this as non-recursive, using Substitute to change the list to
//				something that could be passed to Evaluate?
// Example:		math.Sum ( List ( 1 ; 2 ; 3 ) ) = 6

Case (
  // Recursive exit condition.
  ValueCount ( _list ) = 0;	dev.Nil;

  Let (
    [
      _first = list.First ( _list );
      _rest = list.Rest ( _list );

      _result = GetAsNumber ( _first ) + math.Sum( _rest )
    ];

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="213" name="math.WeightedAverage"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// math.WeightedAverage ( _weights; _values )
//
// Purpose:		Given a list of weights and matching values, return the weighted average.
//
// Parameters:		_weights:	The weights that each member of the values list should have
//				_values:	The values to provide a weighted average of.
//
// Requirements: 	lsts.CustomList
//				lsts.Sum
//
// Author:			Charles Ross
// Version:		1.0 written 15-03-06
//
// Notes:			List sizes should match, but if they don't the longer one has zero values for excess
//				members.
//
//				Underlying math (LaTeX):
//				\bar{x} = \frac{ \sum_{i=1}^n w_i x_i}{\sum_{i=1}^n w_i}
//
// Example:
// math.WeightedAverage ( "10¶5¶"; "10¶40¶" ) = 20

Let (
  [
    _highest_count = Max ( ValueCount ( _weights ); ValueCount ( _values ) );

    // Create a list that multiplies each weight by its matching value.
    $_weighted_average_weights	= _weights;
    $_weighted_average_values		= _values;

    _code = "GetValue ( $_weighted_average_weights; %n ) * GetValue ( $_weighted_average_values; %n )";
    _products = list.CustomList ( 1; _highest_count; _code );

    _product_sum	= math.Sum( _products );
    _weight_sum		= math.Sum( _weights );

    $_weighted_average_weights	= dev.Nil;
    $_weighted_average_values		= dev.Nil;

    _result = _product_sum / _weight_sum
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="214" name="mode_____ Mode Constants ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Named constants for Get ( WindowMode ) return values]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="215" name="mode.Browse"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Browse
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate browse mode.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in browse mode...
//				Get ( WindowMode ) = mode.Browse

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="216" name="mode.Find"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Find
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate find mode.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in find mode...
//				Get ( WindowMode ) = mode.Find

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="217" name="mode.Layout"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Layout
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate layout mode.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in layout mode...
//				Get ( WindowMode ) = mode.Layout

4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="218" name="mode.Preview"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Preview
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate preview mode.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while the window is in preview mode...
//				Get ( WindowMode ) = mode.Preview

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="219" name="mode.Printing"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// mode.Printing
//
// Purpose:		A constant representing what Get ( WindowMode ) returns to indicate printing mode.
//
// Author:			Charles Ross
// Version:		1.0 written 15-03-11
//
// Example:
// // When evaluated while the window is in printing mode...
// Get ( WindowMode ) = mode.Printing

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="220" name="modifier_____ Modifier Key Functions _______________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that make testing for modifier keys more readable.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="221" name="modifier.Alt"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Alt
// Purpose:		Returns the constant for the bit that is set when the alt (option) key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or option key is pressed...
//				modifier.Alt = 4
//				  and modifier.KeyActive ( modifier.Alt )

4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="222" name="modifier.BitIsSet"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.BitIsSet ( _number ; _bit )
// Purpose:		Returns True if the binary bit of the number is on.
// Parameters:		_number:	The number whose bit we are checking
//				_bit:		Which bit to check
// Version:		1.0 - Mikhail Edoshin - 05-11-01
// Notes:			http://web.archive.org/web/20100919220414/http://edoshin.skeletonkey.com/2005/11/custom_function.html
// Example:		mkey.BitIsSet ( 16; 5 ) = 1 // 16 = 10000 in binary
//				  and mkey.BitIsSet ( 18; 2 ) = 1 // 18 = 10010 oin binary
//				  and mkey.BitIsSet ( 18; 3 ) = 0

Mod ( Div ( _number ; 2 ^ ( _bit - 1 ) ) ; 2 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="223" name="modifier.CapsLock"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.CapsLock
// Purpose:		Returns the constant for the bit that is set when the caps lock key is on.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the caps lock key is active…
//				modifier.CapsLock = 2
//				  and modifier.KeyActive ( mkey.CapsLock )

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="224" name="modifier.Command"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Command
// Purpose:		Returns the constant for the bit that is set when the command (apple) key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or command key is pressed...
//				modifier.Command = 5
//				  and modifier.KeyActive ( modifier.Command )

5]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="225" name="modifier.Control"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Control
// Purpose:		Returns the constant for the bit that is set when the control key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or control key is pressed...
//				modifier.Control = 3
//				  and modifier.KeyActive ( modifier.Control )

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="226" name="modifier.KeyActive"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.KeyActive ( _key )
// Purpose:		Returns true when passed the custom function constant for the specified key.
// Parameters:		_key:		An integer from 1 to 5, can be encapsulated with appropriate custom
//						functions.
// Requirements:	mkey.BitIsSet
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When the shift and alt (or option) key is pressed...
//				modifier.KeyActive ( modifier.Shift )
//					and modifier.KeyActive ( modifier.Alt )

modifier.BitIsSet ( Get ( ActiveModifierKeys ) ; _key )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="227" name="modifier.Shift"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// modifier.Shift
// Purpose:		Returns the constant for the bit that is set when the shift key is pressed.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			To be used with modifier.KeyActive
// Example:		// When the alt or shift key is pressed...
//				modifier.Shift = 1
//				  and modifier.KeyActive ( modifier.Shift )

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="228" name="msg_____ Messages __________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that generally are only useful to the developer, making his or her life a bit easier, hopefully.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="229" name="msg.InsufficientPrivileges"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.InsufficientPrivileges
// Purpose:		Provides a single place to calculate the invalid parameters message
// Version:		1.0 - Charles Ross - 19-08-16
// Example:		sample = result

"You do not have sufficient privileges to " & dev.Default ( _action ; "perform that action" ) & "."]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="230" name="msg.InvalidConfigMessage"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.InvalidConfigMessage ( _module ; _reasons )
// Purpose:		Provides a single place to calculate the invalid parameters message
// Version:		1.0 - Charles Ross - 19-08-15
// Example:		msg.InvalidConfigMessage ( "accounts" ; "reasons" ) = "The accounts module is not properly cnfigured: reasons"

"The " & _module & " module is not properly cnfigured: " & _reasons]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="231" name="msg.InvalidParamsMessage"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// msg.InvalidParamsMessage
// Purpose:		Provides a single place to calculate the invalid parameters message
// Version:		1.0 - Charles Ross - 19-08-15
// Example:		sample = result

"Invalid parameters were sent to " & Quote ( Get ( ScriptName ) ) & ". Pleasee contact the developer.¶¶" & Get ( ScriptParameter )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="232" name="path_____ File Paths _______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that manipulate file paths from one format to another.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="233" name="path.DesktopFilepath"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.DesktopFilepath ( _filename )
// Purpose:		Returns a platform-specific path to a filename on the desktop.
// Parameters:		_filename:		The name of the file to calculate a path to.
// Requirements: 	path.ProtocolPlatform
// Version:		1.0 - Charles Ross - 18-12-18
// Example:		sample = result

path.ProtocolPlatform & Get ( DesktopPath ) & _filename]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="234" name="path.DocumentsFilepath"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.DocumentsFilepath ( _filename )
// Purpose:		Returns a platform-specific path to a filename in the documents directory.
// Parameters:		_filename:		The name of the file to calculate a path to.
// Requirements: 	path.ProtocolPlatform
// Version:		1.0 - Charles Ross - 18-05-14
// Example:		sample = result

path.ProtocolPlatform & Get ( DocumentsPath ) & _filename]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="235" name="path.FileExtension"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.FileExtension ( _name )
// Purpose:		Given a file name, returns the extension, if any.
// Parameters:		_name:	The name of the file to get the extension from.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			An empty string is returned if there is no extension and the function works
//				correctly even if there are multiple periods in the file name and regardless
//				or the length of the extension.
// Example:		path.FileExtension ( "filename.txt" ) = "txt"

Let (
  [
    _dot_count		= PatternCount ( _name; "." );
    _last_dot_pos	= Position ( _name; "." ; 1; _dot_count );
    _ext_len		= Length ( _name ) - _last_dot_pos
  ];

  Case (
    _dot_count = 0;	dev.Nil;
				Right ( _name; _ext_len )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="236" name="path.FileMaker"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.FMPath ( _os_path )
// Purpose:		Converts an operating system specific path to a FileMaker format.
// Parameters:		_os_path:	The operating system specific path to convert.
// Requirements: 	The BaseElements plugin
//				txtp.TrimStart
//				path.ProtocolPlatform
//				sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Nicholas Orr - 11-06-03
// Notes:			http://www.goya.com.au/blog/guide-filemaker-import-paths
// Example:		sample = result

Let (
  [ 
    _users			= "/Users" ; 
    _users_len		= Length ( _users ) ; 
    _username		= text.TrimStart ( _os_path ; _users_len + 1 ) ; 
    _username		= Left ( _username ; Position ( _username ; "/" ; 1 ; 1 ) - 1 ) ; 
    _system_drive	= dev.SystemDrive ;
    _system_drive	= Left ( _system_drive ; Length ( _system_drive ) - 1 ) ; 
    _volume		= "/Volumes" ; 
    _volume_len		= Length ( _volume ) ; 
    _path_len		= Length ( _os_path ) ; 

    _is_filevault = platform.IsMac
      and ( Left ( _os_path ; _users_len ) = _users )
      and BE_FileExists ( _users &"/." & _username ) ; 

    _is_external_drive = ( Left ( _os_path ; _volume_len ) = _volume ) ;

    _external_path	= Right ( _os_path ; _path_len - _volume_len ) ; 
    _filevault_path	= Right ( _os_path ; _path_len - _users_len ) ; 

    _mac_path = Case (
      _is_external_drive ;	_external_path ;
      _is_filevault ;		_filevault_path ;
					_system_drive & _os_path
    ) ; 

    _win_path = _system_drive & Substitute ( _os_path ; "\\" ; "/" );

    _result = path.ProtocolPlatform & Case (
	platform.IsMac ;	_mac_path ;
        platform.IsWin ;	_win_path
    )
  ] ; 

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="237" name="path.Filename"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.Filename
// Purpose:		Return the filename given a file path
// Parameters:		_path:	The path to the file
//				_include_ext:	Boolean value, if True, return the extension as well.
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street
// Todo:			Extend funcitonality to work with Windows-based file paths
// Example:		sample = result

/* Copyright 2012 Magellan's Law Corporation

FUNCTION */

 Let (
  [ 
    _len = Length ( _path ) ; 
 
    // Get the location of the rightmost slash in the path -- this marks the end of the directory that encloses the file
    _pos = Position ( _path ; "/" ; _len ; -1 ) ; 
 
    // Calcuate the length of the filename and extension
    _len = _len - _pos ; 
 
    // Extract the rightmost characters of the path that contain the filename and extension
    _name = Right ( _path ; _len ) ;

    // Depending on the boolean, we either return the filename ( fn ) or return the result after removing the extension
    _result = Case (
      _include_ext	; _name
				; Left ( _name ; Position ( _name ; "." ; 1 ; 1 ) - 1 )
    )

  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="238" name="path.OperatingSystem"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.OSPath ( _fm_path )
// Purpose:		Converts a FileMaker style path into one native to the current OS.
// Parameters:		_fm_path:	The native FileMaker path to convert.
// Requirements: 	The BaseElements plugin
//				txtp.TrimStart
//				txtp.StartsWith
//				path.ProtocolFile
//				path.ProtocolPlatform
//				sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Nicholas Orr - 11-06-03
// Notes:			http://www.goya.com.au/blog/guide-filemaker-import-paths
// Example:		sample = result

Let (
  [ 
    _desktop			= text.TrimStart ( Get ( DesktopPath ) ; 1 ) ; 
    _users				= "/Users" ; 
    _username			= Left ( _desktop ; Position ( _desktop ; "/" ; 1 ; 1 ) - 1 ) ; 
    _system_drive		= Get ( SystemDrive ) ; 
    _system_drive_len		= Length ( _system_drive ) ; 
    _volumes			= "/Volumes" ; 

    _path = Case ( 
      text.StartsWith ( _fm_path ; path.ProtocolFile ) ;
      text.TrimStart ( _fm_path ; Length ( path.ProtocolFile ) ) ; 

      text.StartsWith ( _fm_path ; path.ProtocolPlatform ) ;
      text.TrimStart ( _fm_path ; Length ( path.ProtocolPlatform ) ) ; 

      _fm_path
    ) ; 

    _is_system	= text.StartsWith ( _path ; _system_drive ) ; 
    _is_filevault	= text.StartsWith ( _path ; "/" & _username )
      and BE_FileExists ( _users & "/." & _username ) ; 

    _system_path	= text.TrimStart ( _path ; _system_drive_len - 1 ) ; 
    _filevault_path	= _users & _path ; 

    _mac_path = Case (
      _is_filevault ;	_filevault_path ;
      _is_system ;	_system_path ;
				_volumes & _path
    ) ; 

    _win_path = text.TrimStart ( _path ; 1 );

    _result = Case (
      platform.IsMac ;	_mac_path ;
      platform.IsWin ;	_win_path
    )
  ] ; 

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="239" name="path.ParentFolder"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ParentFolder
// Purpose:		Return the parent folder of the supplied path
// Parameters:		_path:	The path to return the parent folder of
// Version:		1.0 - Charles Ross
// Notes:			This function does not query to operating system to determine whether the path is a
//				file or folder it can only use information within the path - such as the existence of a
//				trailing path separator
// Example:		path.ParentFolder ( "/Volumes/Macintosh HD/Users/" ) = "/Volumes/Macintosh HD/"

Let (
  [
    _mac_sep	= PatternCount ( _path ; "/" ) ;
    _win_sep	= PatternCount ( _path ; "\\" ) ;

    _sep = Case (
        _mac_sep > 0		; "/"
					; "\\"
    ) ;

    _ends_with_sep = ( Right ( _path ; 1 ) = _sep ) ;

    _parts = Substitute ( _path ; _sep ; ¶ ) ;

    _count = ValueCount ( _parts ) ;
    _count = Case (
      _ends_with_sep	; _count
				; _count - 1
    )
  ] ;

  Substitute ( LeftValues ( _parts ; _count - 1 ) ; ¶ ; _sep )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="240" name="path.POSIX"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.POSIX
// Purpose:		Returns the POSIX path given a path returned by FileMaker.
// Parameters:		_path:	The FileMaker path returned by one of the `Get` functions.
// Version:		1.0    - Charles Ross - 17-06-16
//				1.0.1 - Charles Ross - 17-10-20 - Update to work properly with FileMaker paths and on FMS
// Example:		path.POSIX ( Get ( DesktopPath ) ) = "/Users/chuck/Desktop/"

Substitute (
  _path ;
  [ dev.SystemDrive	; "/"		] ;
  [ "filemac:"		; dev.Nil	] ;
  [ "filewin:"		; dev.Nil	] ;
  [ "file:"			; dev.Nil	]
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="241" name="path.ProtocolFile"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolFile
// Purpose:		Returns the constant string that represents the protocol for file paths.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		path.ProtocolFile = "file:"

"file:"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="242" name="path.ProtocolMac"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolMac
// Purpose:		Returns the constant string that represents the protocol for Mac file paths.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		path.ProtocolMac = "filemac:"

"filemac:"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="243" name="path.ProtocolPlatform"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolPlatform
// Purpose:		Returns the constant string that represents the path protocol for the current platform.
// Requirements:	sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		// When running under OS X…
//				path.ProtocolPlatform = "filemac:"

Case (
  platform.IsMac ; path.ProtocolMac ;
  platform.IsWin ; path.ProtocolWin
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="244" name="path.ProtocolWin"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.ProtocolWin
// Purpose:		Returns the constant string that represents the protocol for Windows file paths.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		path.ProtocolWin = "filewin:"

"filewin:"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="245" name="path.TemporaryFilepath"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// path.TemporaryFilepath ( _filename )
// Purpose:		Returns a platform-specific path to a filename in the temporary directory.
// Parameters:		_filename:		The name of the file to calculate a path to.
// Requirements: 	path.ProtocolFilePlatform
// Version:		1.0 - Charles Ross - 15-06-01
// Example:		sample = result

path.ProtocolPlatform & Get ( TemporaryPath ) & _filename]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="246" name="platform_____ Platform Functions ___________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for determining the current platform.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="247" name="platform.ArchitectureIs32"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.ArchitectureIs32
// Purpose:		Returns true when executed on a 32-bit intel-based system.
// Requirements: 	platform.Intel32
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		// When running on a Mac Core Duo…
//				plat.ArchitectureIs32 = True

Get ( ApplicationArchitecture ) = platform.Intel32]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="248" name="platform.Go"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.Go
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate iOS.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Go...
//				Get ( SystemPlatform ) = plat.Go

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="249" name="platform.Intel32"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.Intel32
// Purpose:		A constant of what is returned by Get ( ApplicationARchitecture ) when running on
//				Intel 32-bit.
// Version:		1.0 - Charles Ross - 15-06-12
// Example:		plat.Intel32 = "i386"

"i386"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="250" name="platform.IsDesktop"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsDesktop
// Purpose:		Returns true if the system is running on a traditional computer.
// Requirements: 	sysk.PlatformIsMac
//				sysk.PlatformIsWin
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When the system is running on OS X or Windows...
//				plat.IsDesktop = 1

platform.IsMac or platform.IsWin]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="251" name="platform.IsGo"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsGo
// Purpose:		Returns true if the system is running under FileMaker Go.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLATFORM_OVERRIDE_IPAD and
//				$$_PLATFORM_OVERRIDE_IPHONE to allow the developer to override the return
//				value during development and testing.
// Example:		// While running the system on an iPad or iPhone...
//				plat.IsGo = 1

( Get ( SystemPlatform ) = platform.Go )
  or $$_PLATFORM_OVERRIDE_IPAD
  or $$_PLATFORM_OVERRIDE_IPHONE]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="252" name="platform.IsiPad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsiPad
// Purpose:		Returns true if the system is running under on an iPad.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLATFORM_OVERRIDE_IPAD and to allow the
//				developer to override the return value during development and testing.
// Example:		// While running the system on an iPad...
//				plat.IsiPad = 1

( platform.VersionName = platform.VersioniPad )
  or $$_PLATFORM_OVERRIDE_IPAD]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="253" name="platform.IsiPhone"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsiPhone
// Purpose:		Returns true if the system is running under on an iPhone or iPod Touch.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLAT_OVERRIDE_IPHONE and to allow the
//				developer to override the return value during development and testing.
// Example:		// While running the system on an iPhone or iPod Touch...
//				sysk.PlatformIsiPhone = 1

( platform.VersionName = platform.VersioniPhone )
  or $$_PLATFORM_OVERRIDE_IPHONE]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="254" name="platform.IsMac"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsMac
// Purpose:		Returns True if the system is running under OS X.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLAT_OVERRIDE_IPAD and
//				$$_PLAT_OVERRIDE_IPHONE to allow the developer to override the return
//				value during development and testing.
// Example:		// While running the system on a Mac...
//				plat.IsMac = 1

( Get ( SystemPlatform ) = platform.Mac )
  and ( not $$_PLATFORM_OVERRIDE_IPAD )
  and ( not $$_PLATFORM_OVERRIDE_IPHONE )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="255" name="platform.IsServer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsServer
// Purpose:		Returns true if the system is running under on FileMaker Server.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// While running the system on FileMaker Server...
//				plat.IsServer = 1

platform.VersionName = platform.VersionServer]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="256" name="platform.IsWeb"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsWeb
// Purpose:		Returns true if the system is running under on CWP or WebDirect.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// While running the system on CWP or Webdirect...
//				plat.IsWeb = 1

platform.VersionName = platform.VersionWeb]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="257" name="platform.IsWin"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.IsWin
// Purpose:		Returns True if the system is running under Windows.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Makes use of global variables $$_PLAT_OVERRIDE_IPAD and
//				$$_PLAT_OVERRIDE_IPHONE to allow the developer to override the return
//				value during development and testing.
// Example:		// While running the system on Windows...
//				plat.IsWin = 1

( Get( SystemPlatform ) = platform.Win )
  and ( not $$_PLATFORM_OVERRIDE_IPAD )
  and ( not $$_PLATFORM_OVERRIDE_IPHONE )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="258" name="platform.Mac"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.Mac
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate OS X.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under OS X...
//				Get ( SystemPlatform ) = plat.Mac

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="259" name="platform.VersionAdvanced"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.VersionAdvanced
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Pro Advanced.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Pro Advanced...
//				Get ( ApplicationVersion ) = plat.VersionAdvanced

"ProAdvanced"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="260" name="platform.VersioniPad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.VersioniPad
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Go on an iPad.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Go on an iPad...
//				Get ( ApplicationVersion ) = plat.VersioniPad

"Go_iPad"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="261" name="platform.VersioniPhone"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.VersioniPhone
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Go on an iPhone or iPod Touch.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Go on an iPhone or iPod Touch
//				Get ( ApplicationVersion ) = plat.VersioniPhone

"Go"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="262" name="platform.VersionName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionName
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate Windows.
// Version:		1.0 - Charles Ross - 15-03-11
//				1.1 edited 15-07-12 corrected bug that caught underscore as word separator
// Example:		// When evaluated while running on the server…
//				platform.VersionName = platform.VersionName

GetValue ( Substitute ( Get ( ApplicationVersion ) ; " " ; "¶" ) ; 1 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="263" name="platform.VersionPro"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionPro
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Pro.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Pro...
//				Get ( ApplicationVersion ) = platform.VersionPro

"Pro"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="264" name="platform.VersionRuntime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionRuntime
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Runtime.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Runtime...
//				Get ( ApplicationVersion ) = platform.VersionRuntime

"Runtime"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="265" name="platform.VersionServer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionServer
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate FileMaker Server.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under FileMaker Server...
//				Get ( ApplicationVersion ) = platform.VersionServer

"Server"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="266" name="platform.VersionWeb"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// platform.VersionWeb
// Purpose:		A constant representing what the first word of Get ( ApplicationVersion ) returns to
//				indicate a web client.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while running under a web client...
//				Get ( ApplicationVersion ) = platform.VersionWeb

"Web"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="267" name="platform.Win"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plat.Win
//
// Purpose:		A constant representing what Get ( SystemPlatform ) returns to indicate Windows.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:
// // When evaluated while running under Windows...
// Get ( SystemPlatform ) = plat.Win

-2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="268" name="plugin_____ Plugin Functions _______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that deal with plugins in general.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="269" name="plugin.Attribute"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.Attribute ( _name; _attribute )
// Purpose:		Returns the plugin attribute at the given position.
// Parameters:		_name:	The name of the plugin to get the attribute of
//				_attribute:	Which attribute to return, "name", "version", or "status"
// Requirements:	list.CreateList
//				dev.Nil
// Version:		1.0.0 - Charles Ross - 15-04-19
//				1.1.0 - Charles Ross - 17-12-11 - Changed position parameter to attribute parameter
// Todo:			See if there's a way to make this function compatible with 11-.
// Example:		// Assuming ScriptMaster is installed and at version 4.32...
//				plugin.Attribute ( "360Works ScriptMaster"; "version" ) = 4.32

Let(
  [
    _position = list.ValuePosition ( _attribute ; List ( "name" ; "version" ; "status" ) ; 1 ) ;
    _plugins = Get ( InstalledFMPlugins ) ;

    _plugin_pos		= Position ( _plugins; _name; 1; 1 ) ;
    _before_name	= Left ( _plugins; _plugin_pos ) ;
    _pos_in_list		= PatternCount ( _before_name; "¶" ) + 1 ;
    _line			= GetValue ( _plugins; _pos_in_list ) ;
    _list			= list.CreateList ( _line ; ";" ) ;

    _result = GetValue ( _list; _position )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="270" name="plugin.IsReady"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.IsReady ( _name )
// Purpose:		Returns True if the named plugin is installed and enabled.
// Parameters:		_plugin_name:	The name of the plugin to check for
// Requirements:	plugin.Attribute
// Version:		1.0 - Charles Ross - 15-03-08
//				1.1 - Charles Ross - 15-04-19 abstracted out plug.Attribute.
// Todo:			See if there's a way to make this function compatible with 11-.
// Example:		// Assuming ScriptMaster is installed and enabled...
//				plugin.IsReady ( "360Works ScriptMaster" ) = 1

Let(
  [
    _plugins = Get ( InstalledFMPlugins );

    _installed = PatternCount (
      _plugins;
      _name
    );

    // No need to continue if the plugin is not installed.
    _result = _installed and ( plugin.Attribute ( _name; "status" ) = "Enabled" )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="271" name="plugin.RegisterScriptMasterFunction"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.RegisterScriptMasterFunction ( _signature; _code; _debug )
// Purpose:		Returns true the ScriptMaster function with the specified signature is already registered,
//				or gets successfully registered by this function. Returns false otherwise.
// Parameters:		_signature:	The signature of the function to register.
//				_code:		The Groovy code to execute for the function.
//				_debug:		Whether to force re-regerstering the function.
// Requirements: 	The ScriptMaster plugin, written with version 4.32.
// Version:		1.0 - Charles Ross - 15-04-19
// Example:		// See rgex.Match for an example of the use of this function.

Case (
  not plugin.IsReady ( "ScriptMaster" ) ;
  False ;

  // Register the function if it hasn't been already or if we're in debug mode.
  Case (
    not PatternCount ( <Function Missing> ; _signature ) or _debug ;
    <Function Missing> ( _signature ; _code ) ;

    // Return True if the function is already registered.
    True
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="272" name="plugin.Version"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// plugin.Version ( _plugin_name )
// Purpose:		Returns True if the named plugin is installed and enabled.
// Parameters:		_plugin_name:	The name of the plugin to check for
// Requirements:	plugin.Attribute
// Version:		1.0.0 - Charles Ross - 15-04-16
//				1.1.0 - Charles Ross - 15-04-19 abstracted out plug.Attribute.
//				1.1.1 - Charles Ross - 17-12-11 - Updated for new version of plugin.Attribute.
// Todo:			See if there's a way to make this function compatible with 11-.
// Example:		// Assuming ScriptMaster is installed and at version 4.32...
//				plugin.Version ( "360Works ScriptMaster" ) = 4.32

Let(
  [
    _plugins = Get ( InstalledFMPlugins );

    _installed = PatternCount (
      _plugins;
      _name
    );

    _version = plugin.Attribute ( _name; "version" );

    _result = Case (
      _installed;	_version;
			0
    )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="273" name="psos_____ Perform Script on Server _________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that ease working with and debugging Perform Script on Server steps.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="274" name="psos.ConditionalOverride"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.ConditionalOverride
// Purpose:		Allows the developer to turn off performing scripts on the server by holding down the
//				shift key.
// Requirements: 	devp.IsDeveloper
//				modifier.KeyActive
//				modifier.KeyActive
//				psos.TurnOverrideOn
//				psos.TurnOverrideOff
// Version:		1.0 - Charles Ross - 15-04-22
// Example:		// Assuming a developer is logged in and holds down the shift key...
//				psos.ConditionalOverride and psos.IsOverridden

Case (
  dev.IsDeveloper
    and modifier.KeyActive ( modifier.Shift );
  psos.TurnOverrideOn;

  psos.TurnOverrideOff
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="275" name="psos.IsOverridden"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.IsOverridden
// Purpose:		Provides a syntax checkable way to see if performing scripts on the server should be
//				overridden.
// Requirements: 	Makes use of $$_OVERRIDE_PSOS global variable
// Version:		1.0 - Charles Ross - 15-04-10
// Notes:			The developer may override performing scripts on the server in order to step through a
//				script using the debugger. In production this should never return true.
// Example:		// If the developer has overridden performing scripts on the server...
//				psos.IsOverridden = 1

GetAsBoolean ( $$_OVERRIDE_PSOS )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="276" name="psos.ShouldPerformOnServer"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.ShouldPerformOnServer
// Purpose:		Returns true if a script intended to run on the server can do so. Allows a script to
//				execute locally if needed or desired.
// Requirements: 	platform.IsServer
//				psos.IsOverridden
// Version:		1.0 - Charles Ross - 15-04-22
// Notes:			Three things must be true for this function to return true overall:
//				- The script this is called from is not currently running on the server
//				- The developer hasn't overridden performing scripts on the server
// Example:		// When all three conditions are true...
//				psos.ShouldPerformOnServer = 1

( not platform.IsServer )
  and
( not psos.IsOverridden )
  and
( Get ( MultiUserState ) = system.MultiUserStateClient )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="277" name="psos.TurnOverrideOff"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.TurnOverrideOff
// Purpose:		Turns overridding of performing scripts on server off.
// Requirements: 	Makes use of $$_OVERRIDE_PSOS global variable
//				dev.SetVarByName
// Version:		1.0 - Charles Ross - 15-04-10
// Notes:			The developer may override performing scripts on the server in order to step through a
//				script using the debugger. In production this should never return true.
// Example:		psos.TurnOverrideOff and ( not psos.IsOverridden )

dev.SetVarByName ( "$$_OVERRIDE_PSOS" ; dev.Nil )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="278" name="psos.TurnOverrideOn"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// psos.TurnOverrideOn
// Purpose:		Turns overridding of performing scripts on server on.
// Requirements: 	Makes use of $$_OVERRIDE_PSOS global variable
//				dev.SetVarByName
// Version:		1.0 - Charles Ross - 15-04-10
// Notes:			The developer may override performing scripts on the server in order to step through a
//				script using the debugger. In production this should never return true.
// Example:		psos.TurnOverrideOn and psos.IsOverridden

dev.SetVarByName ( "$$_OVERRIDE_PSOS" ; True )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="279" name="random_____ Randomizers ____________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that will generate random data to be filled into fields.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="280" name="random.ListItem"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.ListItem ( _list )
// Purpose:		Return a random item from the given list.
// Parameters:		_list:	The list to return a random item from.
// Requirements: 	random.Number
// Version:		1.0 - Charles Ross - 19-01-23
// Example:		sample = result

GetValue ( _list ; random.Number ( 1 ; ValueCount ( _list ) ; 0 ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="281" name="random.Number"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.Number ( _min; _max; _precision )
// Purpose:		Returns a random number between low and high to the set precision.
// Parameters:		_min:		the low end of the number range
//				_max:		the high end of the number range
//				_precision:	similar to precision in Round ( number ; precision )
// Requirements:	data.Digits
// Author:			Mislav Kos <mkos@soliantconsulting.com>
// Version:		1.0 - Mislav Kos <mkos@soliantconsulting.com> - 14-10-15
//				1.1 - Charles Ross - 15-05-22
// Example:		random.Number ( 5; 10; 2 ) ≥ 5

Let (
  [ 
    // _low will be empty if low is not a valid number
    _min = GetAsNumber ( Filter ( _min ; data.Digits & "-." ) ) ;

    // _high will be empty if low is not a valid number
    _max = GetAsNumber ( Filter ( _max ; data.Digits & "-." ) ) ;  

    // default to 0 if precision is not a valid number
    _precision = GetAsNumber ( Filter ( _precision ; data.Digits & "-." ) ) ; 
    _precision = Case (
      not IsEmpty ( _precision ) ;	_precision ;
						0
    ) ; 
	
    _number = Round ( Random * ( _max - _min ) + _min ; _precision );

    _result = Case (
      not IsEmpty ( _min ) and not IsEmpty ( _max ) and _max ≥ _min ;
      _number
    )
  ] ; 

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="282" name="random.Password"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.Password
// Purpose:		Returns a randomly generated password of the given length.
// Parameters:		_len:		The length of the returned password
// Requirements: 	random.PasswordChar
// Version:		1.0 - Jim Feuerstein
// Example:		sample = result

Case (
  _len > 0 ;
  random.PasswordChar & random.Password ( _len - 1 ) 
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="283" name="random.PasswordChar"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// random.PasswordChar
// Purpose:		Returns a random alphanumeric character excluding "O" and "I"
// Requirements: 	data.Alphabet
//				data.Digits
//				random.Number
// Version:		1.0 - Charles Ross - 17-03-13
// Notes:			"O" and "I" are excluded to prevent abmiguity with "0" and "1"
// Example:		sample = result

Let (
  [
    _chars = Upper ( data.Alphabet ) & data.Digits ;
    _chars = Substitute (
      _chars ;
      [ "O" ; dev.Nil ] ;
      [ "I" ; dev.Nil ]
    ) ;

    _pos = random.Number ( 1 ; Length ( _chars ) ; 0 ) ;
    _result = Middle ( _chars; _pos ; 1 )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="284" name="range_____ Ranges __________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions dealing with the range data structure, which is an item a separator and another item greater
// than or equal to the first.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="285" name="range.Dates"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.Dates ( _date_1; _date_2 )
// Purpose:		Return a list of dates between the first and last date, inclusive.
// Parameters:		_date_1: The earlier date (will be corrected if not earlier)
//				_date_2: The later date (will be corrected if not later)
// Version:		1.0 - Charles Ross - 15-03-06
// Notes:			Check into generalizing this so that the data type isn't needed to be known.
// Example:		rang.Dates ( Date ( 3; 31; 2015 ); Date ( 4; 2; 2015 ) ) = "3/31/2015¶4/1/2015¶4/2/2015"

Let (
  [
    _date_1 = GetAsDate ( _date_1 );
    _date_2 = GetAsDate ( _date_2 );

    _earlier	= Min ( _date_1; _date_2 );
    _later	= Max ( _date_1; _date_2 )
  ];

  GetAsText ( _earlier ) &
  Case (
    _earlier = _later;	dev.Nil;
				"¶" & range.Dates ( _earlier + 1; _later )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="286" name="range.DatesYYYYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.DatesYYYYMMDD ( _date_1 ; _date_2 )
// Purpose:		Return a list of dates between the first and last date, inclusive, with each date in YYYYMMDD format.
// Parameters:		_date_1: The earlier date (will be corrected if not earlier)
//				_date_2: The later date (will be corrected if not later)
// Requirements: 	timestamp.Format
//				list.CustomList
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

Let (
  [
    $_range_dateyyyymmdd_list = range.Dates ( _date_1 ; _date_2 ) ;

    _code = "date.YYYYMMDD ( GetValue ( $_range_dateyyyymmdd_list ; %n ) )" ;

    _result = list.CustomList ( 1 ; ValueCount ( $_range_dateyyyymmdd_list ) ; _code ) ;

    $_range_dateyyyymmdd_list = dev.Nil
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="287" name="range.Integers"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.Integers ( _start ; _end )
// Purpose:		Returns a list of numbers from _start to _end, inclusive
// Parameters:		_start:	The start of the range of integers
//				_end:	The end of the range
// Version:		1.0 - Charles Ross - 17-07-23
// Notes:			No correct is made if start exceeds end, empty string returned.
// Example:		sample = result

Case (
  _start > _end	; dev.Nil ;
  _start = _end	; _start
			; List ( _start ; range.Integers ( _start + 1 ; _end ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="288" name="range.Weekdays"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.Weekdays ( _date_1 ; _date_2 )
// Purpose:		Returns a list of the dates between the start and end dates (includsive) that are weekdays.
// Parameters:		_start:	The earlier date (will be corrected if not earlier)
//				_end:	The later date (will be corrected if not later)
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

list.Subtract ( range.Dates ( _start ; _end ) ; _ignore )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="289" name="range.WeekdaysYYYYMMDD"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// range.WeekdaysYYYYMMDD ( _date_1 ; _date_2 ; _ignore )
// Purpose:		Return a list of weekdays between the first and last date, inclusive, with each date in YYYYMMDD format
//				excluding those in the ignore list.
// Parameters:		_start:	The earlier date (will be corrected if not earlier)
//				_end:	The later date (will be corrected if not later)
//				_ignore:	The list of dates to exclude.
// Requirements: 	timestamp.Format
//				list.CustomList
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

Let (
  [
    $_range_weekdaysyyyymmdd_list = range.Weekdays ( _start ; _end ; _ignore ) ;

    _code = "date.YYYYMMDD ( GetValue ( $_range_weekdaysyyyymmdd_list ; %n ) )" ;

    _result = list.CustomList ( 1 ; ValueCount ( $_range_weekdaysyyyymmdd_list ) ; _code ) ;

    $_range_weekdaysyyyymmdd_list = dev.Nil
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="290" name="rgb_____ RGB Extracts ______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that deal with RGB values.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="291" name="rgb.Blue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// rgb.Blue ( _rgb )
// Purpose:		Returns the blue value (0-255) of a given RGB value.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		rgb.Blue ( RGB ( 1; 2; 3 ) ) = 3

Mod( _rgb; 256 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="292" name="rgb.Green"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// rgb.Green ( _rgb )
// Purpose:		Returns the green value (0-255) of a given RGB value.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		rgb.Green ( RGB ( 1; 2; 3 ) ) = 2

Int( ( _rgb - ( rgb.Red( _rgb ) * 65536 ) ) / 256 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="293" name="rgb.Red"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// rgb.Red ( _rgb )
// Purpose:		Returns the red value (0-255) of a given RGB value.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		rgb.Red ( RGB ( 1; 2; 3 ) ) = 1

Int( _rgb / 65536 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="294" name="schema_____ Schema Introspection ___________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that deal with the file schema.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="295" name="schema.BaseTableNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.BaseTableNames
// Purpose:		Returns the base table names, as opposed to `TableNames`, which returns TO names
// Version:		1.0 - Charles Ross - 17-07-24
//				1.1 - Charles Ross - 17-07-29 - Restrict to local base tables
//				1.2 - Charles Ross - 17-08-09 - Added logic to correctly return results when file is served
// Example:		sample = result

Let (
  [
    _sql = "SELECT DISTINCT BaseTableName FROM FileMaker_Tables WHERE BaseFileName = ?" ;

    // When the file is served, the `BaseFileName` field stores the actually filename followed by the host name
    // in parentheses.
    _host = Case (
      Get ( MultiUserState ) = system.MultiUserStateClient ;
      " (" & Get ( HostName ) & ")" ;
      dev.Nil
    ) ;

    _criteria = Get ( FileName ) & _host ;

    _result = ExecuteSQL (
      _sql ;
      dev.Nil ; dev.Nil ;
      _criteria
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="296" name="schema.DataFieldNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.DataFieldNames ( _table )
// Purpose:		Returns the names of the fields in the given table that store data, i.e., excluding
//				calculations, summaries, globals, etc.
// Parameters:		_table:	The name of the table to return the data fields of
// Requirements:	list.CustomList
//				schema.FieldNames
//				schema.FieldStorageType
//				dev.ClearVars
// Version:		1.0 - Charles Ross - 17-07-24
//				1.1 - Charles Ross - 17-08-01 - Updated to remove use of list.CustomList, recursive instead.
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  // ========================================
  // Step 0: Setup
  IsEmpty ( $_schema_datafieldnames_step ) ;
  Let (
    [
      $_schema_datafieldnames_debug = False ;
      $_schema_datafieldnames_step = 1 ;

      $_schema_datafieldnames_fieldnames = schema.FieldNames ( _table )
    ] ;

    schema.DataFieldNames ( _table )
  ) ;

  // ========================================
  // Step 1: Recursion
  $_schema_datafieldnames_step = 1 ;
  Let (
    [
      _valid_storage_types = List (
        "Standard" ;
        "External(Open)" ;
        "External(Secure"
      ) ;

      _field_name = list.Pop ( "$_schema_datafieldnames_fieldnames" ) ;
      _qualified_field_name = _table & "::" & _field_name ;
      _storage_type = schema.FieldStorageType ( _qualified_field_name ) ;

      $_schema_datafieldnames_result = Case (
        dev.IsSet ( _field_name ) and list.IsMember ( _storage_type ; _valid_storage_types ) ;
        List ( $_schema_datafieldnames_result ; _field_name ) ;
        $_schema_datafieldnames_result
      ) ;

      $_schema_datafieldnames_step = Case (
        IsEmpty ( _field_name )	; 2
						; 1
      )
    ] ;

    schema.DataFieldNames ( _table )
  ) ;

  // ========================================
  // Step 2: Cleanup
  $_schema_datafieldnames_step = 2 ;
  Let (
    [
      _result = $_schema_datafieldnames_result ;

      _ = Case (
        not $_schema_datafieldnames_debug ;
        dev.ClearVars ( List (
          "$_schema_datafieldnames_debug" ;
          "$_schema_datafieldnames_fieldnames" ;
          "$_schema_datafieldnames_result"
        ) )
      ) ;

      // Step is always cleared regardless of debug mode.
      $_schema_datafieldnames_step = dev.Nil ;

      _ = ""
    ] ;
    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="297" name="schema.FieldDataType"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldDataType ( _field )
// Purpose:		Returns a text string describing the field's data type ( "Date", "Text", etc.)
// Parameters:		_field_name:	The name of the field to return the data type of (use `GetFieldName`)
// Version:		1.0 - Charles Ross - 17-07-18
// Example:		sample = result

Let (
  [
    _field_type = FieldType ( dev.Nil ; _field_name ) ;
    _list = list.CreateList ( _field_type ; " " ) ;
    _data_type = GetValue ( _list ; 2 )
  ] ;

  _data_type
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="298" name="schema.FieldNames"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldNames ( _table )
// Purpose:		Return all of the fields in the table, as opposed to `FieldNames` which only works with
//				fields ona particular layout.
// Parameters:		_table:	The name of the table (occurrence) to return the fields of
// Version:		1.0 - Charles Ross - 17-07-24
// Example:		sample = result

ExecuteSQL (
  List (
    "SELECT FieldName" ;
    "FROM FileMaker_Fields" ;
    "WHERE TableName = ?"
  ) ;
 dev.Nil ; dev.Nil ; _table
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="299" name="schema.FieldRepCount"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldRepCount ( _field )
// Purpose:		Returns the number of repeitions the field is defined to have.
// Parameters:		_field:	The fully-qualified field name.
// Version:		1.0.0 - Will M. Baker - 11-10-29
//				1.0.1 - Charles Ross - 18-08-04 - Change _field parameter to expect the qualified field name
// Example:		// Assuming the field is defined to have 4 repetitions…
//				schema.FieldReps ( Table::field ) = 4

GetAsNumber ( FieldType ( Get ( FileName ) ; _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="300" name="schema.FieldStorageType"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// schema.FieldStorageType ( _field )
// Purpose:		Returns a text string describing the field's storage type ( "Standard", "External(Open)", etc.)
// Parameters:		_field_name:	The name of the field to return the data type of (use `GetFieldName`)
// Version:		1.0 - Charles Ross - 17-07-24
// Example:		sample = result

Let (
  [
    _field_type = FieldType ( dev.Nil ; _field_name ) ;
    _list = list.CreateList ( _field_type ; " " ) ;
    _storage_type = list.First ( _list )
  ] ;

  _storage_type
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="301" name="script_____ Script Parameter Results _______________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for assigning to variables script parameters and results.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="302" name="script._CharPosOrLen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._CharPosOrLen ( _text ; _char ; _start )
// Purpose:		Returns the position of the char in the text or the length of the text if char is absent.
// Parameters:		_text:	The text to search within
//				_char:	The character to look for
//				_start:	Where to start looking
// Version:		1.0 written 15-11-26 by Charles Ross
// Example:		sample = result

Let (
  [
    _length	= Length ( _text ) ;
    _pos	= Position ( _text ; _char ; _start ; 1 ) ;

    _result = Case (
      _pos = 0	; _length
			; _pos
    )
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="303" name="script._OptParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._OptParams ( _script )
// Purpose:		Returns a list of optional script parameters according to the script name and the
//				FileMakerStandards.org convention for listing parameters in script names
// Parameters:		_script:	The name of a script, optional, `Get ( ScriptName )` used when blank
// Version:		1.0 written 12-12-07 by Jeremy Bante
//				1.1 edited 13-06-29 by Jeremy Bante to append a trailing return to non-empty results
//					to support direct concatenation with other lists
// Notes:			http://filemakerstandards.org/display/cs/Script+naming
//				Scripts should be named as follows:
//				"Script Name ( Req1 ; Req2 {; Opt1 ; Opt2 } )"
// Example:		sample = result

Case (
  // ========================================
  // Step 0, set-up
  not $scpm.OptionalParams.step ;
  Let (
    [
      _params = script._RawParams ( _script ; "optional" ) ;

      $scpm.OptionalParams.count = ValueCount ( _params ) ;

      $scpm.OptionalParams.step = Case (
        IsEmpty ( _params )	; 2
					; 1
      )
    ] ;

    script._OptParams ( _params )
  ) ;

  // ========================================
  // Step 1, trim whitespace
  $scpm.OptionalParams.step = 1 ;
  Let (
    [
      $scpm.OptionalParams.i = $scpm.OptionalParams.i + 1 ;
      _param = Trim ( GetValue ( _script ; $scpm.OptionalParams.i ) ) ;
      $scpm.OptionalParams.result = List ( $scpm.OptionalParams.result ; _param ) ;

      $scpm.OptionalParams.step = Case (
        $scpm.OptionalParams.i < $scpm.OptionalParams.count	; 1
												; 2
      )
    ] ;

    script._OptParams ( _script )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  $scpm.OptionalParams.step = 2 ;
  Let (
    [
      _result = Case (
        not IsEmpty ( $scpm.OptionalParams.result ) ;
        $scpm.OptionalParams.result & ¶
      ) ;

      // purge variables
      $scpm.OptionalParams.i		= dev.Nil ;
      $scpm.OptionalParams.count	= dev.Nil ;
      $scpm.OptionalParams.result	= dev.Nil ;
      $scpm.OptionalParams.step	= dev.Nil
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="304" name="script._RawParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._RawParams ( _script ; _type )
// Purpose:		Abstracts out the common logic found in scpm.RequiredParams and scpm.OptionalParams
// Parameters:		_script:	The name of the script
//				_type:	The type of parameters, should be either "required" or "optional"
// Version:		1.0 written 15-11-26 by Charles Ross
// Example:		sample = result

Let (
  [
    _start_char = Case (
      _type = "required"	; "("
					; "{"
    ) ;

    _end_opt_char = Case (
      _type = "required"	; "{"
					; "}"
    ) ;

    _end_req_char = ")" ;

    _script = Case (
      IsEmpty ( _script )	; Get ( ScriptName )
					; _script
    ) ;

    _length	= Length ( _script ) ;
    _start	= Position ( _script ; _start_char ; _length ; -1 ) + 1 ;

    _end_opt = script._CharPosOrLen ( _script ; _end_opt_char ; _start ) ;
    _end_req = script._CharPosOrLen ( _script ; _end_req_char ; _start ) ;

    _end = Min ( _end_opt ; _end_req ) ;

    _params = Case (
      _start = 1	; dev.Nil
			; Middle ( _script ; _start ; _end - _start )
    ) ;

    _result = Substitute ( _params ; ";" ; ¶ )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="305" name="script._ReqParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script._ReqParams ( _script )
// Purpose:		Returns a list of required script parameters according to the script name and the
//				FileMakerStandards.org convention for listing parameters in script names
// Parameters:		_script:	The name of a script, optional, `Get ( ScriptName )` used when blank
// Version:		1.0 written 12-12-07 by Jeremy Bante
//				1.1 edited 13-06-29 by Jeremy Bante to append a trailing return to non-empty results
//					to support direct concatenation with other lists
// Notes:			http://filemakerstandards.org/display/cs/Script+naming
//				Scripts should be named as follows:
//				"Script Name ( Req1 ; Req2 {; Opt1 ; Opt2 } )"
// Example:		scpm.RequiredParams ( "Script Name ( Req1 ; Req2 {; Opt1 } )" ) = List ( "Req1" ; "Req2" ) & ¶

Case (
  // ========================================
  // Step 0, set-up
  not $scpm.RequiredParams.step ;
  Let (
    [
      _params = script._RawParams ( _script ; "required" ) ;

      $scpm.RequiredParams.count = ValueCount ( _params ) ;

      $scpm.RequiredParams.step = Case (
        IsEmpty ( _params )	; 2
					; 1
      )
    ];

    script._ReqParams ( _params )
  ) ;

  // ========================================
  // Step 1, trim whitespace
  $scpm.RequiredParams.step = 1 ;
  Let (
    [
      $scpm.RequiredParams.i = $scpm.RequiredParams.i + 1 ;
      _param = Trim ( GetValue ( _script ; $scpm.RequiredParams.i ) ) ;
      $scpm.RequiredParams.result = List ( $scpm.RequiredParams.result ; _param ) ;

      $scpm.RequiredParams.step = Case (
        $scpm.RequiredParams.i < $scpm.RequiredParams.count	; 1
												; 2
      )
    ] ;

    script._ReqParams ( _script )
  ) ;

  // ========================================
  // Step 2, clean-up and return result
  $scpm.RequiredParams.step = 2 ;
  Let (
    [
      _result = Case (
        not IsEmpty ( $scpm.RequiredParams.result ) ;
        $scpm.RequiredParams.result & ¶
      ) ;

      // purge variables
      $scpm.RequiredParams.i		= dev.Nil ;
      $scpm.RequiredParams.count	= dev.Nil ;
      $scpm.RequiredParams.result	= dev.Nil ;
      $scpm.RequiredParams.step	= dev.Nil
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="306" name="script.AssignParams"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.AssignParams
// Purpose:		Assume the current script parameter contains let notation and assign the variables defined therein.
// Requirements: 	let.Assign
// Version:		1.0 written 17-03-06 by Charles Ross
// Example:		sample = result

let.Assign ( Get ( ScriptParameter ) )
  and script.ConfirmVars ( script._ReqParams ( dev.Nil ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="307" name="script.AssignResults"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.AssignResults
// Purpose:		Assume the current script result contains let notation and assign the variables defined therein.
// Requirements: 	let.Assign
// Version:		1.0 written 17-03-06 by Charles Ross
// Example:		sample = result

let.Assign ( Get ( ScriptResult ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="308" name="script.ConfirmVars"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.ConfirmVars ( _names )
// Purpose:		Returns True (1) if the names passed each have non-empty values in local variables.
// Parameters:		_names:	A return-delimited list of names to check, do not need to be prefixed with $
// Version:		1.0 written 12-12-07 by Jeremy Bante
//				1.1 edited 13-07-05 by Jeremy Bante to support one trailing return in the nameList
//					parameter.
//				1.2 edited 13-07-10 by Jeremy Bante to correct a bug with support for trailing returns.
// Notes:			Names containing "$" or "$$" prefixes will be treated as identical to names not
//				beginning with those prefixes — this function only checks for local $variables.
// Example:		sample = result

Case (
  IsEmpty ( _names ) ;
  True ;

  Let (
    [
      // Provide sentinels at for the beginning and end of the list.
      _start	= Get ( UUID ) ;
      _end	= Get ( UUID ) ;

      // normalize _names so all values begin with "$"
      _names = Substitute (
        _start & ¶ & _names & _end ;
        [ ¶ & _end		; dev.Nil	] ;
        [ _end		; dev.Nil	] ;
        [ "¶$$"		; "¶"		] ;
        [ "¶$"		; "¶"		] ;
        [ "¶"			; "¶$"	] ;
        [ _start & ¶	; dev.Nil	]
      ) ;

      // Separate multiple names with additional tests
      _names = Substitute (
        _names ;
        [ "¶" ; " )¶and not IsEmpty ( " ]
      ) ;

      _code = "not IsEmpty ( " & _names & " ) " ;

      _result = IsValidExpression ( _code ) and Evaluate ( _code )
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="309" name="script.Param"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// script.Param
// Purpose:		A convenience wrapper that only calls let.Set.
// Parameters:		_name:	The name of the parameter to send
//				_value:	The value to assign to the parameter
// Requirements: 	let.Set
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		sample = result

let.Set ( _name ; _value )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="310" name="sort_____ Sort Constants ___________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions to provide human-readable constants for sort orders.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="311" name="sort.DateAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.DateAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.DateAsc = 3

3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="312" name="sort.DateDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.DateDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.DateDesc = -3

-3]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="313" name="sort.NumberAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.NumberAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.NumberAsc = 2

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="314" name="sort.NumberDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.NumberDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.NumberDesc = -2

-2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="315" name="sort.TextAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TextAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TextAsc = 1

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="316" name="sort.TextDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TextDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TextDesc = -1

-1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="317" name="sort.TimeAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimeAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimeAsc = 4

4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="318" name="sort.TimeDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimeDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimeDesc = -4

-4]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="319" name="sort.TimestampAsc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimestampAsc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimestampAsc = 5

5]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="320" name="sort.TimestampDesc"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sort.TimestampDesc
// Purpose:		Provide a human-readable constant for SortValues sort orders
// Version:		1.0 - Charles Ross - 18-02-06
// Example:		sort.TimestampDesc = -5

-5]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="321" name="sortable_____ Sortable Text ________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for converting the various non-text data types into text that will sort the same as the original.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="322" name="sortable.Date"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Date ( _date )
// Purpose:		Returns a textual version of a date that will sort property as text.
// Parameters:		_date:	The date to convert.
// Requirements:	timestamp.Format
// Version:		1.0 - Charles Ross - 15-03-11
//				1.1 - Charles Ross - 17-03-07 - Leverage timestamp.Format.
// Example:		sortable.Date ( Date ( 10; 1; 2008 ) ) = "20081001"

timestamp.Format ( GetAsTimestamp ( Date ( 3; 27; 15 ) ) ;"20%Y%m%d" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="323" name="sortable.Number"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Number ( _number )
// Purpose:		Returns a textual version of a number that will sort property as text.
// Parameters:		_number:	The number to convert.
// Requirements:	padd.Zeros
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		sortable.Number ( 123.456 ) = "00000001234560000000"

Right ( text.PadZeros ( _number * ( 10 ^ 10 ); 20 ); 20 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="324" name="sortable.Time"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Time ( _time )
// Purpose:		Returns a textual version of a time that will sort property as text.
// Parameters:		_time:	The time to convert.
// Version:		1.0 - Charles Ross - 15-03-11
//				1.1 - Charles Ross - 17-03-07 - Leverage timestamp.Format
// Example:		sortable.Time ( Time ( 3; 4; 15 ) ) = "030415"

timestamp.Format ( GetAsTime ( _time ) ;"%H%m%S" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="325" name="sortable.Timestamp"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sortable.Timestamp ( _timestamp )
// Purpose:		Returns a textual version of a timestamp that will sort property as text.
// Parameters:		_timestamp:	The timestamp to convert.
// Requirements:	sortable.Date
//				sortable.Time
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		sortable.Timestamp ( Timestamp ( Date ( 10; 1; 2008 ); Time ( 3; 4; 15 )  ) ) = "20081001030415"

sortable.Date( GetAsDate( _timestamp ) ) &
  sortable.Time( GetAsTime( _timestamp ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="326" name="sql_____ ExecuteSQL ________________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for easing the use of ExecuteSQL.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="327" name="sql.ConvertDate"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.ConvertDate ( _sql_date )
// Purpose:		Converts a date returned by `ExecuteSQL` into a FileMaker date.
// Parameters:		_sql_date:	A date string returned by `ExecuteSQL`
// Requirements: 	timestamp.FromISO8601
// Version:		1.0 - Charles Ross - 17-12-04
// Example:		sql.ConvertDate ( 2017-12-04 ) = Date ( 12 ; 4 ; 2017 )

Case (
  IsEmpty ( _sql_date )	; dev.Nil
					; GetAsDate ( timestamp.FromISO8601 ( _sql_date ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="328" name="sql.Debug"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.Debug ( _execute_sql_results )
// Purpose:		Permits the viewing of SQL error messages. Must be used in the Data Viewer.
// Parameters:		_execute_sql:	The results of an ExecuteSQL call.
// Requirements: 	FileMaker Pro Advanced's Data Viewer
// Version:		2.2 edited 12-07-28 by Andries Heylen
// Notes:			All of the following must be true for this function to be useful:
//				- ExecuteSQL returns a quesiton mark (indicating an error)
//				- The results of the ExecuteSQL call are passed to this function
//				- The results of this function are added to the Data Viewer's Watch tab.
//				- The results of the Watch tab's calculation are monitored (not simply evaluated).
//				When all of that is true, this function will reveal the error message generated by the
//				SQL that was passed to ExecuteSQL.
//				http://www.fmfunctions.com/fid/335
// Example:		// When monitored in the Data Viewer (but this isn't a unit test, calc below will return 0)…
//				sql.Debug ( ExecuteSQL ( "SELECT unexistingfield from table" ; "" ; "" ) )
//				  = "There is an error in the syntax of the query."

Case ( 
						// Return an empty string to reveal the error if there is one.
  _execute_sql_results = "?"	; ""
						// Otherwise return the valid results

  						; _execute_sql_results
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="329" name="sql.FormatListForIn"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.FormatListForIn ( _list )
// Purpose:		Generates a comma-delimited list, with each list item wrapped in single quotes to be
//				used with the SQL "IN" operator when the field you are querying is a TEXT field
// Parameters:		_list:	The list to convert.
// Requirements:	list.CreateList
// Version:		1.0 written 12-05-08
// Todo:			Find original author's name.
// Example:		sql.FormatListForIn ( "A¶B¶C" ) = "('A','B','C')"

"('" & list.ReplaceSeparator ( _list ; "','" ) & "')"]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="330" name="sql.QuotedFieldName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.QuotedFieldName ( _field )
// Purpose:		Returns only the field name, i.e., without the table occurrence name
// Parameters:		_field: The field to return the name of.
// Requirements:	dev.GetFieldName
// Version:		1.0 written 15-05-03 by Charles Ross
// Notes:			GetFieldName() returns the relationship plus the field name. This function
//				is to be used in SQL queries to protect the table occurrence references
//				from breaking if the TO is renamed.
//
//				The Quote() funciton "escapes" problematic characters and SQL reserved
//				words, if any — otherwise, no harm done.
//
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				sql.QuotedFieldName ( TableOccurrence::field_name ) = "\"field_name\""

Quote ( dev.GetFieldName ( _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="331" name="sql.QuotedQualified"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.QuotedQualified ( _field )
// Purpose:		Returns a quoted, fully qualified field reference, `"Table"."field"`
// Parameters:		_field:	The field to return in quoted qualified format
// Requirements: 	sql.QuotedTableName
//				sql.QuotedFieldName
// Version:		1.0 - Charles Ross - 17-03-13
// Example:		sample = result

sql.QuotedTableName ( _field ) & "." & sql.QuotedFieldName ( _field )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="332" name="sql.QuotedTableName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.QuotedTableName ( _field )
// Purpose:		Returns only the table name, i.e., without the field name
// Parameters:		_field: The field to return the table name for
// Requirements:	dev.GetTableName
// Version:		1.0 written 15-05-03 by Charles Ross
// Notes:			GetFieldName() returns the relationship plus the field name. This function
//				is to be used in SQL queries to protect the table occurrence references
//				from breaking if the TO is renamed.
//
//				The Quote() funciton "escapes" problematic characters and SQL reserved
//				words, if any — otherwise, no harm done.
//
//				http://filemakerhacks.com/2011/04/18/avoiding_brittleness/
// Example:		// When TableOccurrence::field_name exists
//				sql.QuotedTableName ( TableOccurrence::field_name ) = "\"TableOccurrence\""

Quote ( dev.GetTableName ( _field ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="333" name="sql.SelectCountWhereValue incomplete"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.SelectCountWhereValue ( _select_field ; _where_field ; _value )
// Purpose:		Builds the simplest COUNT query for the given fields, table and value.
// Parameters:		_from_table:	The table to select from
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-08
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _sql = List (
      "SELECT	_select_field" ;
      "FROM		_from_table" ;
      "WHERE	_where_field = ?"
    ) ;

    _from_table	= sql.QuotedTableName ( _from_table ) ;
    _where_field	= sql.QuotedFieldName ( _where_field ) ;

    _sql = Substitute (
      _sql ;
      [ "_from_table" ; _from_table ] ;
      [ "_where_field" ; _where_field ]
    ) ;

    _ = ""
  ] ;

  ExecuteSQL ( _sql ; dev.Nil ; dev.Nil ; _value )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="334" name="sql.SelectFromWhereValue"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.SelectFromWhereValue ( _select_field ; _from_table ; _where_field ; _value )
// Purpose:		Builds the simplest SELECT query for the given fields, table and value.
// Parameters:		_select_field:	The field whose contents should be selected
//				_from_table:	The table to select from
//				_where_field:	The field to search against
//				_value:		The valut to search for within the field
// Requirements: 	sql.QuotedFieldName
//				sql.QuotedTableName
// Version:		1.0 - Charles Ross - 18-02-20
// Example:		sample = result

Let (
  [
    _sql = List (
      "SELECT	_select_field" ;
      "FROM		_from_table" ;
      "WHERE	_where_field = ?"
    ) ;

    _select_field	= sql.QuotedFieldName ( _select_field ) ;
    _from_table	= sql.QuotedTableName ( _from_table ) ;
    _where_field	= sql.QuotedFieldName ( _where_field ) ;

    _sql = Substitute (
      _sql ;
      [ "_select_field" ; _select_field ] ;
      [ "_from_table" ; _from_table ] ;
      [ "_where_field" ; _where_field ]
    ) ;

    _ = ""
  ] ;

  ExecuteSQL ( _sql ; dev.Nil ; dev.Nil ; _value )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="335" name="sql.SubstituteQuotedVariables"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// sql.SubstituteQuotedVariables ( _text )
// Purpose:		Substitutes variables found in text with the quoted values of those variables.
// Parameters:		_text:	The text to substitute the variables found within
// Requirements: 	text.WhitespacePosition
// Version:		1.0 - Charles Ross - 18-08-04
// Notes:			Assumes no whitespace in variable names
//				Assumes all dollar signs are variables
//				Assumes _text does not end in a variable name
// Todo:			Fix the above assumptions
// Example:		Let (
//				  [
//				    $_substitution = "foo" ;
//				    $$_variables = "bar" ;
//				    _text = "some text with $_substitution $$_variables in it"
//				  ] ;
//				  sql.SubstituteQuotedVariables ( _text ) = "some text with \"foo\" \"bar\" in it"
//				)


Case (
  PatternCount ( _text ; "$" ) = 0 ;
  _text ;

  Let (
    [
      _pos			= Position ( _text ; "$" ; 1 ; 1 ) ;
      _next_space	= text.WhitespacePosition ( _text ; _pos ) ;

      _var_name = Case (
        _next_space = 0 ;
        Right ( _text ; Length ( _text ) - _pos + 1 ) ;
        Middle ( _text ; _pos ; _next_space - _pos )
      ) ;

      _value			= Evaluate ( _var_name ) ;
      _new_text		= Substitute ( _text ; _var_name ; Quote ( _value ) ) ;
      _ = ""
    ] ;

    sql.SubstituteQuotedVariables ( _new_text )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="336" name="system_____ System Constants _______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that offer named constants of various FileMaker Get functions or named tests that depend on
// them.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="337" name="system.AllowAbortStateOn"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.AllowAbortStateOn
// Purpose:		A constant representing what Get ( AllowAbortState ) returns.
// Version:		1.0 - Charles Ross - 15-06-21
// Example:		// When evaluated after a script has turned on Allow User Abort…
//				Get ( AllowAbortState ) = system.AllowAbortStateOn

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="338" name="system.ErrorCaptureOff"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.ErrorCaptureOff
// Purpose:		A constant representing what Get ( ErrorCaptureState ) returns.
// Version:		1.0 - Charles Ross - 15-06-21
// Example:		// When evaluated after a script has turned off error capture
//				Get ( ErrorCaptureState ) = system.ErrorCaptureOff

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="339" name="system.IsLandscape"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.IsLandscape
// Purpose:		Returns True if an interface is in landscape mode, meant for use on iOS.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When executed on an iPad that is being held in landscape mode...
//				system.IsLandscape = 1

Get( WindowContentWidth ) > Get( WindowContentHeight )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="340" name="system.IsPortrait"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.IsPortrait
// Purpose:		Returns True if an interface is in portrait mode, meant for use on iOS.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When executed on an iPad that is being held in portrait mode...
//				system.IsPortrait = 1

Get ( WindowContentWidth ) < Get ( WindowContentHeight )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="341" name="system.MultiUserStateClient"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.MultiUserStateClient
// Purpose:		A constant representing what Get ( MultiUserState ) returns to indicate accessing a
//				database from a client computer.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while accessing the database from a client computer...
//				Get ( MultiUserState ) = system.MultiUserStateClient

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="342" name="system.MultiUserStateHost"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.MultiUserStateHost
// Purpose:		A constant representing what Get ( MultiUserState ) returns to indicate accessing a
//				database from the host computer.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while accessing the database from the host computer...
//				Get ( MultiUserState ) = system.MultiUserStateHost

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="343" name="system.MultiUserStateOff"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.MultiUserStateOff
// Purpose:		A constant representing what Get ( MultiUserState ) returns to indicate sharing is off.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		// When evaluated while sharing is off...
//				Get ( MultiUserState ) = sysk.MultiUserStateOff

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="344" name="system.RecordStateClosed"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.RecordStateClosed
// Purpose:		Returns the value returned by `Get ( RecordOpenState )` when the record is closed.\
// Version:		1.0 - Charles Ross - 17-07-23
// Example:		sample = result

0]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="345" name="system.RecordStateEditedOpen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.RecordStateEditedOpen
// Purpose:		Returns the constant value indicating modified record is uncommitted
// Version:		1.0 - Charles Ross - 17-03-20
// Example:		// The current record is being edited and is uncommited…
//				Get ( RecordOpenState ) = system.RecordStateEditedOpen

2]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="346" name="system.RecordStateNewOpen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// system.RecordStateNewOpen
// Purpose:		Returns the constant value indicating modified record is uncommitted
// Version:		1.0 - Charles Ross - 17-03-20
// Example:		// The current record is new and is uncommited…
//				Get ( RecordOpenState ) = system.RecordStateNewOpen

1]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="347" name="text_____ Text Processing __________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that manipulate text in various ways.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="348" name="text._PhoneFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// txtf.PhoneFormat_ ( _phone; _format )
// Purpose:		Formats a phone number to the given format using pound signs as digit placeholders.
// Parameters:		_phone:	The phone number to format.
//				_format:	The format to apply.
// Version:		1.0 - Jesse Swensen - 15-03-11
// Notes:			https://www.briandunning.com/cf/1459
//				Will format the number according to the given format. Fills in the format from right to
//				left and if the number is longer than the format, the extra numbers will be prepended
//				to the front of the formatted phone number. Any non-numeric characters in the phone
//				number are ignored.
//				Recursive wrapper for text.FormatPhone
// Example:		( txtf.PhoneFormat_ ( "5551212"; "### (###) ###-####" ) = "555-1212" )
//				  and ( txtf.PhoneFormat_ ( "55b51.2-12"; "### (###) ###-####" ) = "555-1212" )
//				  and ( txtf.PhoneFormat_ ( "8005551212"; "### (###) ###-####" ) = "(800) 555-1212" )
// 				 and ( txtf.PhoneFormat_ ( "18005551212"; "### (###) ###-####" ) = "1 (800) 555-1212" )

Case (
  not IsEmpty ( _format );
  Let (
    [
      _numbers = Filter ( _phone; data.Digits );
      _new_format = Left ( _format; Length ( _format ) - 1);
      _new_number = Left ( _numbers; Length ( _numbers ) - 1)
    ];

    Case (
      Right ( _format; 1 ) = "#";	text._PhoneFormat ( _new_number; _new_format ) & Right ( _numbers; 1 ); 
						text._PhoneFormat ( _numbers; _new_format ) & Right ( _format; 1 ) 
    )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="349" name="text.BOMPad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.BOMPad ( _text ; _length )
// Purpose:		Pads _text at the beginning of the string with the _length number of byte order marks.
// Parameters:		_text:	The text to pad.
//				_length:	How many byte order marks to pad.
// Version:		1.0 - Matt Petrowsky - 12-09-18 - inspired by Marcelo Piñeyro of Soliant consulting
// Notes:			This is used to provide a custom sort order which can be based on the number of byte
//				order marks that appear at the start of a string.
// Example:		sample = result

text.Pad ( _text ; Char ( 65279 ) ; _length ; "left" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="350" name="text.CamelToSnake"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CamelToSnake
// Purpose:		Convert a camel-case name to a snake-case name
// Parameters:		_text: The text to convert
// Version:		1.0 - Charles Ross - 17-12-18
// Notes:			Takes account of special words that are all caps for `Get` parameters, as that was the original imputus of this function.
// Todo:			To dos
// Example:		text.CamelToSnake ( "MyVarName" ) = "my_var_name"

Case (
  IsEmpty ( _text ) ;
  Let (
    [
      _result = $_text_camel_to_snake_result ;
      $_text_camel_to_snake_result = dev.Nil ;

      _result = Substitute (
        _result ;
        [ "n_i_c"		; "nic"		] ;
        [ "file_maker"	; "filemaker"	] ;
        [ "f_m_p"		; "fmp"		] ;
        [ "_i_d"		; "_id"		] ;
        [ "_i_p"		; "_ip"		]
      )
    ] ;
    _result
  ) ;

  Let (
    [
      _char = Left ( _text ; 1 ) ;
      _text = Right ( _text ; Length ( _text ) - 1 ) ;

      _prev_char = Right ( $_text_camel_to_snake_result ; 1 ) ;

      _code = Code ( _char ) ;
      _is_cap = ( _code ≥ 65 ) and ( _code ≤ 90 ) ;

      $_text_camel_to_snake_result = $_text_camel_to_snake_result & Case (
        IsEmpty ( _prev_char )	; Lower ( _char ) ;
        _is_cap				; "_" & Lower ( _char )
						; _char
      )
    ] ;

    text.CamelToSnake ( _text )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="351" name="text.Clean"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Clean ( _text ; _clear_pilcrows ; _trim ; _clear_font ; _clear_size ; _clear_color ; _clear_styles )
// Purpose:		Conditionally clear formatting and carriage returns from passed text.
// Parameters:		_text:
//				_clear_pilcrows:	Clear pilcrows (carriage returns) if True
//				_trim:			Trim spaces if True.
//				_clear_font:		Use TextFontRemove if True.
//				_clear_size:		Use TextSizeRemove if True
//				_clear_color:		Use TextColorRemove if True
//				_clear_styles:		Use TextStyleRemove if True
// Requirements: 	text.TrimPilcrows
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

Let (
  [

    _text = Case ( _clear_pilcrows	; Substitute ( _text ; "¶" ; "" )
							; _text
    ) ; 

    _text = Case ( _trim	; Trim ( text.TrimPilcrows ( _text ) )
					; _text
    ) ;

    _text = Case ( _clear_font	; TextFontRemove ( _text )
						; _text
    ) ;
    _text = Case ( _clear_size	; TextSizeRemove ( _text )
						; _text
    ) ;

    _text = Case ( _clear_color	; TextColorRemove ( _text )
						; _text
    ) ;

    _text = Case ( _clear_styles	; TextStyleRemove ( _text ; AllStyles )
						; _text
    )
  ] ;

  _text
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="352" name="text.CleanAll"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanAll ( _text )
// Purpose:		Remove formatting and trip whitespace
// Parameters:		_text:	The text to clean
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-10-16
// Example:		sample = result

TextFormatRemove ( text.Supertrim ( _text ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="353" name="text.CleanFormatWithTrim"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanColorStyled ( _text )
// Purpose:		Clear the colors and styles from the passed text.
// Parameters:		_text:	The text to reformat.
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

TextFormatRemove  ( Trim ( _text ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="354" name="text.CleanRetainColorStylesReturns"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanColorStyled ( _text )
// Purpose:		Clear the colors and styles from the passed text.
// Parameters:		_text:	The text to reformat.
// Requirements: 	requirements
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

text.Clean ( _text ; 0 ; 1 ; 1 ; 1 ; 0 ; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="355" name="text.CleanRetainStylesReturns"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CleanRetainStylesReturns ( _text )
// Purpose:		Clear the formatting while retaining leading and trailing returns and the text style.
// Parameters:		_text:	The text to clean.
// Requirements: 	text.Clean
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

text.Clean ( _text ; 0 ; 1 ; 1 ; 1 ; 1 ; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="356" name="text.Color"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Color ( _text ; _color )
// Purpose:		Retunr the passed text colord with the named color or the word "remove"
// Parameters:		_text:	The text to color
//				_color:	The color to use.
// Requirements: 	data.Colors
//				let.Get
// Version:		1.0 - Jim Feuerstein
// Notes:			Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
//				The remove/none options are for use in auto-enter fields where we may set
//				the color under some conditions ( e.g. red for errors ) and don't want error
//				color preserved when the condition is removed ( e.g. when the error is fixed )
// Example:		text.Color ( "black" ) = 0 and text.Color ( "green" ) = 35600

Case (
  _color = "remove" or _color = "none" ;
  TextColorRemove ( _text ) ;

  TextColor ( _text ; let.Get ( data.Colors ; _color ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="357" name="text.CSVField"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.CSVField ( _text ; _append_comma )
// Purpose:		Prepares the text for inclusion in a CSV export.
// Parameters:		_text:			The text to prepare
//				_append_comma:	If True, a comma is appended to the end of the text
// Requirements: 	text.EscapeDoubleQuotes
// Version:		1.0 - Jim Feuerstein
// Example:		sample = result

"\"" & text.EscapeDoubleQuotes ( _text ) & "\"" &
Case ( _append_comma ; "," )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="358" name="text.E164PhoneFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.E164PhoneFormat ( _phone )
// Purpose:		Returns a phone number formatted to the E.164 Standard.
// Parameters:		_phone:	The phone number to format.
// Requirements: 	data.Digits
// Version:		1.0 - Charles Ross - 17-12-10
// Notes:			https://support.twilio.com/hc/en-us/articles/223183008-Formatting-International-Phone-Numbers
// Example:		text.E164PhoneFormat ( "(951) 370-5596" ) ="+19513705596"

Let (
  [
    _digits = Filter ( _phone ; data.Digits )
  ] ;

  Case (
    ( Left ( _phone ; 2 ) = "+1" ) and ( Filter ( _phone ; data.Digits & "+" ) = _phone ) ;
    _phone ;
    "+1" & _digits
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="359" name="text.EndsWith"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.EndsWith ( _text; _search_string )
// Purpose:		Returns True if the text ends with the search string.
// Parameters:		_text:		The text to test.
//				_search_string:	The search string to test the presence of at the end of text.
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		( not text.StartsWith ( "Four score"; "Four" ) ) and text.StartsWith ( "Seven years"; "years" )

Right ( _text;  Length ( _search_string ) ) = _search_string]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="360" name="text.EscapeDoubleQuotes"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.EscapeDoubleQuotes ( _text )
// Purpose:		Replace each individual double quote with a pair of double quotes.
// Parameters:		_text:	The text to perform the replacement upon
// Version:		1.0 - Jim Feuerstein
// Notes:			This function is used in the creation of properly formatted csv files to
//				convert any double-quote characters into a pair of double-quote characters.
//				Copyright © 2017 Labor Street
// Todo:			To dos
// Example:		sample = result

Substitute ( _text ; "\"" ; "\"\"" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="361" name="text.FormatAddress"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// txtf.FormatAddress ( _com; _con; _addr_1; _addr_2; _city; _state; _zip; _country )
// Purpose:		Returns a formatted address given the provided parameters.
// Parameters:		_com:	The company name.
//				_con:	The contact name.
//				_addr_1:	The first address line.
//				_addr_2:	The second address line.
//				_city:		The city.
//				_state:	The state.
//				_zip:		The postal code.
//				_country:	The country.
// Version:		1.0 - Charles Ross - 15-03-11
// Notes:			Slide any content that is missing from the full address. This will display the address
//				formatting without carriage returns for empty content in the fields. It will also remove
//				unwanted leading and trailing spaces with the Trim function. The only thing it won't
//				accomodate is an empty field with a carriage returns.
// Example:
// txtf.FormatAddress ( "Chivalry Software" ; "Charles Ross" ; "123 Main St." ; "Ste. 10" ; "Los Angeles" ; "CA" ; 
//   "90024" ; "USA" ) = "Chivalry Software¶Charles Ross¶123 Main St.¶Ste. 10¶Los Angeles, CA 90024¶USA"

Case( IsEmpty( _com );		dev.Nil ;		   Trim( _com ) ) &
Case( IsEmpty( _con );		dev.Nil ;	"¶"	& Trim( _con ) ) &
Case( IsEmpty( _addr_1 );		dev.Nil ;	"¶"	& Trim( _addr_1 ) ) &
Case( IsEmpty( _addr_2 );		dev.Nil ;	"¶"	& Trim( _addr_2 ) ) &
Case( IsEmpty( _city );		dev.Nil ;	"¶"	& Trim( _city ) ) &
Case( IsEmpty( _state );		dev.Nil ;	", "	& Trim( _state ) ) &
Case( IsEmpty( _zip );		dev.Nil ;	" "	& Trim( _zip ) ) &
Case( IsEmpty( _country );		dev.Nil ;	"¶"	& Trim( _country ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="362" name="text.FullName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.FullName ( _prefix; _first; _middle; _last; _suffix )
// Purpose:		Return a person's full name from the piece fields.
// Parameters:		_prefix:	Mr, Mrs, Dr, etc.
//				_first:	The first name.
//				_middle:	The middle name.
//				_last:		The last name.
//				_suffix:	Ph.D., etc.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		txtf.FullName ( "Mr."; "Charles"; "Edward"; "Ross"; "Ph.D" ) = "Mr. Charles Edward Ross, Ph.D."

Let (
  [
    // List function will not create blank members if entries are empty string.
    _before_suffix = List (
      _prefix ;
      _first ;
      _middle ;
      _last
    ) ;

    _before_suffix	= list.ReplaceSeparator ( _before_suffix ; " " ) ;
    _suffix			= Case ( dev.IsSet ( _suffix ) ; ", " & _suffix ) ;
    _result			= _before_suffix & _suffix
  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="363" name="text.GetAsURLEncoded"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.GetAsURLEncoded
// Purpose:		Encoded additional characters than the built-in GetAsURLEncoded
// Parameters:		_text:	The text to encode
// Version:		1.0 - Charles Ross - 15-12-31
// Notes:			For some reason, although the documentation for GetAsURLEncoded says it will encode
//				non alphanumeric characters, it doesn't cover them all. As characters are found that need
//				encoding, they'll be added to this function.
// Example:		text.GetAsURLEncoded ( "12:34:56" ) = "12%3A34%3A56"

Substitute (
  GetAsURLEncoded ( _text ) ;

  [ ":" ; "%3A" ]
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="364" name="text.Oxfordize"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Oxfordize ( _items )
// Purpose:		Return a string with the Oxford comma separate for three or more items.
// Parameters:		_items:		The items to return as Oxfordized
//				_conjunction:	The conjunction to place between the last and second to last
//							items, should be "and" or "or".
//				_quote:		A boolean value, if `True`, place each item in quotes (with
//							comma also in quotes).
// Requirements: 	list.CustomList
//				list.ReplaceSeparator
// Version:		1.0 - Charles Ross - 17-03-16
// Example:		sample = result

Case (
  ValueCount ( _items ) = 0 ;
  dev.Nil ;

  ValueCount ( _items ) = 1 and _quote ;
  Quote ( _items ) ;

  ValueCount ( _items ) = 1 ;
  _items ;

  ValueCount ( _items ) = 2 and _quote ;
  Quote ( GetValue ( _items ; 1 ) ) & " " & _conjunction & " " & Quote ( GetValue ( _items ; 2 ) ) ;

  ValueCount ( _items ) = 2 ;
  GetValue ( _items ; 1 ) & " " & _conjunction & " " & GetValue ( _items ; 2 ) ;

  Let (
    [
      $_tailless_items = LeftValues ( _items ; ValueCount ( _items ) - 1 ) ;

      _tailless_items = Case (
        _quote	; list.CustomList ( 1 ; ValueCount ( $_tailless_items ) ; "Quote ( GetValue ( $_tailless_items ; %n ) & \",\" ) " )
			; list.ReplaceSeparator ( $_tailless_items ; ", " )
      ) ;

    $_tailless_items = dev.Nil ;

    _tailless_items = Case (
      _quote	; list.ReplaceSeparator ( _tailless_items ; " " ) & " "
			; _tailless_items
    ) ;

    _last_item = GetValue ( _items ; ValueCount ( _items ) ) ;
    _result = _tailless_items & _conjunction & " " & Case (
      _quote	; Quote ( _last_item )
			; _last_item
    ) ;

      _ = ""
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="365" name="text.Pad"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Pad ( _text; _char; _counter; _side )
// Purpose:		Pads the text string with the char string the count number of times on the indicated
//				side.
// Parameters:		_text:	The text to pad with the char.
//              		_char:	The char to repeatedly pad.
//				_counter:	How many times to pad the char.
//				_side:	On which side of the string to pad the char.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.Pad ( "text"; "*"; 5; "left" ) = "*****text"

Let (
  [
    _decr = _counter - 1
  ] ;

  Case (
    _counter < 0 ;		"error" ;
    _counter = 0 ;		_text ;

    _side = "left" ;		_char & text.Pad ( _text ; _char ; _decr ; _side ) ;
					text.Pad ( _text ; _char ; _decr ; _side ) & _char
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="366" name="text.PadSpaces"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.PadSpaces ( _text; _space_count )
// Purpose:		Pads the given string with the specified number of spaces.
// Parameters:		_text:	The text to pad with spaces.
//				_count:	How many times to pad the spaces.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.PadSpaces ( "text"; 5 ) = "     text"

text.Pad ( _text; " "; _count; "left" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="367" name="text.PadZeros"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.PadZeros ( _text; _length )
// Purpose:		Pads zeroes to the limit that the returned text is of the length specified.
// Parameters:		_text:	The text to pad
//				_length:	How long the return string should be.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.PadZeros ( 13; 5 ) = "00013"

Right( text.Pad( _text; "0"; _length; "left" ); _length )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="368" name="text.ParseAddress"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.ParseAddress
// Purpose:		Parses an address into components using let-notation
// Parameters:		_address:	The address to parse.
// Requirements: 	requirements
// Version:		1.0.0 - Charles Ross - 18-03-28
// Notes:			Only works with Cognito formatted addresses
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _list = list.Reverse ( list.CreateList ( _address ; ", " ) ) ;

    _line_1 = text.Supertrim ( RightValues ( _list ; ValueCount ( _list ) - 2 ) ) ;
    _line_1 = Proper ( _line_1 ) ;

    _city = GetValue ( _list ; 2 ) ;
    _city = Proper ( _city ) ;

    _state_zip = GetValue ( _list ; 1 ) ;
    _state = LeftWords ( _state_zip ; WordCount ( _state_zip ) - 1 ) ;
    _state = Case (
      _state = "Oklahoma"	; "OK" ;
      _state = "Texas"		; "TX"
					; _state
  ) ;

    _zip = RightWords ( _state_zip ; 1 )
  ] ;

  let.Set ( "~line_1" ; _line_1 ) &
  let.Set ( "~city" ; _city ) &
  let.Set ( "~state" ; _state ) &
  let.Set ( "~zip" ; _zip )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="369" name="text.ParseName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.ParseName
// Purpose:		Parse a full name into components using a let-notation dictionary.
// Parameters:		_name:	The name to parse
// Requirements: 	requirements
// Version:		1.0.0 - Charles Ross - 18-03-28
// Notes:			Only parses into first and last names for now. No real intelligence yet.
// Todo:			Update to parse prefixes, suffixes, middle names and multi-word last names.
// Example:		text.ParseName ( "Charles Edward Ross" ) = let.Set ( "~first" ; "Charles Edward" ) & let.Set ( "~last" ; "Ross" )

Let (
  [
    _first = LeftWords ( _name ; WordCount ( _name ) - 1 ) ;
    _last = RightWords ( _name ; 1 )
  ] ;

  let.Set ( "~first" ; _first ) & let.Set ( "~last" ; _last )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="370" name="text.PhoneFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.PhoneFormat ( _phone; _country )
// Purpose:		Formats the provided phone number for the passed country code.
// Parameters:		_phone:	The phone number to format.
//				_country:	The country code to use in formatting.
// Requirements: 	txtf.PhoneFormat_
// Version:		1.0 - Charles Ross - 15-03-11
// Todo:			Only US supported so far, add more country formats.
// Example:		text.PhoneFormat ( "1235551212"; "us" ) = "(123) 555-1212"

Case(
  Filter( _phone; data.Digits ) = dev.Nil;	dev.Nil;
  _country = "us";					text._PhoneFormat( _phone; "(###) ###-####" );
    								_phone
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="371" name="text.Pluralize"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Pluralize ( _text ; _count )
// Purpose:		A static list of word that includes their singular and plural versions.
// Parameters:		_word:	The word to be shown as either singular or plural, based on the count
//				_count:	The number that determins whether a word should be singular or plural
// Requirements: 	requirements
// Version:		1.0 - Charles 19-08-12
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  _count = 1 ;
  _word ;

  Let (
    [
      _irregulars =	let.Set ( "child" ; "children" ) &
				let.Set ( "criteron" ; "criteria" ) ;

    _is_title_case = Exact ( Left ( _word ; 1 ) ; Upper ( Left ( _word ; 1 ) ) ) ;

    _provisional = let.Get ( _irregulars ; _word ) ;

    _result = Case (
      dev.IsSet ( _provisional )	; _provisional
						; _word & "s"
    ) ;

    _result = Case (
      _is_title_case	; Upper ( Left ( _result ; 1 ) ) & Right ( _result ; Length ( _result ) - 1 )
      				; _result
    ) ;

      _ = ""
    ] ;

    _result
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="372" name="text.QuoteIfUnquoted"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.QuoteIfUnquoted
// Purpose:		Returns the quoted string if it isn't already quoted.
// Parameters:		_text:	The text to quote if needed.
// Version:		1.0 - Charles Ross - 17-05-06
// Example:		text.QuoteIfUnquoted ( "text" ) = "\"text\""
//				  and text.QuoteIfUnquoted ( "\"text\"" ) = "\"text\""

Case (
  text.StartsWith ( _text ; "\"" ) and text.EndsWith ( _text ; "\"" )	; _text
												; Quote ( _text )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="373" name="text.ReplaceTokens"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.ReplaceTokens ( _text ; _tokens )
// Purpose:		Replace each token in the text with the correponding text from the list.
// Parameters:		_text:	The text to perform replacements on.
//				_list:		The list of replacements.
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-12-08
// Notes:			Tokens are identified by the string "{}".
// Todo:			To dos
// Example:		text.ReplaceTokens ( "Some {} to {}." ; List ( "text" ; "replace" ) ) = "Some text to replace."

Case (
  not PatternCount ( _text ; "{}" ) ;
  _text ;

  Let (
    [
      _token_pos = Position ( _text ; "{}" ; 1 ; 1 ) ;
      _replacement_text = list.First ( _list ) ;
      _new_list = list.Rest ( _list ) ;
      _new_text = Replace ( _text ; _token_pos ; 2 ; _replacement_text )
    ] ;

    text.ReplaceTokens ( _new_text ; _new_list )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="374" name="text.StartsWith"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.StartsWith ( _text; _search_string )
// Purpose:		Returns True if the text begins with the search string.
// Parameters:		_text:		The text to test.
//				_search_string:	The search string to test the presence of at the beginning of text.
// Version:		1.0 - Charles Ross - 15-03-11
// Example:		text.StartsWith ( "Four score"; "Four" ) and ( not text.StartsWith ( "Seven years"; "years" )

Left ( _text;  Length ( _search_string ) ) = _search_string]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="375" name="text.SubstituteVariables"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.SubstituteVariables ( _text )
// Purpose:		Substitutes local variables found in text with the values of those variables.
// Parameters:		_text:	The text to substitute the variables found within
// Requirements: 	text.WhitespacePosition
// Version:		1.0 - Charles Ross - 18-04-13
// Notes:			Assumes no whitespace in variable names
//				Assumes all dollar signs are variables
//				Assumes _text does not end in a variable name
// Todo:			Fix the above assumptions
// Example:		Let (
//				  [
//				    $_substitution = "foo" ;
//				    $$_variables = "bar" ;
//				    _text = "some text with $_substitution $$_variables in it"
//				  ] ;
//				  text.SubstituteVariables ( _text ) = "some text with foo bar in it"
//				)


Case (
  PatternCount ( _text ; "$" ) = 0 ;
  _text ;

  Let (
    [
      _pos			= Position ( _text ; "$" ; 1 ; 1 ) ;
      _next_space	= text.WhitespacePosition ( _text ; _pos ) ;

      _var_name = Case (
        _next_space = 0 ;
        Right ( _text ; Length ( _text ) - _pos + 1 ) ;
        Middle ( _text ; _pos ; _next_space - _pos )
      ) ;

      _value			= Evaluate ( _var_name ) ;
      _new_text		= Substitute ( _text ; _var_name ; _value ) ;
      _ = ""
    ] ;

    text.SubstituteVariables ( _new_text )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="376" name="text.Supertrim"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.Supertrim ( _text )
// Purpose:		Removes all whitespace from the beginning and end of a string.
// Parameters:		_text:	The text to trim.
// Requirements:	dev.Nil
// Version:		1.0 - Debi Fuchs, debi@aptworks.com - 15-03-11
// Notes:			Speedily (and with no recursion) remove leading and trailing white space, including
//				spacing, tabs and returns, from a text string.
// Example:		text.Supertrim ( " ¶	text	" ) = "text"

Let(
  [
    // Determine value of original string with ALL whitespace removed.  
    _normalized = Substitute(
      _text;
      [ " ";		dev.Nil ];
      [ " ";		dev.Nil ];
      [ "	";	dev.Nil ];
      [ "¶";		dev.Nil ]
    );
    
    // Determine position of first non-ws character in original string.
    _first_char = Position( _text; Left( _normalized; 1 ); 0; 1 );
    
    // Determine position of last non-ws character in original string.
    _last_char = Position( _text; Right( _normalized; 1 ); Length( _text ); -1 )
  ];
  
  // If any non-whitespace characters exist return appropriate middle portion of
  // original Text.
  Case(
    _first_char;	Middle( _text; _first_char; _last_char - _first_char + 1 )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="377" name="text.TrimPilcrows"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.TrimPilcrows ( _text )
// Purpose:		Remove pilcrow characters from the start and end of the text.
// Parameters:		_text:	The text to remove the pilcrows from.
// Requirements: 	text.StartsWith
//				text.EndsWith
// Version:		1.0 Jim Feuerstein
// Notes:			This function may be unnecessary given the presence of text.SuperTrim
// 				Copyright © 2017 Labor Street; https://opensource.org/licenses/MIT
// Example:		sample = result

Let (
  [
    _new_len = Length ( _text ) - 1
  ] ;

  Case (
    text.StartsWith ( _text ; "¶" ) ;
    text.TrimPilcrows ( Right ( _text ; _new_len ) ) ;

    text.EndsWith ( _text ; "¶" ) ;
    text.TrimPilcrows ( Left ( _text ; _new_len ) ) ;

    _text
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="378" name="text.TrimStart"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// txtp.TrimStart ( _text ; _chars )
// Purpose:		Removes the specified number of characters from the beginning of the text.
// Parameters:		_text:	The text to trim
//				_chars:	The number of characters to remove
// Version:		1.0 - Nicholas Orr - 11-06-03
// Notes:			http://www.goya.com.au/blog/guide-filemaker-import-paths
// Example:		txtp.TrimStart ( "some text"; 5 ) = "text"

Right ( _text ; Length ( _text ) - _chars )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="379" name="text.WhitespacePosition"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// text.WhitespacePosition ( _text ; _start )
// Purpose:		Returns the position of whitespace (space, return or tab)
// Parameters:		_text:	The text to search
//				_start:	Where to start looking for whitespace
// Version:		1.0 - Charles Ross - 18-04-13
// Example:		sample = result

Let (
  [
    _space	= Position ( _text ; " " ; _start ; 1 ) ;
    _return	= Position ( _text ; "¶" ; _start ; 1 ) ;
    _tab	= Position ( _text ; Char ( 9 ) ; _start ; 1 ) ;

    _space = Case (
      _space = 0	; 1.0e+100
			; _space
    ) ;

    _return = Case (
      _return = 0	; 1.0e+100
			; _return
    ) ;

    _tab = Case (
      _tab = 0	; 1.0e+100
			; _tab
    ) ;

    _result = Case (
      ( _space = 1.0e+100 )
        and ( _return = 1.0e+100 )
        and ( _tab = 1.0e+100 ) ;
     0 ;
    Min ( _space ; _return ; _tab )
  ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="380" name="timestamp_____ Timestamp Processing ________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// One function that deals with formatting timestamps.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="381" name="timestamp.ClockTime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.HoursMinutes
// Purpose:		Return the time formatted for standard display.
// Parameters:		_time:	The time to format
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		timestamp.HoursMinutes ( Time ( 15 ; 6 ; 1 ) ) = "3:06 pm"

Let (
  [
    _time = GetAsTime ( _time )
  ] ;

  timestamp.Format ( _time ; "%l:%M %p" )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="382" name="timestamp.ConvertUnix"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ConvertUnix ( _unix_timestamp )
// Purpose:		Given a timestamp in standard Unix format, return a FileMaker timestamp.
// Parameters:		_unix_timestamp: A string representing a standard Unix timestamp.
// Requirements: 	list.CreateList
//				date.ConvertUnixDate
// Version:		1.0 written 15-08-24 by Charles Ross
// Notes:			Standard Unix timestamp is "YYYY-MM-DD HH:MM:SS.SS". Fractional seconds are
//				discarded.
// Example:		timestamp.ConvertUnix ( "2015-08-24 10:47:42" )
//				  = Timestamp ( Date ( 8 ; 24 ; 2015 ) ; Time ( 10 ; 47 ; 42 ) )

Let (
  [
    _list		= list.CreateList ( _unix_timestamp ; " " ) ;
    _date_string	= GetValue ( _list ; 1 ) ;
    _time_string	= GetValue ( _list ; 2 ) ;

    _date = date.ConvertUnixDate ( _date_string ) ;

    _time_list	= list.CreateList ( _time_string ; ":" ) ;
    _hour		= GetValue ( _time_list ; 1 ) ;
    _minute	= GetValue ( _time_list ; 2 ) ;
    _second	= Int ( GetValue ( _time_list ; 3 ) ) ;
    _time		= Time ( _hour ; _minute ; _second ) ;

    _timestamp = Timestamp ( _date ; _time ) ;

    _result = Case (
      IsEmpty ( _unix_timestamp ) or ( _timestamp = "?" ) ;	dev.Nil ;
											_timestamp
    )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="383" name="timestamp.Format"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.Format ( _timestamp; _format_string )
// Purpose:		Uses the Unix date command tool flags to take a date and format it by the provided
//				string.
// Parameters:		_timestamp:	The timestamp to format.
//				_format_string:	The string to use for formatting.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 06-06-14
//				1.1 - Charles Ross - 08-12-12
//				1.2 - Charles Ross - 14-12-16
//				1.3 - Charles Ross - 15-10-07 Updated `l` format option to have no leading zero
// Notes:			Uses the same formatting option as the `date` command line tool in Unix
//				(`man date`).
//				https://developer.apple.com/library/mac/documentation/Darwin/Reference/
//				ManPages/man1/date.1.html
//
//				The format options are documented in the `strftime` C function man page
//				(`man strftime`).
//				https://developer.apple.com/library/mac/documentation/Darwin/Reference/
//				ManPages/man3/strftime.3.html
// Example:		timestamp.Format ( Timestamp ( Date ( 3; 27; 15 ); Time ( 14; 3; 6 ) ) ;"%D %H:%m %p" )
//				  = "03/27/15 14:03 PM"

Let(
  [
    _timestamp	= GetAsTimestamp( _timestamp );
    _month		= Month( _timestamp );
    _day		= Day( _timestamp );
    _year		= Year( _timestamp );
    _hour		= Hour( _timestamp );
    _low_hour	= Mod( _hour; 12 ) + ( ( Mod ( _hour ; 12 ) = 0 ) * 12 );
    _minute	= Minute( _timestamp );
    _second	= Seconds( _timestamp );

    //  D - Date in mm/dd/yy format (06/14/06)
    _D = Right( "0" & _month; 2 ) & "/" &
      Right( "0" & _day; 2 ) & "/" &
      Right( _year; 2 );
    //  x - Date in standard format for locale, for this solution just the same
    //   as D
    _xx = _D;

    //  C - Century (20 for 2006)
    _C = Left( _year; 2 );
    //  Y - Year in 4-digit format (2006)
    _Y = _year;
    //  y - Year in 2-digit format (06)
    _yy = Right( _year; 2 );
    //  G - Same as Y
    _G = _Y;
    //  g - Same as y
    _g = _yy;

    //  b - Month name - abbreviated (Jan)
    _bb = Left( MonthName( _timestamp ); 3 );
    //  B - Month name - full (January)
    _B = MonthName( _timestamp );
    //  h - Same as b
    _hh = _bb;
    //  m - Month number (06)
    _mm = Right( "0" & _month; 2 );

    //  W - Week of the year (00-52)
    _W = WeekOfYear( _timestamp ) - 1;
    //  V - Week of the year (01-51)
    _V = _W + 1;
    //  U - Same as W
    _U = _W;

    //  A - Day of the week - full name (Monday)
    _A = DayName( _timestamp );
    //  a - Day of the week - abbreviated name (Mon)
    _aa = Left( _A; 3 );
    //  u - Day of the week - number (Sunday = 1, although date tool has Monday
    //   = 1)
    _uu = DayOfWeek( _timestamp );
    //  d - Day of the month - 2 digits (05)
    _dd = Right( "0" & _day; 2 );
    //  e - Day of the month - digit preceded by a space ( 5)
    _ee = " " & _day;
    //  j - Day of the year - (1-366)
    _jj = DayOfYear( _timestamp );
    //  w - Same as u
    _ww = _uu;

    //  p - AM or PM
    _pp = Case( _hour < 12; "AM"; "PM" );
    //  r - Time in 12-hour format (09:15:36 AM)
    _rr = Right( "0" & _low_hour; 2 ) & ":" &
      Right( "0" & _minute; 2 ) & ":" &
      Right( "0" & _second; 2 ) & " " &
      _pp;
    //  R - Time in 24-hour format - no seconds (17:45)
    _R = Right( "0" & _hour; 2 ) & ":"  &
      Right( "0" & _minute; 2 );
    //  T - Time in 24-hour format (17:45:52)
    _T = _R & ":" & Right( "0" & _second; 2 );
    //  X - Same as T
    _X = _T;
    //  Z - Time zone offset from UTC (-07), NOT SUPPORTED

    //  H - Hour in 24-hour format (17)
    _H = Right( "0" & _hour; 2 );
    //  I - (upper case i) Hour in 12-hour format (05)
    _I = Right( "0" & _low_hour; 2 );
    //  k - Same as H
    _k = _H;
    //  l - (lower case L) Hour in 12-hour format (5)
    _ll = _low_hour;

    //  M - Minutes (35)
    _M = Right( "0" & _minute; 2 );
    //  S - Seconds (05)
    _S = Right( "0" & _second; 2 );
    //  s - Seconds elapsed since 1/1/1970
    _ss = GetAsNumber(
      _timestamp - Timestamp( Date( 1; 1; 1970 ); Time( 0; 0; 0 ) )
    )
  ];

  Substitute( _format_string;
    [ "%%";		"%"	];
    [ "%D";		_D	];
    [ "%x";		_xx	];
    [ "%C";		_C	];
    [ "%Y";		_Y	];
    [ "%y";		_yy	];
    [ "%G";		_G	];
// [ "%g";		_gg	]; Unsupported Unix flag
    [ "%b";		_bb	];
    [ "%B";		_B	];
    [ "%h";		_hh	];
    [ "%m";		_mm	];
    [ "%W";		_W	];
    [ "%V";		_V	];
    [ "%U";		_U	];
    [ "%a";		_aa	];
    [ "%A";		_A	];
    [ "%u";		_uu	];
    [ "%d";		_dd	];
    [ "%e";		_ee	];
    [ "%j";		_jj	];
    [ "%w";		_ww	];
    [ "%p";		_pp	];
    [ "%r";		_rr	];
    [ "%R";		_R	];
    [ "%T";		_T	];
    [ "%X";		_X	];
    [ "%H";		_H	];
    [ "%I";		_I	];
// [ "%k";		_kk	]; Unsupported Unix flag
    [ "%l"; 		_ll	];
    [ "%M";		_M	];
    [ "%S";		_S	];
    [ "%s";		_ss	]
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="384" name="timestamp.FromISO8601"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.FromISO8601 ( _iso )
// Purpose:		Converts an ISO8601 timestamp into a FileMaker timestamp.
// Parameters:		_iso:		Text of an ISO8601 timestamp.
// Requirements: 	lsts.CreateList
// Version:		1.0 - Charles Ross - 15-12-22
// Example:		timestamp.FromISO8601 (  "2015-12-01T20:34:56Z" ) = Timestamp ( Date ( 12 ; 1; 2015 ) ; Time ( 20 ; 34 ; 56 ) )

Let (
  [
    _list = list.CreateList ( _iso ; "T" ) ;

    _date_list = list.CreateList ( GetValue ( _list ; 1 ) ; "-" ) ;

    _date = Date (
      GetValue ( _date_list ; 2 ) ;
      GetValue ( _date_list ; 3 ) ;
      GetValue ( _date_list ; 1 )
    ) ;

    _time_list = list.CreateList ( GetValue ( _list ; 2 ) ; ":" ) ;

    _time = Time (
      GetValue ( _time_list ; 1 ) ;
      GetValue ( _time_list ; 2 ) ;
      GetAsNumber ( GetValue ( _time_list ; 3 ) )
    )

  ] ;

  Timestamp ( _date ; _time )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="385" name="timestamp.FromRFC2822"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.FromRFC2822 ( _rfc_2822 )
// Purpose:		Parses an RFC2822 timestamp into a FileMaker timestamp
// Parameters:		_rfc_2822: The RFC2822 formatted string
// Version:		1.0 - Charles Ross - 17-07-09
// Example:		sample = result

Let (
  [
   _list = list.CreateList ( _rfc_2822 ; " " ) ;

    _month = date.MonthNumber ( GetValue ( _list ; 3 ) ) ;
    _day = GetAsNumber ( GetValue ( _list ; 2 ) ) ;
    _year = GetValue ( _list ; 4 )
  ] ;

  Timestamp ( Date ( _day ; _month ; _year ) ; GetAsTime ( GetValue ( _list ; 5 ) ) )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="386" name="timestamp.ICSFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ICSFormat ( _date ; _start ; _end ; _summary ; _description ; _location )
// Purpose:		Return the ICS file format version of the parameters passed.
// Parameters:		_date:		The date of the appointment
//				_start:		The start time of the appointment
//				_end:		The end time for the appointment
//				_summary:	The summary of the appointment
//				_description:	The details of the appointment
//				_location:		The location of the appointment
// Requirements: 	timestamp.ToiCalFormat
// Version:		1.0 - Charles Ross - 18-11-08
// Notes:			Inspired by work of Douglas Alder
// Example:		sample = result

Let (
  [
    _start_ts = Timestamp ( _date ; _start ) ;
    _start_ts = timestamp.ToiCalFormat ( _start_ts ) ;

    _end_ts = Timestamp ( _date ; _end ) ;
    _end_ts = timestamp.ToiCalFormat ( _end_ts ) ;

    _result = List (
      "BEGIN:VCALENDAR" ;
      "VERSION 2.0" ;
      "PRODID:-//FileMaker Pro//NONSGML Demo//EN" ;
      "BEGIN:VEVENT" ;
      "SUMMARY:" & _summary ;
      "UUID:" & Get ( UUID ) ;
      "DTSTAMP:" & _start_ts ;
      "DTSTART:" & _start_ts ;
      "DTEND:" & _end_ts ;
      "DESCRIPTION:" & _description ;
      "LOCATION:" & _location ;
      "END:VEVENT" ;
      "END:VCALENDAR"
    ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="387" name="timestamp.LocalMilliseconds"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.LocalMilliseconds
// Purpose:		Return the current timestamp accurate to milliseconds.
// Requirements: 	timestamp.UTCDifference
// Version:		1.0 - Charles Ross - 17-02-10

GetAsTimestamp ( ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) + GetAsNumber ( timestamp.UTCDifference ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="388" name="timestamp.MonDDYYYYHHMMP"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.MonDDYYYYHHMMP ( _timestamp )
// Purpose:		Return a formatted timestamp in the form }Mon DD, YYYY, HH:MM pm"
// Parameters:		_timestamp:	The timestamp to format.
// Requirements: 	timestamp.Format
// Version:		1.0 - Charles Ross - 18-06-27
// Notes:			Notes
// Todo:			To dos
// Example:		timestamp.MonDDYYYYHHMMP ( Timestamp ( Date ( 6 ; 27 ; 2018 ) ; Time ( 12 ; 30 ; 0 ) ) ) = "Jun 27, 2018, 12:30 pm"

timestamp.Format ( _timestamp ; "%b%e, %Y, %l:%M %p" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="389" name="timestamp.TextualTime"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.TextualTime ( _time )
// Purpose:		Returns the time with words for units.
// Parameters:		_time:	The time to format
// Requirements: 	math.RoundTo
// Version:		1.0 - Charles Ross - 17-03-08
// Example:		timestamp.TextualTime ( Time ( 3 ; 4; 5 ) ; False ) = "3 hours, 4 minutes and 5 seconds"

Let (
  [
    _time = GetAsTime ( Case (
      _round_seconds	; math.RoundTo ( _time ; 60 )
				; _time
    ) ) ;

    _hours		= Hour ( _time ) ;
    _minutes	= Minute ( _time ) ;
    _seconds	= Seconds ( _time ) ;

    _hour_metric = Case (
      _hours = 0	; dev.Nil ;
      _hours = 1	; "1 hour"
      			; _hours & " hours"
    ) ;

    _minute_metric = Case (
      _minutes = 0	; dev.Nil ;
      _minutes = 1	; "1 minute"
				; _minutes & " minutes"
    ) ;

    _second_metric = Case (
      _seconds = 0	; dev.Nil ;
      _seconds = 1	; "1 second"
				; _seconds & " seconds"
    ) ;

    _metrics = List ( _hour_metric ; _minute_metric ; _second_metric ) ;

    _result = Choose ( ValueCount ( _metrics ) ;
      "0 seconds" ;
      _metrics ;
      GetValue ( _metrics ; 1 ) & " and " & GetValue ( _metrics ; 2 ) ;
      GetValue ( _metrics ; 1 ) & ", " & GetValue ( _metrics ; 2 ) & " and " & GetValue ( _metrics ; 3 )
    ) ;

    _ = ""
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="390" name="timestamp.ToiCalFormat"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ToiCalFormat ( _timestamp )
// Purpose:		Converts a FileMaker timestamp into that used in the iCal file format.
// Parameters:		_timestamp:	The timestamp to convert
// Requirements: 	timestamp.FormatTimestamp
//				timestamp.UTCDifference
// Notes:			Converts to the version that uses UTC time instead of providing the time zone offset.
// Version:		1.0 - Charles Ross - 18-11-08
// Example:		timestamp.ToiCalFormat ( Timestamp ( Date ( 12 ; 1; 2015 ) ; Time ( 12 ; 34 ; 56 ) ) ) = "20151201T203456Z"

timestamp.Format ( _timestamp - timestamp.UTCDifference ; "%Y%m%dT%H%M%SZ" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="391" name="timestamp.ToISO8601"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.ToISO8601 ( _timestamp )
// Purpose:		Converts a FileMaker timestamp into the ISO8601 format.
// Parameters:		_timestamp:	The timestamp to convert
// Requirements: 	timestamp.FormatTimestamp
//				timestamp.UTCDifference
// Notes:			Converts to the version that uses UTC time instead of providing the time zone offset.
// Version:		1.0 - Charles Ross - 15-12-22
// Example:		timestamp.ToISO8601 ( Timestamp ( Date ( 12 ; 1; 2015 ) ; Time ( 12 ; 34 ; 56 ) ) ) = "2015-12-01T20:34:56Z"

timestamp.Format ( _timestamp - timestamp.UTCDifference ; "%Y-%m-%dT%TZ" )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="392" name="timestamp.UTCDifference"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// timestamp.UTCDifference
// Purpose:		Returns the time difference between the current timezone and UTC. 
// Version:		1.0 - Jeremy Bante - 14-05-18
// Notes:			https://www.briandunning.com/cf/1442
//				Adding the results to UTC time should give the local time, while subtracting this from the
//				local time should give UTC time.
// Example:		// When run in California…
//				timestamp.UTCDifference = "-8:00:00"

Get ( CurrentTimestamp ) - GetAsTimestamp ( Floor ( Get ( CurrentTimeUTCMilliseconds ) / 1000 ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="393" name="triggers_____ Trigger Control ______________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that allow for the control of script trigger execution.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="394" name="triggers._ScriptKey"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers._ScriptKey
// Purpose:		A convenience function that is used by both trig.Disable and trig.Enable.
// Requirements: 	$_triggers_disabled_key
// Version:		1.0 - Charles Ross - 15-06-20

Char ( 9 ) & $_triggers_disabled_key & ¶]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="395" name="triggers.Active"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Active
// Purpose:		Checks a global variable to determine if script triggers should be allowed to run.
// Requirements: 	$$_TRIGGERS_DISABLED
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
// Example:		// Assuming triggers have been disabled…
//				not triggers.Active

not $$_TRIGGERS_DISABLED]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="396" name="triggers.Disable"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Disable
// Purpose:		Sets global variables to indicate that the current script is suppressing triggers.
// Requirements: 	$$_TRIGGERS_DISABLED
//				$$_TRIGGERS_DISABLED_SCRIPTS
//				$_triggers_disabled_key
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
//				This function must be called from within a script. Otherwise it will not supress
//				triggers and will return False.
// Example:		// When called within a script…
//				triggers.Disable = True

Let (
  [
    _script_name		= Get ( ScriptName ) ;
    _script_is_running		= not IsEmpty ( _script_name ) ;

    // Has this script already disabled triggers?
    _disable_is_running	= not IsEmpty ( $_triggers_disabled_key ) ;

    // If this script already disabled triggers, use the existing key, otherwise generate a new one.
    $_triggers_disabled_key = Case (
      _disable_is_running	; $_triggers_disabled_key ;
      _script_is_running	; Get ( UUID )
    ) ;

    // If this is the first time this script is disabling triggers, add it to the list.
    $$_TRIGGERS_DISABLED_SCRIPTS = Case (
      _script_is_running and not _disable_is_running ;		_script_name & triggers._ScriptKey ;
      											dev.Nil
    ) & $$_TRIGGERS_DISABLED_SCRIPTS;

    $$_TRIGGERS_DISABLED = _script_is_running or $$_TRIGGERS_DISABLED
  ] ;

  _script_is_running
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="397" name="triggers.Enable"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Enable
// Purpose:		Sets global variables to indicate that the current script is no longer suppressing
//				triggers.
// Requirements: 	$$_TRIGGERS_DISABLED
//				$$_TRIGGERS_DISABLED_SCRIPTS
//				$_triggers_disabled_key
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
//				This function checks to see if there are other scripts that are suppressing triggers
//				before enabling them, preventing subscripts for enabling triggers that calling
//				scripts have disabled.
// Example:		// When called within a script but a calling script has already disabled triggers…
//				triggers.Enable = False

Case (
  not IsEmpty ( $_triggers_disabled_key ) ;
  Let (
    [
      // Remove this script's entry from the list of scripts that have disabled triggers.
      _scripts_len		= Length ( $$_TRIGGERS_DISABLED_SCRIPTS ) ;
      _script_pos		= Position ( $$_TRIGGERS_DISABLED_SCRIPTS ; triggers._ScriptKey ; _scripts_len ; -1 ) ;

      _break_pos = Case (
        _script_pos > 0 ;	Position ( $$_TRIGGERS_DISABLED_SCRIPTS ; ¶ ; _script_pos ; 1 ) ;
					0
      ) ;

      $$_TRIGGERS_DISABLED_SCRIPTS =
        Right ( $$_TRIGGERS_DISABLED_SCRIPTS ; _scripts_len - _break_pos ) ;

      // Only enable the triggers if no other calling scripts have disabled them.
      $$_TRIGGERS_DISABLED = Case (
        not IsEmpty ( $$_TRIGGERS_DISABLED_SCRIPTS ) and $$_TRIGGERS_DISABLED ;	True ;

        dev.Nil
      ) ;

      $_triggers_disabled_key = dev.Nil
    ] ;

    dev.Nil
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="398" name="triggers.Force"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Force
// Purpose:		Forces triggers to enable. Should always be accompanied by triggers.Restore
// Version:		1.0 - Charles Ross - 17-04-27
// Notes:			Execute this, with triggers.Retore, when a script step absolutely *must* have
//				triggers turned on.
// Example:		sample = result

Let (
  [
    $$_TRIGGERS_SCRIPTS_STORE = $$_TRIGGERS_DISABLED_SCRIPTS ;
    $$_TRIGGERS_DISABLED_SCRIPTS = dev.Nil ;
    $$_TRIGGERS_DISABLED = dev.Nil
  ] ;

  ""
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="399" name="triggers.Reset"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Reset
// Purpose:		Forces any existing trigger suppression to be halted regardless of calling script
//				trigger suppression state.
// Requirements: 	$$_TRIGGERS_DISABLED
//				$$_TRIGGERS_DISABLED_SCRIPTS
//				$_triggers_disabled_key
// Version:		1.0 - Jeremy Bante - 13-04-08
// Notes:			https://github.com/jbante/FileMaker-Techniques/blob/master/CustomFunctions/Triggers/TriggersAreActive.fmfn
//				http://filemakerstandards.org/display/bp/Suppressible+Triggered+Scripts
//				This may be useful to recover from a situation where a script forgot to call
//				TriggersEnable at the end of operation. In order to be suppressed, a script called
//				via trigger should use the TriggersAreActive function to decide whether or not to run.
// Example:		// Completely halts the suppression of triggers…
//				trig.Reset

dev.ClearVars ( List (
  "$$_TRIGGERS_DISABLED_SCRIPTS" ;
  "$$_TRIGGERS_DISABLED" ;
  "$_triggers_disabled_key"
) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="400" name="triggers.Restore"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// triggers.Restore
// Purpose:		Restores triggers to their previous state after a force enable.
// Version:		1.0 - Charles Ross - 17-04-27
// Example:		sample = result

Let (
  [
    $$_TRIGGERS_DISABLED_SCRIPTS = $$_TRIGGERS_SCRIPTS_STORE ;
    $$_TRIGGERS_SCRIPTS_STORE = dev.Nil ;
    $$_TRIGGERS_DISABLED = not IsEmpty ( $$_TRIGGERS_DISABLED_SCRIPTS )
  ] ;

  ""
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="401" name="url_____ URL Builders ______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that assist with building URL strings.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="402" name="url._LetNotationToURLVars"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-10
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Case (
  ValueCount ( _let_notation ) = 0 ;
  dev.Nil ;

  Let (
    [
      _name = let.First ( _let_notation ) ;
      _value = let.Get ( _let_notation ; _name ) ;

      _let_notation = let.Remove ( _let_notation ; _name )
    ] ;

    url.Param ( _name ; _value ) & url._LetNotationToURLVars ( _let_notation )
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="403" name="url.Auth"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.Auth ( _user ; _password )
// Purpose:		Adds a user's name and password to a URL, replaces one if it already exists.
// Parameters:		_user:		The user's account name
//				_password:	The password string
// Requirements: 	url.Bookend
//				url.ProtocolEnd
//				dev.Nil
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			The authorization string comes after the protocol but before the "@" symbol.
//				http://www.modularfilemaker.org/module/urlbuilder/
// Example:		sample = result

Let (
  [
    _auth_end = "@" ;

    _new_url = $$_URLB_CURRENT_URL ;

    // Clear out any existing authorization.
    _pos_1		= Position ( _new_url ; "://" ; 1; 1 ) + Length ( "://" ) ;
    _pos_2		= Position ( _new_url ; _auth_end ; _pos_1 ; 1 ) + Length ( _auth_end ) ;
    _size		= _pos_2 - _pos_1 ;
    _old_auth	= Middle ( _new_url ; _pos_1 ; _size );

    _new_url = Case (
      IsEmpty ( _old_auth ) ;		_new_url ;
						Substitute ( _new_url ; _old_auth ; dev.Nil )
    ) ;

    // Calculate and insert the new authorization
    _new_auth = Case (
      IsEmpty ( _user & _password ) ;	dev.Nil ;
							_user & ":" & _password & _auth_end
    ) ;

    _new_url = Substitute(
      _new_url	; "://"
      			; "://" & _new_auth
    )

  ];

  // This will assign the updated URL to the global variable.
  url.Bookend ( _new_url )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="404" name="url.Bookend"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.URL ( _value )
// Purpose:		Gets or sets the current URL
// Parameters:		_value:	Optional, if passed, gets the current URL
// Requirements:	devp.Nil
//				text.StartsWith
// Version:		1.0 - Todd Geist - 15-06-20
//				1.1 - Charles Ross - 17-07-06 - Added httppost as valid protocol
// Notes:			Start and END all chains with this function, EXCEPT fmp URLs - use urlb.FMP for that.
//				http://www.modularfilemaker.org/module/urlbuilder/
// Example:		url.Bookend ( "http://www.geistinteractive.com" ) & 
//				  url.Auth ( "admin" ; "password" ) & 
//				  url.Path ( "contacts" ) &
//				  url.Path ( "23345" ) &
//				  url.Param ( "max" ; "100" ) &
//				  url.Param ( "skip" ; "100" ) &
//				  url.Bookend ("")
//				= "http://admin:password@www.geistinteractive.com/contacts/23345?max=100&skip=100"

Let (
  [
    // If no value is passed, return the final URL in the chain.
    _result = Case (
      IsEmpty ( _value )	; $$_URLB_CURRENT_URL
					; dev.Nil
    ) ;

    // Remove the trailing slash if there is one.
    _value = Case (
      Right ( _value ; 1 ) = "fmp://"	; Left ( _value ; Length ( _value ) - 1 )
							; _value
    ) ;

    _starts_with_protocol = text.StartsWith ( _value ; "http://" )
      or text.StartsWith ( _value ; "https://" )
      or text.StartsWith ( _value ; "httppost://" )
      or text.StartsWith ( _value ; "fmp://" ) ;

    // If the value already starts with a protocol, keep it, otherwise add a default protocol (http). If the value
    // is blank because we're at the end of the chain, retain that, which will next clear out the global variable.
    _value = Case(
      _starts_with_protocol		; _value;
      not IsEmpty( _value ) 		; "http://" & _value
						; _value
    ) ;

    $$_URLB_CURRENT_URL = _value

  ];

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="405" name="url.FMP"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.FMP ( _filename ; _host )
// Purpose:		special chain starter for building fmp URLs.
// Parameters:		_filename:		optional name of the target file, defaults to current file
//				_host:		optional address of the target host, defaults to current file's host
// Requirements: 	urlb.Bookend
//				urlb.VariableStart
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			If you don't pass in the two optional parameters, you get a URL that targets the current
//				file.
//				The format for FMP URLs is
//				fmp://[[users:pw@]addr]/file[?script=name[&param=value][&$param=value]]
//				http://www.modularfilemaker.org/module/urlbuilder/
// Example:		// When called within "File.fmp12"…
//				( url.FMP ( "" ; "" ) & 
//				  url.Param ( "script" ; "New Contact" ) & 
//				  url.Param ( "firstName" ; "Todd" ) & 
//				  url.Param ( "lastName" ; "Geist" )  & 
//				  url.Bookend ( "" )
//				= "fmp://$/File?script=New%20Contact&%24firstName=Todd&%24lastName=Geist" )
//				  and
//				( url.FMP ( "Contacts" ; "192.168.45.1" ) &
//				  url.Param ( "script" ; "New Contact" ) & 
//				  url.Param ( "firstName" ; "Todd" ) & 
//				  url.Param ( "lastName" ; "Geist" )  & 
//				  url.Bookend ( "" )
//				= "fmp://192.168.45.1/Contacts?script=New%20Contact&%24firstName=Todd&%24lastName=Geist" )

Let (
  [
    _default_filename	= Get ( FileName ) ;
    _default_host	= Case (
      Get ( MultiUserState ) = system.MultiUserStateOff	; "$"
											; Get ( HostIPAddress ) 
    ) ;

    _host = Case (
      IsEmpty ( _host ) and IsEmpty ( _default_host )	; "://" ;
      IsEmpty ( _host )							; _default_host
										; _host
    ) ;

    _filename = Case(
      IsEmpty ( _filename )	; _default_filename
					; _filename
    ) ;

    _fmp = "fmp://" & _host & "/" & _filename

  ];

  // Assign this to the global variable for the chain.
  url.Bookend ( _fmp ) 
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="406" name="url.Param"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// urlb.Param ( _name ; _value )
// Purpose:		Adds a name/value pair to the URL query, where the query starts after the "?"
// Parameters:		_name:	The name of the value
//				_value:	The value assigned to the name
// Requirements: 	urlb.Bookend
//				text.StartsWith
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			http://www.modularfilemaker.org/module/urlbuilder/
// Example:		sample = result

Let (
  [
    _old_url	= $$_URLB_CURRENT_URL  ;
    _is_fmp_url	= text.StartsWith ( _old_url ; "fmp://" ) ;

    // If working with an FMP URL, if the name isn't script and doesn't already have a variable indicator,
    // insert it.
    _name = Case (
      _is_fmp_url
        and ( not text.StartsWith ( _name ; "$" ) )
        and ( _name ≠ "param" )
        and ( _name ≠ "script" )							; "$" & _name
												; _name
    );

    _param  = GetAsURLEncoded ( _name ) &"=" & GetAsURLEncoded ( _value );

    // If this is the first parameter, use the "?", otherwise use the "&".
    _sep = Case (
      PatternCount( _old_url; "?" )	; "&"
						; "?"
    )
  ];

  url.Bookend ( _old_url & _sep & _param )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="407" name="url.Path"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.Path ( _segment )
// Purpose:		Adds a segment to the path of a URL, the path is the string after the domain and before
//				the query.
// Parameters:		_segment:		a segment is a string between path separators ("/")
// Requirements: 	urlb.Bookend
// Version:		1.0 - Todd Geist - 15-06-20
// Notes:			http://www.modularfilemaker.org/module/urlbuilder/
// Example:		sample = result

Let (
  [
    _new_url = $$_URLB_CURRENT_URL ;

    _pos_1 = Position ( _new_url ; "https://" ; 1 ; 3 ) ;
    _base = Left ( _new_url ; _pos_1 ) ;

    _pos_2 = Position ( _new_url ; "?" ; 1 ; 1 ) ;

    _query = Case (
      _pos_2 = 0		; dev.Nil
				; Middle(_new_url ; _pos_2 ; 1000000 )
    ) ;

    _pos_2 = Case (
      _pos_2 = 0		; Length ( _new_url )
				; _pos_2
    ) ;

    _old_path = Middle ( _new_url ; _pos_1 + 1 ; _pos_2 - _pos_1 )

  ];

  url.Bookend ( _base & _old_path & "https://" & _segment & _query )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="408" name="url.PerformScriptByName"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Template
// Purpose:		description
// Parameters:		_param:	description
// Requirements: 	requirements
// Version:		1.0 - Charles Ross - 17-03-10
// Notes:			Notes
// Todo:			To dos
// Example:		sample = result

Let (
  [
    _ = url.FMP ( "" ; "" ) ;

    _ = Case (
      dev.IsSet ( _script ) ;
      url.Param ( "script" ; _script )
    ) ;

    _ = Case (
      dev.IsSet ( _param ) ;
      url.Param ( "param" ; _param )
    ) ;

    _ = Case (
      ValueCount ( _vars ) > 0 ;
      url._LetNotationToURLVars ( _vars )
    ) ;

    _result = url.Bookend ( "" )
  ] ;

  _result
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="409" name="url.TimestampedToken"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// url.TimestampedToken
// Purpose:		Return a token that expires one hour after being generated
// Version:		1.0 - Charles Ross - 19-08-19
// Example:		sample = result

Let (
  [
    _uuid = Lower ( Get ( UUID ) ) ;
    _timestamp = math.IntegerToHex ( GetAsNumber ( Get ( CurrentTimestamp ) ) ) ;
    _token = _uuid & "-" & _timestamp
  ] ;

  _token
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="410" name="window_____ Window Utility Functions _______________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions that ease working with utility windows.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="411" name="window.CenterLeft"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.CenterLeft ( _parent_left; _parent_width )
// Purpose:		Returns the left coordinate that the current window should have to center within a
//				parent window of the given dimentions.
// Parameters:		_parent_left:	The left coordinate of the parent window.
//				_parent_width:	The width of the parent window.
// Version:		1.0 - Charles Ross - 15-04-09
//				1.1 - Charles Ross - 17-04-06 - Fixed bug that referenced incorrect dimension.
// Todo:			Provide examples.
// Example:		sample = result

Max( ( ( _parent_width - Get( WindowWidth ) ) / 2 ) + _parent_left; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="412" name="window.CenterTop"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.CenterTop ( _parent_top; _parent_height )
// Purpose:		Returns the top coordinate that the current window should have to center within a
//				parent window of the given dimentions.
// Parameters:		_parent_top:	The top coordinate of the parent window.
//				_parent_height:	The height of the parent window.
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-04-09
// Todo:			Provide examples.
// Example:		sample = result

Max( ( ( _parent_height - Get( WindowHeight ) ) / 2 ) + _parent_top; 0 )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="413" name="window.HeightFromContent"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[_content_height + 37]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="414" name="window.Offscreen"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.Offscreen
// Purpose:		Returns a large negative number for hiding offscreen utility windows, overriding this for
//				developers.
// Requirements:	devp.IsDeveloper
// Author:			Charles Ross
// Version:		1.0 - Charles Ross - 15-04-09
//				1.1 - Charles Ross - 17-04-11 - Added ability for dev to override on screen with shift key
//				1.2 - Charles Ross - 17-08-13 - Added ability for dev to override on screen with global variable
// Example:		// Assuming the current user is not a developer...
//				window.Offscreen = -9000

Let (
  [
    _on_screen = dev.IsDeveloper
      and ( not modifier.KeyActive ( modifier.Shift ) )
      and ( not $$_WINDOW_OFFSCREEN_FOR_DEVELOPER )
  ] ;

  Case (
    _on_screen	; 0
			; -9000
  )
)]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="415" name="window.Utility"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// window.Utility ( _id )
// Purpose:		Returns a window name that can be referred to later, often with a Close Window step.
// Parameters:		_id:	The identifier to refer to the window with when a script works with multiple utility
//					windows.
// Version:		1.0.0 - Charles Ross - 15-04-09
//				1.0.1 - Charles Ross - 17-12-07 - Use UUID as default if no ID is given.
// Example:		window.Utility ( "entity" ) = "utility_window_entity"

"utility_window" & "_" & dev.Default ( _id ; Get ( UUID ) )]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="416" name="window.WidthFromContent"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[_content_height + 15]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="417" name="xml_____ XML Parsing _______________________________________________________________________________"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// Functions for processing XML data.]]></Text>
						</Calculation>
					</CustomFunctionCalc>
					<CustomFunctionCalc>
						<CustomFunctionReference id="418" name="xml.ExtractData"></CustomFunctionReference>
						<Calculation>
							<Text><![CDATA[// xmlp.ExtractData ( _xml ; _tag ; _idx )
//
// Purpose:		Returns the contents of the instanceth attribute of the xml.
//
// Parameters:		_xml:	The XML data to parse
//				_tag:		The tag to get the data from
//				_idx:		Which instance of the tag to get.
//
// Requirements: 	requirements
//
// Version:		1.0 written 08-04-29 by Andy Knasinski
//
// Notes:			https://www.briandunning.com/cf/1
//
// Todo:			Debug edit in comments below that was made by Daniel A. Shockley which is supposed
//				to be able to handle tags with attributes (i.e., <InvNum attrb="value">123</InvNum>).
//
// Example:
// Let (
//   [
//     _xml = List (
//       "<xml>" ;
//       "  <InvNum>123</InvNum>" ;
//       "  <InvNum>456</InvNum>" ;
//       "  <InvNum>789</InvNum>" ;
//       "</xml>"
//     )
//   ] ;
// 
//   xmlp.ExtractData ( _xml ; "InvNum" ; 2 )
// ) = 456


// https://www.briandunning.com/cf/1

Let (
  [
    _xml_len = Length ( _xml ) ; 
    _tag_len = Length ( _tag ) ; 
    _idx = If ( IsEmpty ( _idx ) ; 1 ; _idx ) ;

    _open = "<" & _tag & ">" ;
    _close = "</" & _tag & ">" ;

    _open_pos = Position ( _xml ; _open ; 1 ; _idx ) ;
    _close_pos = Position ( _xml ; _close ; 1 ; _idx ) ;

    _start = _open_pos + _tag_len + 2 ;
    _len = _xml_len - ( _xml_len - _close_pos ) - ( _open_pos + _tag_len + 2 )
  ] ;

  Case(
    IsEmpty ( _xml )
      or IsEmpty ( _tag )
      or ( PatternCount ( _xml ; _open ) = 0 ) ;
    dev.Nil ;

    Middle ( _xml ; _start ; _len )
  )
)

/* //version 1.1, Daniel A. Shockley
Let ( [ 
XML_Length = Length ( _xml ) 
; Attribute_Length = Length ( _attribute ) 
; Get_Instance = If ( IsEmpty ( _instance ) ; 1 ; _instance ) 
; posOpenTagStart = Position ( _xml ; "<" & _attribute; 1; Get_Instance ) 
; posNextOpen = Position ( _xml ; "<"; posOpenTagStart + 1; 1 ) 
; posOpenTagFinish = Position ( _xml ; ">"; posOpenTagStart; 1 ) 
; posCloseTagStart = Position( _xml; "</" & _attribute & ">"; posOpenTagFinish; 1 )
]; 


Case(
IsEmpty ( _xml ) or IsEmpty ( _attribute ) 
or ( posOpenTagStart = 0 ) // Attribute not in XML at all
or ( posNextOpen>0 and posOpenTagFinish> posNextOpen ) // Attribute seems to start, but another tag starts before opening tag brackets close
; "" 
;
Middle ( 
_xml 
; posOpenTagFinish + 1 
; posCloseTagStart - posOpenTagFinish - 1
)
) 

)*/]]></Text>
						</Calculation>
					</CustomFunctionCalc>
				</ObjectList>
			</CalcsForCustomFunctions>
			<ScriptCatalog membercount="2">
				<Script id="3" name="_OnFirstWindowOpen">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT4045ADCA759C1280AD0DE6169A1AD2127553207F53F02E017A907F5404426E43B43BD1E1FE734FD9B7827061E8F67734 </TagList>
				</Script>
				<Script id="2" name="Reset Password">
					<Options hidden="True" access="ReadWrite" runwithfullaccess="False" compatibility="0">8</Options>
					<TagList>#^FMI%SCRPT798FDF0EA555E389AAF4DBC4DE19FAF05825305F888BA4BD38C9E11401969747385916C00E0647FC9E132DA71487DBCB </TagList>
				</Script>
			</ScriptCatalog>
			<ThemeCatalog membercount="1">
				<Theme Display="Enlightened" Group="Aspire" version="6" locale="en" platform="1" name="com.filemaker.theme.enlightened" id="1">
					<Image type=".png"></Image>
					<CSS><![CDATA[/* Object Styles */
top_nav_part:normal .self
{
	background-color: rgba(0%,0%,0%,1);
	box-sizing: border-box;
}

button_bar_segment:normal .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(63.9216%,63.9216%,63.9216%,1);
	line-height: 1line;
	text-align: center;
	-fm-text-vertical-align: center;
}
button_bar_segment:hover .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(18.4314%,52.1569%,98.0392%,1);
}
button_bar_segment:pressed .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(13.3333%,36.4706%,67.451%,1);
}
button_bar_segment:checked .self
{
	background-color: rgba(0%,0%,0%,1);
	color: rgba(18.4314%,52.1569%,98.0392%,1);
}
button_bar_segment:focus .inner_border
{
	box-shadow: inset 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
button_bar_segment:normal .text
{
	width: 100%;
	height: 100%;
	box-sizing: border-box;
}
button_bar_segment:normal .icon
{
	-fm-icon-color: rgba(63.9216%,63.9216%,63.9216%,1);
	-fm-icon-padding: 0.33em;
}
button_bar_segment:hover .icon
{
	-fm-icon-color: rgba(18.4314%,52.1569%,98.0392%,1);
}
button_bar_segment:pressed .icon
{
	-fm-icon-color: rgba(13.3333%,36.4706%,67.451%,1);
}
button_bar_segment:checked .icon
{
	-fm-icon-color: rgba(18.4314%,52.1569%,98.0392%,1);
}

button_bar:normal .button_bar_divider
{
	border-top-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-right-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-bottom-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-left-color: rgba(36.0784%,36.0784%,36.0784%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

radio_set:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1.2line;
	text-align: left;
}
radio_set:normal .text
{
	margin-left: 0.33em;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	left: 1em;
	position: absolute;
	box-sizing: border-box;
}
radio_set:normal .icon
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 50% 50%;
	border-bottom-right-radius: 50% 50%;
	border-bottom-left-radius: 50% 50%;
	border-top-left-radius: 50% 50%;
	padding-top: 0.17em;
	padding-right: 0.17em;
	padding-bottom: 0.17em;
	padding-left: 0.17em;
	width: 1em;
	height: 1em;
	top: 0.1em;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
radio_set:focus .icon
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
radio_set:checked .icon
{
	-fm-icon: radio;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

popover:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 2line;
	text-align: center;
	box-shadow: 1pt 1pt 3pt 0pt rgba(0%,0%,0%,0.2);
}
popover:normal .text
{
	height: 1.42em;
	top: 0.42em;
	right: 8pt;
	left: 8pt;
	position: absolute;
	box-sizing: border-box;
}
popover:normal .contents
{
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	top: 1.84em;
	right: 6pt;
	bottom: 6pt;
	left: 6pt;
	position: absolute;
	box-sizing: border-box;
}

edit_box:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
edit_box:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
edit_box:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
edit_box:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
edit_box:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}

portal:normal .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	-fm-use-portal-current-row-style: true;
}
portal:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
portal:normal .contents
{
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
portal:normal .row
{
	background-color: rgba(100%,100%,100%,1);
}
portal:normal .row_alt
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
}
portal:normal .scrollbar_track
{
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
}
portal:normal .row_active
{
	background-color: rgba(90.1961%,93.7255%,97.6471%,1);
}

chart:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
chart:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
chart:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.5em;
	padding-right: 0.5em;
	padding-bottom: 0.5em;
	padding-left: 0.5em;
}

header:normal .self
{
	background-color: rgba(20%,20%,20%,1);
	box-sizing: border-box;
}

oval:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

tab_panel:normal .self
{
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	-fm-tab-top-left-radius: 3pt 3pt;
	-fm-tab-top-right-radius: 3pt 3pt;
}
tab_panel:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(22.3529%,22.3529%,22.3529%,1)), to(rgba(20.7843%,20.7843%,20.7843%,1)));
}
tab_panel:checked .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
}
tab_panel:checkedfocus .self
{
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
tab_panel:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
tab_panel:normal .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:hover .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:checked .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:checkedfocus .text
{
	height: 100%;
	box-sizing: border-box;
}
tab_panel:normal .tab
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20%,20%,20%,1)), to(rgba(14.902%,14.902%,14.902%,1)));
	border-top-right-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
tab_panel:hover .tab
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(22.3529%,22.3529%,22.3529%,1)), to(rgba(20.7843%,20.7843%,20.7843%,1)));
}
tab_panel:focus .tab
{
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
tab_panel:checked .tab
{
	background-image: none;
}
tab_panel:normal .tab_inner_border
{
	padding-top: 0.17em;
	padding-right: 0.67em;
	padding-bottom: 0.17em;
	padding-left: 0.67em;
}

text_box:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
text_box:normal .text
{
	height: 100%;
	box-sizing: border-box;
}

rounded:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 5pt 5pt;
	border-bottom-right-radius: 5pt 5pt;
	border-bottom-left-radius: 5pt 5pt;
	border-top-left-radius: 5pt 5pt;
}
rounded:normal .inner_border
{
	border-top-right-radius: 4pt 4pt;
	border-bottom-right-radius: 4pt 4pt;
	border-bottom-left-radius: 4pt 4pt;
	border-top-left-radius: 4pt 4pt;
}

tab_control:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(100%,100%,100%,1);
	line-height: 1line;
	text-align: left;
	-fm-tab-spacing: 0;
}
tab_control:checked .self
{
	color: rgba(0%,0%,0%,1);
}

title_footer:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	box-sizing: border-box;
}

text_area:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
text_area:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
text_area:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
text_area:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
text_area:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
text_area:normal .scrollbar_track
{
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
}

container:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
container:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
container:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
container:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.5em;
	padding-right: 0.5em;
	padding-bottom: 0.5em;
	padding-left: 0.5em;
}

dot_control:normal .self
{
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
}
dot_control:normal .inner_border
{
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
}
dot_control:normal .contents
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	top: 0pt;
	right: 0pt;
	bottom: 21pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
dot_control:normal .dot
{
	background-color: rgba(79.2157%,80.7843%,81.9608%,1);
	border-top-right-radius: 50% 50%;
	border-bottom-right-radius: 50% 50%;
	border-bottom-left-radius: 50% 50%;
	border-top-left-radius: 50% 50%;
	margin-left: 0.33em;
	width: 9pt;
	height: 9pt;
}
dot_control:checked .dot
{
	background-color: rgba(0%,0%,0%,1);
}
dot_control:normal .dot_container
{
	height: 15pt;
	right: 0pt;
	bottom: 0.25em;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}

footer:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(94.5098%,94.5098%,94.5098%,1)));
	border-top-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: solid;
	border-right-style: none;
	border-bottom-style: none;
	border-left-style: none;
	border-top-width: 1pt;
	box-sizing: border-box;
}

calendar:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
calendar:pressed .self
{
	border-top-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-right-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-bottom-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-left-color: rgba(84.7059%,84.7059%,84.7059%,1);
}
calendar:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
calendar:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
calendar:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
calendar:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
calendar:normal .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
	-fm-icon: calendar;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
calendar:hover .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
calendar:pressed .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-left-color: rgba(84.7059%,84.7059%,84.7059%,1);
	box-shadow: inset 0pt 0pt 3pt 0pt rgba(0%,0%,0%,0.2);
}
calendar:focus .icon
{
	border-left-color: rgba(20%,20%,20%,1);
}

scrollbar:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 17pt;
}
scrollbar:disabled .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
}
scrollbar:normal .scrollbar_top_button
{
	background-color: rgba(100%,100%,100%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-style: solid;
	border-left-style: solid;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
	-fm-icon: up-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
scrollbar:hover .scrollbar_top_button
{
	background-color: rgba(100%,100%,100%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-style: solid;
	border-left-style: solid;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:pressed .scrollbar_top_button
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-bottom-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-left-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-bottom-style: solid;
	border-left-style: solid;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:normal .scrollbar_bottom_button
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-left-width: 1pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
	-fm-icon: down-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
scrollbar:hover .scrollbar_bottom_button
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-left-width: 1pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:pressed .scrollbar_bottom_button
{
	background-color: rgba(97.6471%,97.6471%,97.6471%,1);
	border-top-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-left-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-top-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-left-width: 1pt;
	border-bottom-right-radius: 3pt 3pt;
	width: 100%;
	height: 17pt;
}
scrollbar:normal .scrollbar_thumb
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	width: 100%;
}

trailing_grand_summary:normal .self
{
	background-color: rgba(65.4902%,69.8039%,72.1569%,1);
	box-sizing: border-box;
}

bottom_nav_part:normal .self
{
	background-color: rgba(0%,0%,0%,1);
	box-sizing: border-box;
}

trailing_sub_summary:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: none;
	border-right-style: none;
	border-bottom-style: solid;
	border-left-style: none;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

body_alt:normal .self
{
	background-image: none;
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-image-source: none;
	box-sizing: border-box;
}

checkbox_set:normal .self
{
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1.2line;
	text-align: left;
}
checkbox_set:normal .text
{
	margin-left: 0.33em;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	left: 1em;
	position: absolute;
	box-sizing: border-box;
}
checkbox_set:normal .icon
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	padding-top: 0.08em;
	padding-right: 0.08em;
	padding-bottom: 0.08em;
	padding-left: 0.08em;
	width: 1em;
	height: 1em;
	top: 0.1em;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
checkbox_set:focus .icon
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
checkbox_set:checked .icon
{
	-fm-icon: modern-check;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

leading_grand_summary:normal .self
{
	background-color: rgba(65.4902%,69.8039%,72.1569%,1);
	box-sizing: border-box;
}

web_viewer:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(43.9216%,43.9216%,43.9216%,1);
	line-height: 1line;
	text-align: left;
}
web_viewer:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
web_viewer:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.5em;
	padding-right: 0.5em;
	padding-bottom: 0.5em;
	padding-left: 0.5em;
}

trailing_sub_summary_2:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: none;
	border-right-style: none;
	border-bottom-style: solid;
	border-left-style: none;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

leading_sub_summary:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-style: solid;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

rectangle:normal .self
{
	background-color: rgba(96.8627%,96.8627%,96.8627%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

button:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: center;
	-fm-text-vertical-align: center;
}
button:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
button:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-top-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-right-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-bottom-color: rgba(84.7059%,84.7059%,84.7059%,1);
	border-left-color: rgba(84.7059%,84.7059%,84.7059%,1);
}
button:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
button:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
	padding-top: 0.25em;
	padding-right: 0.5em;
	padding-bottom: 0.25em;
	padding-left: 0.5em;
}
button:normal .text
{
	width: 100%;
	height: 100%;
	box-sizing: border-box;
}
button:normal .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
	-fm-icon-padding: 0.33em;
}

body:normal .self
{
	background-image: none;
	background-color: rgba(94.1176%,94.1176%,94.1176%,1);
	border-image-source: none;
	box-sizing: border-box;
	-fm-use-body-current-row-style: true;
}
body:checked .self
{
	background-image: none;
	background-color: rgba(87.8431%,92.549%,98.0392%,1);
	border-image-source: none;
}

pop_up:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
pop_up:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
pop_up:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-top-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-right-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-bottom-color: rgba(90.9804%,90.9804%,90.9804%,1);
	border-left-color: rgba(90.9804%,90.9804%,90.9804%,1);
}
pop_up:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
pop_up:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
pop_up:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
pop_up:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
pop_up:normal .icon
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
	-fm-icon: down-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

leading_sub_summary_2:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-style: solid;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

drop_down:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
	border-top-right-radius: 3pt 3pt;
	border-bottom-right-radius: 3pt 3pt;
	border-bottom-left-radius: 3pt 3pt;
	border-top-left-radius: 3pt 3pt;
	font-family: -fm-font-family(arial,sans-serif,ArialMT;sans-serif);
	font-style: normal;
	font-size: 12pt;
	color: rgba(0%,0%,0%,1);
	line-height: 1line;
	text-align: left;
}
drop_down:pressed .self
{
	border-top-color: rgba(90.9804%,90.9804%,87.8431%,1);
	border-right-color: rgba(90.9804%,90.9804%,87.8431%,1);
	border-bottom-color: rgba(90.9804%,90.9804%,87.8431%,1);
	border-left-color: rgba(90.9804%,90.9804%,87.8431%,1);
}
drop_down:focus .self
{
	border-top-color: rgba(20%,20%,20%,1);
	border-right-color: rgba(20%,20%,20%,1);
	border-bottom-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(20%,20%,20%,1);
	box-shadow: 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
drop_down:placeholder .self
{
	color: rgba(64.3137%,64.3137%,64.3137%,1);
}
drop_down:normal .inner_border
{
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	border-bottom-left-radius: 2pt 2pt;
	border-top-left-radius: 2pt 2pt;
}
drop_down:normal .text
{
	margin-top: 0.25em;
	margin-right: 0.5em;
	margin-bottom: 0.17em;
	margin-left: 0.5em;
	top: 0pt;
	right: 17pt;
	bottom: 0pt;
	left: 0pt;
	position: absolute;
	box-sizing: border-box;
}
drop_down:normal .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-style: solid;
	border-left-width: 1pt;
	border-top-right-radius: 2pt 2pt;
	border-bottom-right-radius: 2pt 2pt;
	width: 17pt;
	top: 0pt;
	right: 0pt;
	bottom: 0pt;
	position: absolute;
	box-sizing: border-box;
	-fm-icon: down-arrow;
	-fm-icon-color: rgba(0%,0%,0%,1);
}
drop_down:hover .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(98.8235%,98.8235%,98.8235%,1)));
}
drop_down:pressed .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(97.6471%,97.6471%,97.6471%,1)), to(rgba(92.1569%,92.1569%,92.1569%,1)));
	border-left-color: rgba(90.9804%,90.9804%,87.8431%,1);
	box-shadow: inset 0pt 0pt 3pt 0pt rgba(0%,0%,0%,0.2);
}
drop_down:focus .icon
{
	border-left-color: rgba(20%,20%,20%,1);
}

line:normal .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}

leading_sub_summary_1:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-top-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: solid;
	border-bottom-style: solid;
	border-top-width: 1pt;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

title_header:normal .self
{
	background-color: rgba(100%,100%,100%,1);
	box-sizing: border-box;
}

field:droptarget .inner_border
{
	box-shadow: inset 0pt 0pt 2pt 1pt rgba(0%,43.9216%,81.1765%,1);
}
field:normal .baseline
{
	border-bottom-width: 1pt;
}

trailing_sub_summary_1:normal .self
{
	background-color: rgba(98.8235%,98.8235%,98.8235%,1);
	border-top-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-bottom-color: rgba(80.3922%,80.3922%,80.3922%,1);
	border-top-style: solid;
	border-bottom-style: solid;
	border-top-width: 1pt;
	border-bottom-width: 1pt;
	box-sizing: border-box;
}

title_footer text_box:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

trailing_grand_summary text_box:normal .self
{
	color: rgba(100%,100%,100%,1);
}

trailing_sub_summary_1 text_box:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

trailing_sub_summary_2 text_box:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

trailing_sub_summary text_box:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

header text_box:normal .self
{
	font-weight: bold;
	font-size: 14pt;
	color: rgba(100%,100%,100%,1);
}

footer text_box:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

leading_sub_summary text_box:normal .self
{
	color: rgba(0%,0%,0%,1);
}

leading_sub_summary_1 text_box:normal .self
{
	color: rgba(0%,0%,0%,1);
}

leading_sub_summary_2 text_box:normal .self
{
	color: rgba(0%,0%,0%,1);
}

leading_grand_summary text_box:normal .self
{
	font-weight: bold;
	color: rgba(100%,100%,100%,1);
}

title_header text_box:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

/* Custom Styles */
button.accent_button_1:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20.3922%,62.7451%,95.6863%,1)), to(rgba(7.05882%,40.7843%,65.098%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_1:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(30.1961%,69.0196%,96.8627%,1)), to(rgba(12.9412%,47.0588%,71.3726%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_1:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(18.4314%,59.2157%,88.2353%,1)), to(rgba(8.23529%,38.4314%,60.3922%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_1:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_1:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_1:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

button.accent_button_2:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(57.2549%,79.2157%,26.6667%,1)), to(rgba(44.7059%,63.9216%,19.6078%,1)));
	border-top-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-right-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-bottom-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-left-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_2:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(61.1765%,82.3529%,30.5882%,1)), to(rgba(44.7059%,63.9216%,19.6078%,1)));
	border-top-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-right-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-bottom-color: rgba(52.549%,74.1176%,10.9804%,1);
	border-left-color: rgba(52.549%,74.1176%,10.9804%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_2:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(54.5098%,76.4706%,23.1373%,1)), to(rgba(44.7059%,63.9216%,19.6078%,1)));
	border-top-color: rgba(41.9608%,51.3726%,24.3137%,1);
	border-right-color: rgba(41.9608%,51.3726%,24.3137%,1);
	border-bottom-color: rgba(41.9608%,51.3726%,24.3137%,1);
	border-left-color: rgba(41.9608%,51.3726%,24.3137%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_2:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_2:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_2:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

button.accent_button_3:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(57.2549%,10.1961%,19.2157%,1)), to(rgba(46.6667%,5.4902%,13.3333%,1)));
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_3:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(64.3137%,12.549%,22.3529%,1)), to(rgba(50.1961%,7.05882%,15.2941%,1)));
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_3:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(52.9412%,9.80392%,18.0392%,1)), to(rgba(42.7451%,5.88235%,12.9412%,1)));
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_3:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_3:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_3:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

button.accent_button_4:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(98.4314%,80%,2.7451%,1)), to(rgba(100%,72.9412%,0%,1)));
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.accent_button_4:hover .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,81.9608%,5.4902%,1)), to(rgba(100%,74.1176%,11.3725%,1)));
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_4:pressed .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,70.5882%,0%,1)), to(rgba(94.1176%,76.4706%,2.35294%,1)));
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
	color: rgba(100%,100%,100%,1);
}
button.accent_button_4:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_4:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.accent_button_4:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

shape.accent_color_1:normal .self
{
	background-image: none;
	background-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-top-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-right-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-bottom-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-left-color: rgba(15.6863%,55.2941%,80.7843%,1);
	border-image-source: none;
}

shape.accent_color_2:normal .self
{
	background-image: none;
	background-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-top-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-right-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-bottom-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-left-color: rgba(44.7059%,63.9216%,19.6078%,1);
	border-image-source: none;
}

shape.accent_color_3:normal .self
{
	background-image: none;
	background-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-top-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-right-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-bottom-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-left-color: rgba(46.6667%,5.4902%,13.3333%,1);
	border-image-source: none;
}

shape.accent_color_4:normal .self
{
	background-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-top-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-right-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-bottom-color: rgba(98.8235%,74.902%,23.1373%,1);
	border-left-color: rgba(98.8235%,74.902%,23.1373%,1);
}

text_box.accent_text_1:normal .self
{
	font-weight: bold;
	color: rgba(15.6863%,55.2941%,80.7843%,1);
}

text_box.accent_text_2:normal .self
{
	font-weight: bold;
	color: rgba(44.7059%,63.9216%,19.6078%,1);
}

text_box.accent_text_3:normal .self
{
	font-weight: bold;
	color: rgba(46.6667%,5.4902%,13.3333%,1);
}

text_box.accent_text_4:normal .self
{
	font-weight: bold;
	color: rgba(98.8235%,74.902%,23.1373%,1);
}

button_bar.body_button_bar:normal .self
{
	border-top-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-right-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-bottom-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-left-color: rgba(83.9216%,83.9216%,83.9216%,1);
}
button_bar.body_button_bar:normal .button_bar_divider
{
	border-top-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-right-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-bottom-color: rgba(83.9216%,83.9216%,83.9216%,1);
	border-left-color: rgba(83.9216%,83.9216%,83.9216%,1);
}

button_bar_segment.body_button_bar:normal .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
	color: rgba(0%,0%,0%,1);
}
button_bar_segment.body_button_bar:hover .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
}
button_bar_segment.body_button_bar:pressed .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
}
button_bar_segment.body_button_bar:checked .self
{
	background-color: rgba(95.6863%,95.6863%,95.6863%,1);
}
button_bar_segment.body_button_bar:normal .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}

shape.column_header_region:normal .self
{
	background-image: none;
	background-color: rgba(12.549%,12.549%,12.549%,1);
	border-top-color: rgba(12.549%,12.549%,12.549%,1);
	border-right-color: rgba(12.549%,12.549%,12.549%,1);
	border-bottom-color: rgba(12.549%,12.549%,12.549%,1);
	border-left-color: rgba(12.549%,12.549%,12.549%,1);
	border-image-source: none;
}

text_box.column_header_text:normal .self
{
	color: rgba(100%,100%,100%,1);
}

shape.content_region:normal .self
{
	background-image: none;
	background-color: rgba(94.1176%,94.1176%,94.1176%,1);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-image-source: none;
}

text_box.footer_text:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

part.form_body:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(99.6078%,99.6078%,99.6078%,1)), to(rgba(86.6667%,86.6667%,86.6667%,1)));
	border-image-source: none;
	box-sizing: border-box;
	-fm-use-body-current-row-style: true;
}

shape.gradient_1:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(99.6078%,99.6078%,99.6078%,1)), to(rgba(85.8824%,85.8824%,85.8824%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}

shape.gradient_2:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(90.9804%,92.549%,93.7255%,1)), to(rgba(67.451%,71.3726%,75.6863%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}

text_box.header_text:normal .self
{
	font-weight: bold;
	font-size: 14pt;
	color: rgba(100%,100%,100%,1);
}

text_box.leading_grand_summary_text:normal .self
{
	font-weight: bold;
	color: rgba(100%,100%,100%,1);
}

text_box.leading_sub_summary_1_text:normal .self
{
	color: rgba(0%,0%,0%,1);
}

text_box.leading_sub_summary_2_text:normal .self
{
	color: rgba(0%,0%,0%,1);
}

text_box.leading_sub_summary_additional_text:normal .self
{
	color: rgba(0%,0%,0%,1);
}

container.minimal_container:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
container.minimal_container:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
container.minimal_container:focus .self
{
	background-color: rgba(100%,100%,100%,1);
}

calendar.minimal_drop-down_calendar:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
calendar.minimal_drop-down_calendar:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
calendar.minimal_drop-down_calendar:focus .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}
calendar.minimal_drop-down_calendar:normal .icon
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	-fm-icon-color: rgba(100%,100%,100%,0);
}
calendar.minimal_drop-down_calendar:hover .icon
{
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	-fm-icon-color: rgba(0%,0%,0%,1);
}
calendar.minimal_drop-down_calendar:pressed .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
calendar.minimal_drop-down_calendar:focus .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-width: 1pt;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

drop_down.minimal_drop-down_list:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
drop_down.minimal_drop-down_list:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
drop_down.minimal_drop-down_list:focus .self
{
	background-color: rgba(100%,100%,100%,1);
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}
drop_down.minimal_drop-down_list:normal .icon
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	-fm-icon-color: rgba(100%,100%,100%,0);
}
drop_down.minimal_drop-down_list:hover .icon
{
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	-fm-icon-color: rgba(0%,0%,0%,1);
}
drop_down.minimal_drop-down_list:pressed .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
drop_down.minimal_drop-down_list:focus .icon
{
	background-image: -webkit-gradient(linear,left top,left bottom, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-left-width: 1pt;
	-fm-icon-color: rgba(0%,0%,0%,1);
}

edit_box.minimal_edit_box:normal .self
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
edit_box.minimal_edit_box:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
edit_box.minimal_edit_box:focus .self
{
	background-color: rgba(100%,100%,100%,1);
}

pop_up.minimal_pop-up_menu:normal .self
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,0);
	border-image-source: none;
}
pop_up.minimal_pop-up_menu:hover .self
{
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
}
pop_up.minimal_pop-up_menu:focus .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-width: 1pt;
	border-right-width: 1pt;
	border-bottom-width: 1pt;
	border-left-width: 1pt;
}
pop_up.minimal_pop-up_menu:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,0);
}
pop_up.minimal_pop-up_menu:hover .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
pop_up.minimal_pop-up_menu:pressed .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}
pop_up.minimal_pop-up_menu:focus .icon
{
	-fm-icon-color: rgba(0%,0%,0%,1);
}

dot_control.minimal_slide_control:normal .self
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-image-source: none;
}
dot_control.minimal_slide_control:normal .contents
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-top-color: rgba(0%,0%,0%,0);
	border-right-color: rgba(0%,0%,0%,0);
	border-bottom-color: rgba(0%,0%,0%,0);
	border-left-color: rgba(0%,0%,0%,0);
	border-image-source: none;
	box-shadow: inset 0pt 0pt 0pt 0pt rgba(0%,0%,0%,0);
}

button.navigation_button:normal .self
{
	background-image: none;
	background-color: rgba(20%,20%,20%,1);
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
button.navigation_button:hover .self
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	color: rgba(100%,100%,100%,1);
}
button.navigation_button:pressed .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	color: rgba(100%,100%,100%,1);
}
button.navigation_button:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.navigation_button:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
button.navigation_button:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

checkbox_set.navigation_checkbox_set:normal .self
{
	background-image: none;
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
checkbox_set.navigation_checkbox_set:normal .icon
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
}

calendar.navigation_drop-down_calendar:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:hover .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:pressed .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:normal .icon
{
	background-image: none;
	background-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:hover .icon
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
calendar.navigation_drop-down_calendar:pressed .icon
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}

drop_down.navigation_drop-down_list:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:hover .self
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:pressed .self
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:normal .icon
{
	background-image: none;
	background-color: rgba(20%,20%,20%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:hover .icon
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}
drop_down.navigation_drop-down_list:pressed .icon
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	-fm-icon-color: rgba(100%,100%,100%,1);
}

edit_box.navigation_edit_box:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}

part.navigation_part:normal .self
{
	background-image: none;
	background-color: rgba(12.9412%,12.9412%,12.9412%,1);
	border-image-source: none;
	box-sizing: border-box;
}

text_box.navigation_part_text:normal .self
{
	color: rgba(87.451%,87.451%,87.451%,1);
}

pop_up.navigation_pop-up_menu:normal .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:hover .self
{
	background-image: none;
	background-color: rgba(22.3529%,22.3529%,22.3529%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:pressed .self
{
	background-image: none;
	background-color: rgba(14.902%,14.902%,14.902%,1);
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
	color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:normal .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:hover .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}
pop_up.navigation_pop-up_menu:pressed .icon
{
	-fm-icon-color: rgba(100%,100%,100%,1);
}

radio_set.navigation_radio_button_set:normal .self
{
	background-image: none;
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
radio_set.navigation_radio_button_set:normal .icon
{
	background-image: none;
	border-top-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-right-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-bottom-color: rgba(28.6275%,28.6275%,28.6275%,1);
	border-left-color: rgba(28.6275%,28.6275%,28.6275%,1);
}

shape.navigation_region:normal .self
{
	background-image: none;
	background-color: rgba(12.9412%,12.9412%,12.9412%,1);
	border-top-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-right-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-bottom-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-left-color: rgba(12.9412%,12.9412%,12.9412%,0);
	border-image-source: none;
}

text_box.navigation_text:normal .self
{
	color: rgba(100%,100%,100%,1);
}

popover.popover_alternate_1:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20.3922%,62.7451%,95.6863%,1)), to(rgba(7.05882%,40.7843%,65.098%,1)));
	border-top-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-right-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-bottom-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-left-color: rgba(7.05882%,40.7843%,65.098%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
popover.popover_alternate_1:normal .contents
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-image-source: none;
}

popover.popover_alternate_2:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(20%,20%,20%,1)), to(rgba(14.902%,14.902%,14.902%,1)));
	border-top-color: rgba(14.902%,14.902%,14.902%,1);
	border-right-color: rgba(14.902%,14.902%,14.902%,1);
	border-bottom-color: rgba(14.902%,14.902%,14.902%,1);
	border-left-color: rgba(14.902%,14.902%,14.902%,1);
	border-image-source: none;
	color: rgba(100%,100%,100%,1);
}
popover.popover_alternate_2:normal .contents
{
	background-image: none;
	background-color: rgba(100%,100%,100%,0);
	border-image-source: none;
}

dot_control.slide_control_alternate:normal .self
{
	background-image: none;
	background-color: rgba(0%,0%,0%,0);
	border-image-source: none;
}
dot_control.slide_control_alternate:normal .dot
{
	border-image-source: none;
}
dot_control.slide_control_alternate:checked .dot
{
	background-color: rgba(15.6863%,55.2941%,80.7843%,1);
}

shape.title_bar_region:normal .self
{
	background-image: -webkit-gradient(linear,25% 0%,25% 100%, from(rgba(100%,100%,100%,1)), to(rgba(95.2941%,95.2941%,95.2941%,1)));
	border-top-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-right-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-bottom-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-left-color: rgba(87.0588%,87.0588%,87.0588%,1);
	border-image-source: none;
}

text_box.title_footer_text:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

text_box.title_header_text:normal .self
{
	font-size: 10pt;
	color: rgba(0%,0%,0%,1);
}

text_box.title_text_1:normal .self
{
	font-weight: bold;
	font-size: 24pt;
	color: rgba(0%,0%,0%,1);
}

text_box.title_text_2:normal .self
{
	font-weight: bold;
	font-size: 18pt;
	color: rgba(0%,0%,0%,1);
}

text_box.trailing_grand_summary_text:normal .self
{
	color: rgba(100%,100%,100%,1);
}

text_box.trailing_sub_summary_1_text:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

text_box.trailing_sub_summary_2_text:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

text_box.trailing_sub_summary_additional_text:normal .self
{
	color: rgba(33.7255%,39.6078%,47.451%,1);
}

]]></CSS>					<Metadata>						<namedstyles>							<trailing_sub_summary_additional_text>• Trailing Sub-summary Additional Text</trailing_sub_summary_additional_text>							<trailing_sub_summary_2_text>• Trailing Sub-summary 2 Text</trailing_sub_summary_2_text>							<trailing_sub_summary_1_text>• Trailing Sub-summary 1 Text</trailing_sub_summary_1_text>							<trailing_grand_summary_text>• Trailing Grand Summary Text</trailing_grand_summary_text>							<title_text_2>Title Text 2</title_text_2>							<title_text_1>Title Text 1</title_text_1>							<title_header_text>• Title Header Text</title_header_text>							<title_footer_text>• Title Footer Text</title_footer_text>							<title_bar_region>Title Bar Region</title_bar_region>							<slide_control_alternate>Slide Control Alternate</slide_control_alternate>							<popover_alternate_2>Popover Alternate 2</popover_alternate_2>							<popover_alternate_1>Popover Alternate 1</popover_alternate_1>							<navigation_text>Navigation Text</navigation_text>							<navigation_region>Navigation Region</navigation_region>							<navigation_radio_button_set>Navigation Radio Button Set</navigation_radio_button_set>							<navigation_pop-up_menu>Navigation Pop-up Menu</navigation_pop-up_menu>							<navigation_part_text>• Navigation Part Text</navigation_part_text>							<navigation_part>Navigation Part</navigation_part>							<navigation_edit_box>Navigation Edit Box</navigation_edit_box>							<navigation_drop-down_list>Navigation Drop-down List</navigation_drop-down_list>							<navigation_drop-down_calendar>Navigation Drop-down Calendar</navigation_drop-down_calendar>							<navigation_checkbox_set>Navigation Checkbox Set</navigation_checkbox_set>							<navigation_button>Navigation Button</navigation_button>							<minimal_slide_control>Minimal Slide Control</minimal_slide_control>							<minimal_pop-up_menu>Minimal Pop-up Menu</minimal_pop-up_menu>							<minimal_edit_box>Minimal Edit Box</minimal_edit_box>							<minimal_drop-down_list>Minimal Drop-down List</minimal_drop-down_list>							<minimal_drop-down_calendar>Minimal Drop-down Calendar</minimal_drop-down_calendar>							<minimal_container>Minimal Container</minimal_container>							<leading_sub_summary_additional_text>• Leading Sub-summary Additional Text</leading_sub_summary_additional_text>							<leading_sub_summary_2_text>• Leading Sub-summary 2 Text</leading_sub_summary_2_text>							<leading_sub_summary_1_text>• Leading Sub-summary 1 Text</leading_sub_summary_1_text>							<leading_grand_summary_text>• Leading Grand Summary Text</leading_grand_summary_text>							<header_text>• Header Text</header_text>							<gradient_2>Gradient 2</gradient_2>							<gradient_1>Gradient 1</gradient_1>							<form_body>Form Body</form_body>							<footer_text>• Footer Text</footer_text>							<content_region>Content Region</content_region>							<column_header_text>Column Header Text</column_header_text>							<column_header_region>Column Header Region</column_header_region>							<body_button_bar>Body Button Bar</body_button_bar>							<accent_text_4>Accent Text 4</accent_text_4>							<accent_text_3>Accent Text 3</accent_text_3>							<accent_text_2>Accent Text 2</accent_text_2>							<accent_text_1>Accent Text 1</accent_text_1>							<accent_color_4>Accent Color 4</accent_color_4>							<accent_color_3>Accent Color 3</accent_color_3>							<accent_color_2>Accent Color 2</accent_color_2>							<accent_color_1>Accent Color 1</accent_color_1>							<accent_button_4>Accent Button 4</accent_button_4>							<accent_button_3>Accent Button 3</accent_button_3>							<accent_button_2>Accent Button 2</accent_button_2>							<accent_button_1>Accent Button 1</accent_button_1>						</namedstyles>						<layoutbuilder>							<kVerticalFieldSpacing>2</kVerticalFieldSpacing>							<kTrailingPartPaddingTop>9</kTrailingPartPaddingTop>							<kTrailingPartPaddingBottom>5</kTrailingPartPaddingBottom>							<kTopNavPartMinSize>30</kTopNavPartMinSize>							<kTitleHeaderMinSize>30</kTitleHeaderMinSize>							<kTitleFooterMinSize>30</kTitleFooterMinSize>							<kSummaryPartMinSize>40</kSummaryPartMinSize>							<kReportBreakFieldIndent>16</kReportBreakFieldIndent>							<kPartPaddingRight>16</kPartPaddingRight>							<kPartPaddingLeft>16</kPartPaddingLeft>							<kLeadingPartPaddingTop>9</kLeadingPartPaddingTop>							<kLeadingPartPaddingBottom>5</kLeadingPartPaddingBottom>							<kLastPartPaddingBottom>9</kLastPartPaddingBottom>							<kHeaderMinSize>50</kHeaderMinSize>							<kFooterMinSize>40</kFooterMinSize>							<kFirstPartPaddingTop>16</kFirstPartPaddingTop>							<kBottomNavPartMinSize>30</kBottomNavPartMinSize>							<kBodyPartPaddingTop>9</kBodyPartPaddingTop>							<kBodyPartPaddingBottom>5</kBodyPartPaddingBottom>							<kBodyMinSize>40</kBodyMinSize>							<kBaseFontSize>12</kBaseFontSize>							<kBackgroundPaddingTop>0</kBackgroundPaddingTop>							<kBackgroundPaddingRight>0</kBackgroundPaddingRight>							<kBackgroundPaddingLeft>0</kBackgroundPaddingLeft>							<kBackgroundPaddingBottom>0</kBackgroundPaddingBottom>						</layoutbuilder>						<colorpalette>							<swatch9>#f8c308</swatch9>							<swatch8>#81c234</swatch8>							<swatch7>#7d0c25</swatch7>							<swatch6>#2982fe</swatch6>							<swatch5>#141414</swatch5>							<swatch4>#303030</swatch4>							<swatch3>#494949</swatch3>							<swatch2>#a2a2a2</swatch2>							<swatch1>#d6d6d6</swatch1>						</colorpalette>						<charting>							<colorScheme>Plum Tree</colorScheme>						</charting>					</Metadata>				</Theme>			</ThemeCatalog>			<LayoutCatalog membercount="1">				<Layout id="2" name="DEV" width="1024">					<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>					<LayoutThemeReference id="1" name="com.filemaker.theme.enlightened" Base="com.filemaker.theme.minimalist"></LayoutThemeReference>					<PartsList membercount="1">						<Part type="Body" kind="4">							<Definition type="Body" kind="4" size="707" absolute="0" Options="0"></Definition>						</Part>					</PartsList>					<Options hidden="False">15927297</Options>				</Layout>			</LayoutCatalog>			<PrivilegeSetsCatalog membercount="4">				<ObjectList membercount="4">					<PrivilegeSet id="1" name="[Full Access]">						<Description>access to everything</Description>						<access default="True"></access>					</PrivilegeSet>					<PrivilegeSet id="2" name="[Data Entry Only]">						<Description>write access to all records, no design access</Description>						<access default="True"></access>					</PrivilegeSet>					<PrivilegeSet id="3" name="[Read-Only Access]">						<Description>read access to all records, no design access, write access to all global fields</Description>						<access default="True"></access>					</PrivilegeSet>					<PrivilegeSet id="4" name="Guest">						<Description></Description>						<access>							<Records viewState="ReadOnly"></Records>							<Layouts viewState="ReadOnly"></Layouts>							<ValueLists Create="False" Edit="False" Delete="False"></ValueLists>							<Scripts viewState="ReadOnly"></Scripts>							<Other value="24578" Print="False" Export="False" manageExtPrivs="False" allowOverride="False" disconnectIdle="False" commands="All">								<Password prohibitModification="True"></Password>							</Other>						</access>					</PrivilegeSet>				</ObjectList>			</PrivilegeSetsCatalog>			<ExtendedPrivilegesCatalog membercount="9">				<ObjectList membercount="9">					<ExtendedPrivilege id="1" name="fmwebdirect">						<Description>Access via FileMaker WebDirect</Description>						<ObjectList membercount="1">							<PrivilegeSetReference id="4" name="Guest"></PrivilegeSetReference>						</ObjectList>					</ExtendedPrivilege>					<ExtendedPrivilege id="2" name="fmxdbc">						<Description>Access via ODBC/JDBC</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="3" name="fmapp">						<Description>Access via FileMaker Network</Description>						<ObjectList membercount="2">							<PrivilegeSetReference id="1" name="[Full Access]"></PrivilegeSetReference>							<PrivilegeSetReference id="4" name="Guest"></PrivilegeSetReference>						</ObjectList>					</ExtendedPrivilege>					<ExtendedPrivilege id="4" name="fmreauthenticate10">						<Description>Require re-authentication after the specified minutes in sleep/background.</Description>						<ObjectList membercount="4">							<PrivilegeSetReference id="1" name="[Full Access]"></PrivilegeSetReference>							<PrivilegeSetReference id="2" name="[Data Entry Only]"></PrivilegeSetReference>							<PrivilegeSetReference id="3" name="[Read-Only Access]"></PrivilegeSetReference>							<PrivilegeSetReference id="4" name="Guest"></PrivilegeSetReference>						</ObjectList>					</ExtendedPrivilege>					<ExtendedPrivilege id="5" name="fmxml">						<Description>Access via XML Web Publishing - FMS only</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="6" name="fmphp">						<Description>Access via PHP Web Publishing - FMS only</Description>					</ExtendedPrivilege>					<ExtendedPrivilege id="7" name="fmextscriptaccess">						<Description>Allow Apple events and ActiveX to perform FileMaker operations</Description>						<ObjectList membercount="1">							<PrivilegeSetReference id="4" name="Guest"></PrivilegeSetReference>						</ObjectList>					</ExtendedPrivilege>					<ExtendedPrivilege id="8" name="fmurlscript">						<Description>Allow URLs to perform FileMaker scripts</Description>						<ObjectList membercount="1">							<PrivilegeSetReference id="4" name="Guest"></PrivilegeSetReference>						</ObjectList>					</ExtendedPrivilege>					<ExtendedPrivilege id="9" name="fmrest">						<Description>Access via FileMaker Data API</Description>					</ExtendedPrivilege>				</ObjectList>			</ExtendedPrivilegesCatalog>			<AccountsCatalog membercount="2">				<Options>1</Options>				<ObjectList membercount="2">					<Account id="1" kind="0" type="FileMaker" enable="True">						<Description></Description>						<Authentication>							<AccountName>[]</AccountName>						</Authentication>						<PrivilegeSetReference id="4" name="Guest"></PrivilegeSetReference>					</Account>					<Account id="2" kind="0" type="FileMaker" enable="True">						<Description></Description>						<Authentication>							<AccountName>Chuck Ross</AccountName>						</Authentication>						<PrivilegeSetReference id="1" name="[Full Access]"></PrivilegeSetReference>					</Account>				</ObjectList>			</AccountsCatalog>			<StepsForScripts membercount="2">				<Script>					<ScriptReference id="3" name="_OnFirstWindowOpen"></ScriptReference>					<ObjectList membercount="8">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    This file should only be opened with a link, so alert the user and close the file&#13;Version:    20-02-25 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="68" name="If" enable="True">							<Options>16384</Options>							<ParameterValues membercount="1">								<Parameter type="Calculation">									<Calculation datatype="7" position="0">										<Calculation>											<Text><![CDATA[platform.IsServer]]></Text>										</Calculation>									</Calculation>								</Parameter>							</ParameterValues>						</Step>						<Step id="103" name="Exit Script" enable="True">							<Options>0</Options>						</Step>						<Step id="70" name="End If" enable="True">							<Options>0</Options>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="87" name="Show Custom Dialog" enable="True">							<Options>16389</Options>							<ParameterValues membercount="5">								<Parameter type="Title">									<Calculation datatype="1" position="0">										<Calculation>											<Text><![CDATA["No Access"]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Message">									<Calculation datatype="1" position="1">										<Calculation>											<Text><![CDATA["This is a utility file and not meant to be directly opened."]]></Text>										</Calculation>									</Calculation>								</Parameter>								<Parameter type="Button1" value="Close">									<Boolean type="Commit" value="True"></Boolean>								</Parameter>								<Parameter type="Button2">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>								<Parameter type="Button3">									<Boolean type="Commit" value="False"></Boolean>								</Parameter>							</ParameterValues>						</Step>						<Step id="34" name="Close File" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="DataSourceReference">									<DataSourceReference id="0" name="Current File"></DataSourceReference>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>				<Script>					<ScriptReference id="2" name="Reset Password"></ScriptReference>					<ObjectList membercount="5">						<Step id="89" name="# (comment)" enable="True">							<Options>4</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment value="Purpose:    Uses the token passed as a parameter in the URL to offer the user the chance to change their password&#13;Parameters: _token: A UUID token that identifies which user needs the password reset&#13;Version:    20-02-25 - Charles Ross"></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="89" name="# (comment)" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="Comment">									<Comment></Comment>								</Parameter>							</ParameterValues>						</Step>						<Step id="119" name="Move/Resize Window" enable="True">							<Options>-2147467262</Options>							<ParameterValues membercount="1">								<Parameter type="WindowReference">									<WindowReference>										<Select type="0" kind="current"></Select>										<Bounds>											<height></height>											<width></width>											<top>												<Calculation datatype="1" position="3">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</top>											<left>												<Calculation datatype="1" position="4">													<Calculation>														<Text><![CDATA[window.Offscreen]]></Text>													</Calculation>												</Calculation>											</left>										</Bounds>									</WindowReference>								</Parameter>							</ParameterValues>						</Step>						<Step id="1" name="Perform Script" enable="True">							<Options>16464</Options>							<ParameterValues membercount="2">								<Parameter type="List">									<List name="From list" value="1"></List>								</Parameter>								<Parameter type="Parameter">									<Parameter>										<Calculation datatype="1" position="0">											<Calculation>												<Text><![CDATA[script.Param ( "Token" ; $_token )]]></Text>											</Calculation>										</Calculation>									</Parameter>								</Parameter>							</ParameterValues>						</Step>						<Step id="34" name="Close File" enable="True">							<Options>0</Options>							<ParameterValues membercount="1">								<Parameter type="DataSourceReference">									<DataSourceReference id="0" name="Current File"></DataSourceReference>								</Parameter>							</ParameterValues>						</Step>					</ObjectList>				</Script>			</StepsForScripts>			<PasteIndexList membercount="0"></PasteIndexList>		</AddAction>		<ModifyAction membercount="1">			<FieldsForTables membercount="1">				<FieldCatalog>					<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>					<ObjectList membercount="17">						<Field>							<FieldReference id="1" name="____ ID FIELDS ________________________________________________________________________________" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA["Single-record table for system-wide global fields."]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="3" name="____ TABLE DATA _____________________________________________________________________________" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="4" name="____ RULES ___________________________________________________________________________________" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="5" name="can_edit" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[True]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="6" name="can_delete" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[False]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="7" name="can_view" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[True]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="8" name="is_valid" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[True]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="9" name="____ RELATIONSHIP KEYS ____________________________________________________________________" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="10" name="ONE" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[1]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="11" name="TABLE_NAME" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[dev.GetTableName ( Self )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="12" name="____ HOUSEKEEPING FIELDS _________________________________________________________________" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA["--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="38" name="created_date" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[GetAsDate ( created_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="39" name="created_time" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[GetAsTime ( created_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="42" name="modified_date" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[GetAsDate ( modified_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="43" name="modified_time" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[GetAsTime ( modified_timestamp )]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="45" name="housekeeping_display" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[dev.Housekeeping]]></Text>								</Calculation>							</FieldReference>						</Field>						<Field>							<FieldReference id="46" name="fm_id" repetition="1" baseTable="DEV">								<Calculation>									<TableOccurrenceReference id="1065090" name="DEV"></TableOccurrenceReference>									<Text><![CDATA[GetAsText ( Get ( RecordID ) )]]></Text>								</Calculation>							</FieldReference>						</Field>					</ObjectList>				</FieldCatalog>			</FieldsForTables>		</ModifyAction>	</Structure>	<Metadata membercount="1">		<AddAction membercount="4">			<Minimum version="18.0" value="1800"></Minimum>			<Login type="0">				<UserName>[Guest]</UserName>			</Login>			<Defaults>				<LayoutReference id="2" name="DEV"></LayoutReference>			</Defaults>			<IconData type="999" scale="1">				<Mini>					<BinaryData>						<LibraryReference id="0" key="83D10E98B20C759650AC84CBE7281B22"></LibraryReference>						<StreamList>							<Stream name="MAIN" type="id" size="4">PNGf</Stream>							<Stream name="SIZE" type="Hex" size="4">00600060</Stream>							<Stream name="PNGf" type="Base64" size="8669"></Stream>						</StreamList>					</BinaryData>				</Mini>				<Small>					<BinaryData>						<LibraryReference id="0" key="C55033DC05BEEB011FE6F35F9F8401DB"></LibraryReference>						<StreamList>							<Stream name="MAIN" type="id" size="4">PNGf</Stream>							<Stream name="SIZE" type="Hex" size="4">00BF00C0</Stream>							<Stream name="PNGf" type="Base64" size="25850"></Stream>						</StreamList>					</BinaryData>				</Small>				<Large>					<BinaryData>						<LibraryReference id="0" key="C4803ECF0890B8C28C1EE3C173385158"></LibraryReference>						<StreamList>							<Stream name="MAIN" type="id" size="4">PNGf</Stream>							<Stream name="SIZE" type="Hex" size="4">011F0120</Stream>							<Stream name="PNGf" type="Base64" size="44767">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</Stream>						</StreamList>					</BinaryData>				</Large>				<Original>					<BinaryData>						<LibraryReference id="0" key="41771F792AE526D0C31BA7977F06F515"></LibraryReference>						<StreamList>							<Stream name="MAIN" type="id" size="4">PNGf</Stream>							<Stream name="SIZE" type="Hex" size="4">00800080</Stream>							<Stream name="PNGf" type="Base64" size="19124"></Stream>						</StreamList>					</BinaryData>				</Original>			</IconData>		</AddAction>	</Metadata></FMDynamicTemplate>
